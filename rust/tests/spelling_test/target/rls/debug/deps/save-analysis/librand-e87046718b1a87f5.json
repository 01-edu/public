{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3","program":"/home/miguel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","rand","--edition=2018","/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"getrandom\"","--cfg","feature=\"getrandom_package\"","--cfg","feature=\"libc\"","--cfg","feature=\"std\"","-C","metadata=e87046718b1a87f5","-C","extra-filename=-e87046718b1a87f5","--out-dir","/home/miguel/Documents/rust-exercises/spelling/target/rls/debug/deps","-L","dependency=/home/miguel/Documents/rust-exercises/spelling/target/rls/debug/deps","--extern","getrandom_package=/home/miguel/Documents/rust-exercises/spelling/target/rls/debug/deps/libgetrandom-001ba7db22d858a7.rmeta","--extern","libc=/home/miguel/Documents/rust-exercises/spelling/target/rls/debug/deps/liblibc-caef079c0706fc64.rmeta","--extern","rand_chacha=/home/miguel/Documents/rust-exercises/spelling/target/rls/debug/deps/librand_chacha-cfc7b9a99cf41f6e.rmeta","--extern","rand_core=/home/miguel/Documents/rust-exercises/spelling/target/rls/debug/deps/librand_core-58f0aea4c89740bd.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/miguel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/miguel/Documents/rust-exercises/spelling/target/rls/debug/deps/librand-e87046718b1a87f5.rmeta"},"prelude":{"crate_id":{"name":"rand","disambiguator":[7725466339402548630,16339490887720196671]},"crate_root":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src","external_crates":[{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[13842155912677385872,11660590378338683385]}},{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","num":2,"id":{"name":"core","disambiguator":[1145230128757463294,15976268636418953592]}},{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10006185802367012891,4937926339965588888]}},{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[18134491841186215314,8619879253945163470]}},{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4357087487764653857,7816708319091665300]}},{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10862771416828768076,14090399182622295334]}},{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7832813774001485751,4465207999706185911]}},{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14203079308812153325,7069038021421518271]}},{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[17468104730350570711,1510909898039763528]}},{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[11081656445949358564,12304596919514716713]}},{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[4496289705150708668,14963538919535077439]}},{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[12585038344938944291,11081610577875308163]}},{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4866546307375520792,3681606541934731072]}},{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[6903286030758146719,12939842262273902871]}},{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","num":15,"id":{"name":"rand_core","disambiguator":[6342432003372194414,7561844623949929432]}},{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","num":16,"id":{"name":"getrandom","disambiguator":[11720355070682074774,4560821763973530984]}},{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","num":17,"id":{"name":"cfg_if","disambiguator":[8399646777753009860,5233712646035546754]}},{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","num":18,"id":{"name":"libc","disambiguator":[1098977783598941615,6727081254032812279]}},{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","num":19,"id":{"name":"rand_chacha","disambiguator":[4704840180037967253,3999491126736860537]}},{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","num":20,"id":{"name":"ppv_lite86","disambiguator":[15075425485659982005,521332213807774212]}}],"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":408,"byte_end":22466,"line_start":10,"line_end":723,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":15,"index":146},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":2818,"byte_end":2827,"line_start":93,"line_end":93,"column_start":21,"column_end":30},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":11},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":2829,"byte_end":2834,"line_start":93,"line_end":93,"column_start":32,"column_end":37},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":141},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":2836,"byte_end":2843,"line_start":93,"line_end":93,"column_start":39,"column_end":46},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":147},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":2845,"byte_end":2856,"line_start":93,"line_end":93,"column_start":48,"column_end":59},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":724},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":2931,"byte_end":2941,"line_start":96,"line_end":96,"column_start":54,"column_end":64},"alias_span":null,"name":"thread_rng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":933},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26915,"byte_end":26924,"line_start":99,"line_end":99,"column_start":27,"column_end":36},"alias_span":null,"name":"Bernoulli","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":940},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26926,"byte_end":26940,"line_start":99,"line_end":99,"column_start":38,"column_end":52},"alias_span":null,"name":"BernoulliError","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1524},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26965,"byte_end":26971,"line_start":100,"line_end":100,"column_start":23,"column_end":29},"alias_span":null,"name":"Open01","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1517},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26973,"byte_end":26985,"line_start":100,"line_end":100,"column_start":31,"column_end":43},"alias_span":null,"name":"OpenClosed01","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1593},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":27009,"byte_end":27021,"line_start":101,"line_end":101,"column_start":22,"column_end":34},"alias_span":null,"name":"Alphanumeric","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1122},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":27061,"byte_end":27068,"line_start":102,"line_end":102,"column_start":39,"column_end":46},"alias_span":null,"name":"Uniform","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1497},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":27121,"byte_end":27134,"line_start":104,"line_end":104,"column_start":26,"column_end":39},"alias_span":null,"name":"WeightedError","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1486},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":27136,"byte_end":27149,"line_start":104,"line_end":104,"column_start":41,"column_end":54},"alias_span":null,"name":"WeightedIndex","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":954},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":27290,"byte_end":27298,"line_start":109,"line_end":109,"column_start":25,"column_end":33},"alias_span":null,"name":"Binomial","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":962},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":27367,"byte_end":27373,"line_start":112,"line_end":112,"column_start":23,"column_end":29},"alias_span":null,"name":"Cauchy","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":970},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":27445,"byte_end":27454,"line_start":115,"line_end":115,"column_start":26,"column_end":35},"alias_span":null,"name":"Dirichlet","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":983},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":27529,"byte_end":27532,"line_start":118,"line_end":118,"column_start":29,"column_end":32},"alias_span":null,"name":"Exp","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":976},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":27534,"byte_end":27538,"line_start":118,"line_end":118,"column_start":34,"column_end":38},"alias_span":null,"name":"Exp1","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1064},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":27608,"byte_end":27612,"line_start":121,"line_end":121,"column_start":23,"column_end":27},"alias_span":null,"name":"Beta","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1029},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":27614,"byte_end":27624,"line_start":121,"line_end":121,"column_start":29,"column_end":39},"alias_span":null,"name":"ChiSquared","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1047},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":27626,"byte_end":27633,"line_start":121,"line_end":121,"column_start":41,"column_end":48},"alias_span":null,"name":"FisherF","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":990},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":27635,"byte_end":27640,"line_start":121,"line_end":121,"column_start":50,"column_end":55},"alias_span":null,"name":"Gamma","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1056},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":27642,"byte_end":27650,"line_start":121,"line_end":121,"column_start":57,"column_end":65},"alias_span":null,"name":"StudentT","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1087},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":27721,"byte_end":27730,"line_start":124,"line_end":124,"column_start":24,"column_end":33},"alias_span":null,"name":"LogNormal","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1079},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":27732,"byte_end":27738,"line_start":124,"line_end":124,"column_start":35,"column_end":41},"alias_span":null,"name":"Normal","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1072},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":27740,"byte_end":27754,"line_start":124,"line_end":124,"column_start":43,"column_end":57},"alias_span":null,"name":"StandardNormal","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1094},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":27824,"byte_end":27830,"line_start":127,"line_end":127,"column_start":23,"column_end":29},"alias_span":null,"name":"Pareto","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1102},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":27900,"byte_end":27907,"line_start":130,"line_end":130,"column_start":24,"column_end":31},"alias_span":null,"name":"Poisson","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1113},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":27980,"byte_end":27990,"line_start":133,"line_end":133,"column_start":27,"column_end":37},"alias_span":null,"name":"Triangular","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1406},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":28064,"byte_end":28074,"line_start":136,"line_end":136,"column_start":28,"column_end":38},"alias_span":null,"name":"UnitCircle","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1413},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":28148,"byte_end":28165,"line_start":139,"line_end":139,"column_start":28,"column_end":45},"alias_span":null,"name":"UnitSphereSurface","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1420},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":28235,"byte_end":28242,"line_start":142,"line_end":142,"column_start":24,"column_end":31},"alias_span":null,"name":"Weibull","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":415},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":28855,"byte_end":28864,"line_start":163,"line_end":163,"column_start":27,"column_end":36},"alias_span":null,"name":"IntoFloat","value":"","parent":{"krate":0,"index":419}},{"kind":"Use","ref_id":{"krate":0,"index":537},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":256882,"byte_end":256894,"line_start":21,"line_end":21,"column_start":49,"column_end":61},"alias_span":null,"name":"Distribution","value":"","parent":{"krate":0,"index":560}},{"kind":"Use","ref_id":{"krate":0,"index":2030},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":257014,"byte_end":257020,"line_start":25,"line_end":25,"column_start":40,"column_end":46},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":560}},{"kind":"Use","ref_id":{"krate":0,"index":2037},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":257085,"byte_end":257094,"line_start":28,"line_end":28,"column_start":22,"column_end":31},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":560}},{"kind":"Use","ref_id":{"krate":0,"index":836},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":257135,"byte_end":257149,"line_start":29,"line_end":29,"column_start":40,"column_end":54},"alias_span":null,"name":"IteratorRandom","value":"","parent":{"krate":0,"index":560}},{"kind":"Use","ref_id":{"krate":0,"index":812},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":257151,"byte_end":257162,"line_start":29,"line_end":29,"column_start":56,"column_end":67},"alias_span":null,"name":"SliceRandom","value":"","parent":{"krate":0,"index":560}},{"kind":"Use","ref_id":{"krate":0,"index":931},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":257223,"byte_end":257229,"line_start":32,"line_end":32,"column_start":17,"column_end":23},"alias_span":null,"name":"random","value":"","parent":{"krate":0,"index":560}},{"kind":"Use","ref_id":{"krate":0,"index":724},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":257231,"byte_end":257241,"line_start":32,"line_end":32,"column_start":25,"column_end":35},"alias_span":null,"name":"thread_rng","value":"","parent":{"krate":0,"index":560}},{"kind":"Use","ref_id":{"krate":15,"index":146},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":257278,"byte_end":257287,"line_start":33,"line_end":33,"column_start":35,"column_end":44},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":560}},{"kind":"Use","ref_id":{"krate":0,"index":902},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":257289,"byte_end":257292,"line_start":33,"line_end":33,"column_start":46,"column_end":49},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":560}},{"kind":"Use","ref_id":{"krate":15,"index":141},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":257294,"byte_end":257301,"line_start":33,"line_end":33,"column_start":51,"column_end":58},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":560}},{"kind":"Use","ref_id":{"krate":15,"index":147},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":257303,"byte_end":257314,"line_start":33,"line_end":33,"column_start":60,"column_end":71},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":560}},{"kind":"Use","ref_id":{"krate":0,"index":1993},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/mod.rs","byte_start":263470,"byte_end":263479,"line_start":14,"line_end":14,"column_start":46,"column_end":55},"alias_span":null,"name":"ReadError","value":"","parent":{"krate":0,"index":576}},{"kind":"Use","ref_id":{"krate":0,"index":1987},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/mod.rs","byte_start":263481,"byte_end":263488,"line_start":14,"line_end":14,"column_start":57,"column_end":64},"alias_span":null,"name":"ReadRng","value":"","parent":{"krate":0,"index":576}},{"kind":"Use","ref_id":{"krate":0,"index":1998},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/mod.rs","byte_start":263516,"byte_end":263528,"line_start":15,"line_end":15,"column_start":26,"column_end":38},"alias_span":null,"name":"ReseedingRng","value":"","parent":{"krate":0,"index":576}},{"kind":"Use","ref_id":{"krate":0,"index":2019},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":262765,"byte_end":262775,"line_start":110,"line_end":110,"column_start":24,"column_end":34},"alias_span":null,"name":"EntropyRng","value":"","parent":{"krate":0,"index":575}},{"kind":"Use","ref_id":{"krate":0,"index":2030},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":262858,"byte_end":262864,"line_start":113,"line_end":113,"column_start":20,"column_end":26},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":575}},{"kind":"Use","ref_id":{"krate":0,"index":2037},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":262912,"byte_end":262921,"line_start":114,"line_end":114,"column_start":47,"column_end":56},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":575}},{"kind":"Use","ref_id":{"krate":15,"index":201},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":262973,"byte_end":262978,"line_start":116,"line_end":116,"column_start":50,"column_end":55},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":575}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":408,"byte_end":22466,"line_start":10,"line_end":723,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":560},{"krate":0,"index":575},{"krate":0,"index":738},{"krate":0,"index":891},{"krate":0,"index":895},{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":902},{"krate":0,"index":921},{"krate":0,"index":923},{"krate":0,"index":926},{"krate":0,"index":929},{"krate":0,"index":2094},{"krate":0,"index":2097},{"krate":0,"index":2100},{"krate":0,"index":2103},{"krate":0,"index":2106},{"krate":0,"index":2109},{"krate":0,"index":2112},{"krate":0,"index":2115},{"krate":0,"index":2118},{"krate":0,"index":2121},{"krate":0,"index":2124},{"krate":0,"index":2127},{"krate":0,"index":2130},{"krate":0,"index":2133},{"krate":0,"index":2136},{"krate":0,"index":2139},{"krate":0,"index":2142},{"krate":0,"index":2145},{"krate":0,"index":2148},{"krate":0,"index":2151},{"krate":0,"index":2154},{"krate":0,"index":2157},{"krate":0,"index":930},{"krate":0,"index":2160},{"krate":0,"index":2165},{"krate":0,"index":2170},{"krate":0,"index":2175},{"krate":0,"index":2180},{"krate":0,"index":2185},{"krate":0,"index":2190},{"krate":0,"index":2195},{"krate":0,"index":2200},{"krate":0,"index":2205},{"krate":0,"index":2210},{"krate":0,"index":2215},{"krate":0,"index":2220},{"krate":0,"index":2225},{"krate":0,"index":2230},{"krate":0,"index":2235},{"krate":0,"index":2240},{"krate":0,"index":2245},{"krate":0,"index":2250},{"krate":0,"index":2255},{"krate":0,"index":2260},{"krate":0,"index":2265},{"krate":0,"index":2270},{"krate":0,"index":2275},{"krate":0,"index":2280},{"krate":0,"index":2285},{"krate":0,"index":2290},{"krate":0,"index":2295},{"krate":0,"index":2300},{"krate":0,"index":2305},{"krate":0,"index":2310},{"krate":0,"index":2315},{"krate":0,"index":2320},{"krate":0,"index":2325},{"krate":0,"index":2330},{"krate":0,"index":2335},{"krate":0,"index":2340},{"krate":0,"index":2345},{"krate":0,"index":2350},{"krate":0,"index":2355},{"krate":0,"index":931}],"decl_id":null,"docs":" Utilities for random number generation","sig":null,"attributes":[{"value":"! Utilities for random number generation","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":408,"byte_end":450,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":451,"byte_end":454,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! Rand provides utilities to generate random numbers, to convert them to","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":455,"byte_end":529,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"! useful types and distributions, and some randomness-related algorithms.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":530,"byte_end":605,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":606,"byte_end":609,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! # Quick Start","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":610,"byte_end":627,"line_start":15,"line_end":15,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":628,"byte_end":631,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! To get you started quickly, the easiest and highest-level way to get","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":632,"byte_end":704,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"! a random value is to use [`random()`]; alternatively you can use","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":705,"byte_end":773,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"! [`thread_rng()`]. The [`Rng`] trait provides a useful API on all RNGs, while","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":774,"byte_end":854,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"! the [`distributions`] and [`seq`] modules provide further","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":855,"byte_end":916,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"! functionality on top of RNGs.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":917,"byte_end":950,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":951,"byte_end":954,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":955,"byte_end":962,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"! use rand::prelude::*;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":963,"byte_end":988,"line_start":24,"line_end":24,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":989,"byte_end":992,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"! if rand::random() { // generates a boolean","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":993,"byte_end":1039,"line_start":26,"line_end":26,"column_start":1,"column_end":47}},{"value":"!     // Try printing a random unicode code point (probably a bad idea)!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":1040,"byte_end":1114,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"!     println!(\"char: {}\", rand::random::<char>());","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":1115,"byte_end":1168,"line_start":28,"line_end":28,"column_start":1,"column_end":54}},{"value":"! }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":1169,"byte_end":1174,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":1175,"byte_end":1178,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! let mut rng = rand::thread_rng();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":1179,"byte_end":1216,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"! let y: f64 = rng.gen(); // generates a float between 0 and 1","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":1217,"byte_end":1281,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":1282,"byte_end":1285,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! let mut nums: Vec<i32> = (1..100).collect();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":1286,"byte_end":1334,"line_start":34,"line_end":34,"column_start":1,"column_end":49}},{"value":"! nums.shuffle(&mut rng);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":1335,"byte_end":1362,"line_start":35,"line_end":35,"column_start":1,"column_end":28}},{"value":"! ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":1363,"byte_end":1370,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":1371,"byte_end":1374,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"! # The Book","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":1375,"byte_end":1389,"line_start":38,"line_end":38,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":1390,"byte_end":1393,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"! For the user guide and futher documentation, please read","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":1394,"byte_end":1454,"line_start":40,"line_end":40,"column_start":1,"column_end":61}},{"value":"! [The Rust Rand Book](https://rust-random.github.io/book).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":1455,"byte_end":1516,"line_start":41,"line_end":41,"column_start":1,"column_end":62}},{"value":"deny(missing_docs)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":1732,"byte_end":1754,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":1755,"byte_end":1794,"line_start":49,"line_end":49,"column_start":1,"column_end":40}},{"value":"allow(clippy :: excessive_precision, clippy :: unreadable_literal, clippy ::\n        float_cmp)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":1982,"byte_end":2081,"line_start":53,"line_end":57,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":14},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"distributions","qualname":"::distributions","value":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":40},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":67},{"krate":0,"index":82},{"krate":0,"index":91},{"krate":0,"index":102},{"krate":0,"index":119},{"krate":0,"index":163},{"krate":0,"index":186},{"krate":0,"index":196},{"krate":0,"index":207},{"krate":0,"index":217},{"krate":0,"index":286},{"krate":0,"index":298},{"krate":0,"index":310},{"krate":0,"index":320},{"krate":0,"index":408},{"krate":0,"index":419},{"krate":0,"index":421},{"krate":0,"index":453},{"krate":0,"index":486},{"krate":0,"index":532},{"krate":0,"index":537},{"krate":0,"index":543},{"krate":0,"index":1968},{"krate":0,"index":1975},{"krate":0,"index":549},{"krate":0,"index":556},{"krate":0,"index":1980},{"krate":0,"index":1985},{"krate":0,"index":1984},{"krate":0,"index":1982}],"decl_id":null,"docs":" Generating random samples from probability distributions","sig":null,"attributes":[{"value":"! Generating random samples from probability distributions","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":22876,"byte_end":22936,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":22937,"byte_end":22940,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! This module is the home of the [`Distribution`] trait and several of its","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":22941,"byte_end":23017,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"! implementations. It is the workhorse behind some of the convenient","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":23018,"byte_end":23088,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"! functionality of the [`Rng`] trait, e.g. [`Rng::gen`], [`Rng::gen_range`] and","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":23089,"byte_end":23170,"line_start":14,"line_end":14,"column_start":1,"column_end":82}},{"value":"! of course [`Rng::sample`].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":23171,"byte_end":23201,"line_start":15,"line_end":15,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":23202,"byte_end":23205,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! Abstractly, a [probability distribution] describes the probability of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":23206,"byte_end":23279,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"! occurance of each value in its sample space.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":23280,"byte_end":23328,"line_start":18,"line_end":18,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":23329,"byte_end":23332,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! More concretely, an implementation of `Distribution<T>` for type `X` is an","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":23333,"byte_end":23411,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"! algorithm for choosing values from the sample space (a subset of `T`)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":23412,"byte_end":23485,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"! according to the distribution `X` represents, using an external source of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":23486,"byte_end":23563,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"! randomness (an RNG supplied to the `sample` function).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":23564,"byte_end":23622,"line_start":23,"line_end":23,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":23623,"byte_end":23626,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! A type `X` may implement `Distribution<T>` for multiple types `T`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":23627,"byte_end":23697,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"! Any type implementing [`Distribution`] is stateless (i.e. immutable),","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":23698,"byte_end":23771,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"! but it may have internal parameters set at construction time (for example,","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":23772,"byte_end":23850,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"! [`Uniform`] allows specification of its sample space as a range within `T`).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":23851,"byte_end":23931,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":23932,"byte_end":23935,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":23936,"byte_end":23939,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! # The `Standard` distribution","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":23940,"byte_end":23973,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":23974,"byte_end":23977,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! The [`Standard`] distribution is important to mention. This is the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":23978,"byte_end":24048,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"! distribution used by [`Rng::gen`] and represents the \"default\" way to","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":24049,"byte_end":24122,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"! produce a random value for many different types, including most primitive","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":24123,"byte_end":24200,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"! types, tuples, arrays, and a few derived types. See the documentation of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":24201,"byte_end":24277,"line_start":36,"line_end":36,"column_start":1,"column_end":77}},{"value":"! [`Standard`] for more details.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":24278,"byte_end":24312,"line_start":37,"line_end":37,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":24313,"byte_end":24316,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! Implementing `Distribution<T>` for [`Standard`] for user types `T` makes it","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":24317,"byte_end":24396,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"! possible to generate type `T` with [`Rng::gen`], and by extension also","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":24397,"byte_end":24471,"line_start":40,"line_end":40,"column_start":1,"column_end":75}},{"value":"! with the [`random`] function.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":24472,"byte_end":24505,"line_start":41,"line_end":41,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":24506,"byte_end":24509,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"! ## Random characters","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":24510,"byte_end":24534,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":24535,"byte_end":24538,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"! [`Alphanumeric`] is a simple distribution to sample random letters and","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":24539,"byte_end":24613,"line_start":45,"line_end":45,"column_start":1,"column_end":75}},{"value":"! numbers of the `char` type; in contrast [`Standard`] may sample any valid","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":24614,"byte_end":24691,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"! `char`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":24692,"byte_end":24703,"line_start":47,"line_end":47,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":24704,"byte_end":24707,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":24708,"byte_end":24711,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! # Uniform numeric ranges","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":24712,"byte_end":24740,"line_start":50,"line_end":50,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":24741,"byte_end":24744,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"! The [`Uniform`] distribution is more flexible than [`Standard`], but also","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":24745,"byte_end":24822,"line_start":52,"line_end":52,"column_start":1,"column_end":78}},{"value":"! more specialised: it supports fewer target types, but allows the sample","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":24823,"byte_end":24898,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"! space to be specified as an arbitrary range within its target type `T`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":24899,"byte_end":24974,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"! Both [`Standard`] and [`Uniform`] are in some sense uniform distributions.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":24975,"byte_end":25053,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":25054,"byte_end":25057,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"! Values may be sampled from this distribution using [`Rng::gen_range`] or","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":25058,"byte_end":25134,"line_start":57,"line_end":57,"column_start":1,"column_end":77}},{"value":"! by creating a distribution object with [`Uniform::new`],","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":25135,"byte_end":25195,"line_start":58,"line_end":58,"column_start":1,"column_end":61}},{"value":"! [`Uniform::new_inclusive`] or `From<Range>`. When the range limits are not","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":25196,"byte_end":25274,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"! known at compile time it is typically faster to reuse an existing","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":25275,"byte_end":25344,"line_start":60,"line_end":60,"column_start":1,"column_end":70}},{"value":"! distribution object than to call [`Rng::gen_range`].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":25345,"byte_end":25401,"line_start":61,"line_end":61,"column_start":1,"column_end":57}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":25402,"byte_end":25405,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"! User types `T` may also implement `Distribution<T>` for [`Uniform`],","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":25406,"byte_end":25478,"line_start":63,"line_end":63,"column_start":1,"column_end":73}},{"value":"! although this is less straightforward than for [`Standard`] (see the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":25479,"byte_end":25551,"line_start":64,"line_end":64,"column_start":1,"column_end":73}},{"value":"! documentation in the [`uniform`] module. Doing so enables generation of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":25552,"byte_end":25627,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"! values of type `T` with  [`Rng::gen_range`].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":25628,"byte_end":25676,"line_start":66,"line_end":66,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":25677,"byte_end":25680,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"! ## Open and half-open ranges","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":25681,"byte_end":25713,"line_start":68,"line_end":68,"column_start":1,"column_end":33}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":25714,"byte_end":25717,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"! There are surprisingly many ways to uniformly generate random floats. A","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":25718,"byte_end":25793,"line_start":70,"line_end":70,"column_start":1,"column_end":76}},{"value":"! range between 0 and 1 is standard, but the exact bounds (open vs closed)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":25794,"byte_end":25870,"line_start":71,"line_end":71,"column_start":1,"column_end":77}},{"value":"! and accuracy differ. In addition to the [`Standard`] distribution Rand offers","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":25871,"byte_end":25952,"line_start":72,"line_end":72,"column_start":1,"column_end":82}},{"value":"! [`Open01`] and [`OpenClosed01`]. See \"Floating point implementation\" section of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":25953,"byte_end":26036,"line_start":73,"line_end":73,"column_start":1,"column_end":84}},{"value":"! [`Standard`] documentation for more details.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26037,"byte_end":26085,"line_start":74,"line_end":74,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26086,"byte_end":26089,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"! # Non-uniform sampling","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26090,"byte_end":26116,"line_start":76,"line_end":76,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26117,"byte_end":26120,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"! Sampling a simple true/false outcome with a given probability has a name:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26121,"byte_end":26198,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"! the [`Bernoulli`] distribution (this is used by [`Rng::gen_bool`]).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26199,"byte_end":26270,"line_start":79,"line_end":79,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26271,"byte_end":26274,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"! For weighted sampling from a sequence of discrete values, use the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26275,"byte_end":26344,"line_start":81,"line_end":81,"column_start":1,"column_end":70}},{"value":"! [`weighted`] module.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26345,"byte_end":26369,"line_start":82,"line_end":82,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26370,"byte_end":26373,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"! This crate no longer includes other non-uniform distributions; instead","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26374,"byte_end":26448,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"! it is recommended that you use either [`rand_distr`] or [`statrs`].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26449,"byte_end":26520,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26521,"byte_end":26524,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26525,"byte_end":26528,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"! [probability distribution]: https://en.wikipedia.org/wiki/Probability_distribution","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26529,"byte_end":26615,"line_start":88,"line_end":88,"column_start":1,"column_end":87}},{"value":"! [`rand_distr`]: https://crates.io/crates/rand_distr","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26616,"byte_end":26671,"line_start":89,"line_end":89,"column_start":1,"column_end":56}},{"value":"! [`statrs`]: https://crates.io/crates/statrs","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26672,"byte_end":26719,"line_start":90,"line_end":90,"column_start":1,"column_end":48}},{"value":"! [`random`]: crate::random","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26721,"byte_end":26750,"line_start":92,"line_end":92,"column_start":1,"column_end":30}},{"value":"! [`rand_distr`]: https://crates.io/crates/rand_distr","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26751,"byte_end":26806,"line_start":93,"line_end":93,"column_start":1,"column_end":56}},{"value":"! [`statrs`]: https://crates.io/crates/statrs","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":26807,"byte_end":26854,"line_start":94,"line_end":94,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":933},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":38226,"byte_end":38235,"line_start":35,"line_end":35,"column_start":12,"column_end":21},"name":"Bernoulli","qualname":"::distributions::bernoulli::Bernoulli","value":"Bernoulli {  }","parent":null,"children":[{"krate":0,"index":934}],"decl_id":null,"docs":" The Bernoulli distribution.","sig":null,"attributes":[{"value":"/ The Bernoulli distribution.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":37648,"byte_end":37679,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":37680,"byte_end":37683,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This is a special case of the Binomial distribution where `n = 1`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":37684,"byte_end":37754,"line_start":17,"line_end":17,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":37755,"byte_end":37758,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":37759,"byte_end":37772,"line_start":19,"line_end":19,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":37773,"byte_end":37776,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":37777,"byte_end":37788,"line_start":21,"line_end":21,"column_start":1,"column_end":12}},{"value":"/ use rand::distributions::{Bernoulli, Distribution};","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":37789,"byte_end":37844,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":37845,"byte_end":37848,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ let d = Bernoulli::new(0.3).unwrap();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":37849,"byte_end":37890,"line_start":24,"line_end":24,"column_start":1,"column_end":42}},{"value":"/ let v = d.sample(&mut rand::thread_rng());","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":37891,"byte_end":37937,"line_start":25,"line_end":25,"column_start":1,"column_end":47}},{"value":"/ println!(\"{} is from a Bernoulli distribution\", v);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":37938,"byte_end":37993,"line_start":26,"line_end":26,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":37994,"byte_end":38001,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":38002,"byte_end":38005,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ # Precision","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":38006,"byte_end":38021,"line_start":29,"line_end":29,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":38022,"byte_end":38025,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This `Bernoulli` distribution uses 64 bits from the RNG (a `u64`),","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":38026,"byte_end":38096,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/ so only probabilities that are multiples of 2<sup>-64</sup> can be","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":38097,"byte_end":38167,"line_start":32,"line_end":32,"column_start":1,"column_end":71}},{"value":"/ represented.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":38168,"byte_end":38184,"line_start":33,"line_end":33,"column_start":1,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":941},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":39700,"byte_end":39718,"line_start":69,"line_end":69,"column_start":5,"column_end":23},"name":"InvalidProbability","qualname":"::distributions::bernoulli::BernoulliError::InvalidProbability","value":"BernoulliError::InvalidProbability","parent":{"krate":0,"index":940},"children":[],"decl_id":null,"docs":" `p < 0` or `p > 1`.\n","sig":null,"attributes":[{"value":"/ `p < 0` or `p > 1`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":39672,"byte_end":39695,"line_start":68,"line_end":68,"column_start":5,"column_end":28}}]},{"kind":"Enum","id":{"krate":0,"index":940},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":39651,"byte_end":39665,"line_start":67,"line_end":67,"column_start":10,"column_end":24},"name":"BernoulliError","qualname":"::distributions::bernoulli::BernoulliError","value":"BernoulliError::{InvalidProbability}","parent":null,"children":[{"krate":0,"index":941}],"decl_id":null,"docs":" Error type returned from `Bernoulli::new`.\n","sig":null,"attributes":[{"value":"/ Error type returned from `Bernoulli::new`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":39550,"byte_end":39596,"line_start":65,"line_end":65,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":40589,"byte_end":40592,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"new","qualname":"<Bernoulli>::new","value":"fn (p: f64) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the given probability of success `p`.","sig":null,"attributes":[{"value":"/ Construct a new `Bernoulli` with the given probability of success `p`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":40070,"byte_end":40144,"line_start":84,"line_end":84,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":40149,"byte_end":40152,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ # Precision","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":40157,"byte_end":40172,"line_start":86,"line_end":86,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":40177,"byte_end":40180,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ For `p = 1.0`, the resulting distribution will always generate true.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":40185,"byte_end":40257,"line_start":88,"line_end":88,"column_start":5,"column_end":77}},{"value":"/ For `p = 0.0`, the resulting distribution will always generate false.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":40262,"byte_end":40335,"line_start":89,"line_end":89,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":40340,"byte_end":40343,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ This method is accurate for any input `p` in the range `[0, 1]` which is","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":40348,"byte_end":40424,"line_start":91,"line_end":91,"column_start":5,"column_end":81}},{"value":"/ a multiple of 2<sup>-64</sup>. (Note that not all multiples of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":40429,"byte_end":40495,"line_start":92,"line_end":92,"column_start":5,"column_end":71}},{"value":"/ 2<sup>-64</sup> in `[0, 1]` can be represented as a `f64`.)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":40500,"byte_end":40563,"line_start":93,"line_end":93,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":40568,"byte_end":40577,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":41473,"byte_end":41483,"line_start":116,"line_end":116,"column_start":12,"column_end":22},"name":"from_ratio","qualname":"<Bernoulli>::from_ratio","value":"fn (numerator: u32, denominator: u32) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the probability of success of\n `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return\n a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","sig":null,"attributes":[{"value":"/ Construct a new `Bernoulli` with the probability of success of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":40931,"byte_end":40997,"line_start":107,"line_end":107,"column_start":5,"column_end":71}},{"value":"/ `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":41002,"byte_end":41070,"line_start":108,"line_end":108,"column_start":5,"column_end":73}},{"value":"/ a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":41075,"byte_end":41149,"line_start":109,"line_end":109,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":41154,"byte_end":41157,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ return `true`. If `numerator == 0` it will always return `false`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":41162,"byte_end":41231,"line_start":111,"line_end":111,"column_start":5,"column_end":74}},{"value":"/ For `numerator > denominator` and `denominator == 0`, this returns an","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":41236,"byte_end":41309,"line_start":112,"line_end":112,"column_start":5,"column_end":78}},{"value":"/ error. Otherwise, for `numerator == denominator`, samples are always","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":41314,"byte_end":41386,"line_start":113,"line_end":113,"column_start":5,"column_end":77}},{"value":"/ true; for `numerator == 0` samples are always false.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":41391,"byte_end":41447,"line_start":114,"line_end":114,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":41452,"byte_end":41461,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":954},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/binomial.rs","byte_start":44872,"byte_end":44880,"line_start":23,"line_end":23,"column_start":12,"column_end":20},"name":"Binomial","qualname":"::distributions::binomial::Binomial","value":"Binomial {  }","parent":null,"children":[{"krate":0,"index":955},{"krate":0,"index":956}],"decl_id":null,"docs":" The binomial distribution `Binomial(n, p)`.","sig":null,"attributes":[{"value":"/ The binomial distribution `Binomial(n, p)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/binomial.rs","byte_start":44610,"byte_end":44657,"line_start":17,"line_end":17,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/binomial.rs","byte_start":44658,"byte_end":44661,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This distribution has density function:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/binomial.rs","byte_start":44662,"byte_end":44705,"line_start":19,"line_end":19,"column_start":1,"column_end":44}},{"value":"/ `f(k) = n!/(k! (n-k)!) p^k (1-p)^(n-k)` for `k >= 0`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/binomial.rs","byte_start":44706,"byte_end":44763,"line_start":20,"line_end":20,"column_start":1,"column_end":58}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/binomial.rs","byte_start":44764,"byte_end":44830,"line_start":21,"line_end":21,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/binomial.rs","byte_start":45173,"byte_end":45176,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Binomial>::new","value":"fn (n: u64, p: f64) -> Binomial","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Binomial` with the given shape parameters `n` (number\n of trials) and `p` (probability of success).","sig":null,"attributes":[{"value":"/ Construct a new `Binomial` with the given shape parameters `n` (number","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/binomial.rs","byte_start":44988,"byte_end":45062,"line_start":31,"line_end":31,"column_start":5,"column_end":79}},{"value":"/ of trials) and `p` (probability of success).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/binomial.rs","byte_start":45067,"byte_end":45115,"line_start":32,"line_end":32,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/binomial.rs","byte_start":45120,"byte_end":45123,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ Panics if `p < 0` or `p > 1`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/binomial.rs","byte_start":45128,"byte_end":45161,"line_start":34,"line_end":34,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":962},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/cauchy.rs","byte_start":56272,"byte_end":56278,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"Cauchy","qualname":"::distributions::cauchy::Cauchy","value":"Cauchy {  }","parent":null,"children":[{"krate":0,"index":963},{"krate":0,"index":964}],"decl_id":null,"docs":" The Cauchy distribution `Cauchy(median, scale)`.","sig":null,"attributes":[{"value":"/ The Cauchy distribution `Cauchy(median, scale)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/cauchy.rs","byte_start":55998,"byte_end":56050,"line_start":18,"line_end":18,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/cauchy.rs","byte_start":56051,"byte_end":56054,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This distribution has a density function:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/cauchy.rs","byte_start":56055,"byte_end":56100,"line_start":20,"line_end":20,"column_start":1,"column_end":46}},{"value":"/ `f(x) = 1 / (pi * scale * (1 + ((x - median) / scale)^2))`","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/cauchy.rs","byte_start":56101,"byte_end":56163,"line_start":21,"line_end":21,"column_start":1,"column_end":63}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/cauchy.rs","byte_start":56164,"byte_end":56230,"line_start":22,"line_end":22,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/cauchy.rs","byte_start":56504,"byte_end":56507,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"new","qualname":"<Cauchy>::new","value":"fn (median: f64, scale: f64) -> Cauchy","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Cauchy` with the given shape parameters\n `median` the peak location and `scale` the scale factor.\n Panics if `scale <= 0`.\n","sig":null,"attributes":[{"value":"/ Construct a new `Cauchy` with the given shape parameters","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/cauchy.rs","byte_start":56335,"byte_end":56395,"line_start":30,"line_end":30,"column_start":5,"column_end":65}},{"value":"/ `median` the peak location and `scale` the scale factor.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/cauchy.rs","byte_start":56400,"byte_end":56460,"line_start":31,"line_end":31,"column_start":5,"column_end":65}},{"value":"/ Panics if `scale <= 0`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/cauchy.rs","byte_start":56465,"byte_end":56492,"line_start":32,"line_end":32,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":970},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":59520,"byte_end":59529,"line_start":25,"line_end":25,"column_start":12,"column_end":21},"name":"Dirichlet","qualname":"::distributions::dirichlet::Dirichlet","value":"Dirichlet {  }","parent":null,"children":[{"krate":0,"index":971}],"decl_id":null,"docs":" The dirichelet distribution `Dirichlet(alpha)`.","sig":null,"attributes":[{"value":"/ The dirichelet distribution `Dirichlet(alpha)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":59145,"byte_end":59196,"line_start":18,"line_end":18,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":59197,"byte_end":59200,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The Dirichlet distribution is a family of continuous multivariate","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":59201,"byte_end":59270,"line_start":20,"line_end":20,"column_start":1,"column_end":70}},{"value":"/ probability distributions parameterized by a vector alpha of positive reals.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":59271,"byte_end":59351,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/ It is a multivariate generalization of the beta distribution.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":59352,"byte_end":59417,"line_start":22,"line_end":22,"column_start":1,"column_end":66}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":59418,"byte_end":59484,"line_start":23,"line_end":23,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":59771,"byte_end":59774,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<Dirichlet>::new","value":"fn <V> (alpha: V) -> Dirichlet","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Dirichlet` with the given alpha parameter `alpha`.","sig":null,"attributes":[{"value":"/ Construct a new `Dirichlet` with the given alpha parameter `alpha`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":59618,"byte_end":59689,"line_start":31,"line_end":31,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":59694,"byte_end":59697,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":59702,"byte_end":59714,"line_start":33,"line_end":33,"column_start":5,"column_end":17}},{"value":"/ - if `alpha.len() < 2`","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":59719,"byte_end":59745,"line_start":34,"line_end":34,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":59750,"byte_end":59759,"line_start":35,"line_end":35,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":60180,"byte_end":60194,"line_start":52,"line_end":52,"column_start":12,"column_end":26},"name":"new_with_param","qualname":"<Dirichlet>::new_with_param","value":"fn (alpha: f64, size: usize) -> Dirichlet","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Dirichlet` with the given shape parameter `alpha` and `size`.","sig":null,"attributes":[{"value":"/ Construct a new `Dirichlet` with the given shape parameter `alpha` and `size`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":59995,"byte_end":60077,"line_start":46,"line_end":46,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":60082,"byte_end":60085,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":60090,"byte_end":60102,"line_start":48,"line_end":48,"column_start":5,"column_end":17}},{"value":"/ - if `alpha <= 0.0`","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":60107,"byte_end":60130,"line_start":49,"line_end":49,"column_start":5,"column_end":28}},{"value":"/ - if `size < 2`","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":60135,"byte_end":60154,"line_start":50,"line_end":50,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":60159,"byte_end":60168,"line_start":51,"line_end":51,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":976},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":63356,"byte_end":63360,"line_start":33,"line_end":33,"column_start":12,"column_end":16},"name":"Exp1","qualname":"::distributions::exponential::Exp1","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples floating-point numbers according to the exponential distribution,\n with rate parameter `λ = 1`. This is equivalent to `Exp::new(1.0)` or\n sampling with `-rng.gen::<f64>().ln()`, but faster.","sig":null,"attributes":[{"value":"/ Samples floating-point numbers according to the exponential distribution,","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":62575,"byte_end":62652,"line_start":17,"line_end":17,"column_start":1,"column_end":78}},{"value":"/ with rate parameter `λ = 1`. This is equivalent to `Exp::new(1.0)` or","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":62653,"byte_end":62727,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"/ sampling with `-rng.gen::<f64>().ln()`, but faster.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":62728,"byte_end":62783,"line_start":19,"line_end":19,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":62784,"byte_end":62787,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ See `Exp` for the general exponential distribution.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":62788,"byte_end":62843,"line_start":21,"line_end":21,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":62844,"byte_end":62847,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Implemented via the ZIGNOR variant[^1] of the Ziggurat method. The exact","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":62848,"byte_end":62924,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/ description in the paper was adjusted to use tables for the exponential","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":62925,"byte_end":63000,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/ distribution rather than normal.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":63001,"byte_end":63037,"line_start":25,"line_end":25,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":63038,"byte_end":63041,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ [^1]: Jurgen A. Doornik (2005). [*An Improved Ziggurat Method to","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":63042,"byte_end":63110,"line_start":27,"line_end":27,"column_start":1,"column_end":69}},{"value":"/       Generate Normal Random Samples*](","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":63111,"byte_end":63154,"line_start":28,"line_end":28,"column_start":1,"column_end":44}},{"value":"/       https://www.doornik.com/research/ziggurat.pdf).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":63155,"byte_end":63212,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/       Nuffield College, Oxford","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":63213,"byte_end":63247,"line_start":30,"line_end":30,"column_start":1,"column_end":35}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":63248,"byte_end":63314,"line_start":31,"line_end":31,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":983},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":64341,"byte_end":64344,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"Exp","qualname":"::distributions::exponential::Exp","value":"Exp {  }","parent":null,"children":[{"krate":0,"index":984}],"decl_id":null,"docs":" The exponential distribution `Exp(lambda)`.","sig":null,"attributes":[{"value":"/ The exponential distribution `Exp(lambda)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":63981,"byte_end":64028,"line_start":59,"line_end":59,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":64029,"byte_end":64032,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ This distribution has density function: `f(x) = lambda * exp(-lambda * x)`","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":64033,"byte_end":64111,"line_start":61,"line_end":61,"column_start":1,"column_end":79}},{"value":"/ for `x > 0`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":64112,"byte_end":64128,"line_start":62,"line_end":62,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":64129,"byte_end":64132,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ Note that [`Exp1`](crate::distributions::Exp1) is an optimised implementation for `lambda = 1`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":64133,"byte_end":64232,"line_start":64,"line_end":64,"column_start":1,"column_end":100}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":64233,"byte_end":64299,"line_start":65,"line_end":65,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":64586,"byte_end":64589,"line_start":76,"line_end":76,"column_start":12,"column_end":15},"name":"new","qualname":"<Exp>::new","value":"fn (lambda: f64) -> Exp","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Exp` with the given shape parameter\n `lambda`. Panics if `lambda <= 0`.\n","sig":null,"attributes":[{"value":"/ Construct a new `Exp` with the given shape parameter","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":64461,"byte_end":64517,"line_start":73,"line_end":73,"column_start":5,"column_end":61}},{"value":"/ `lambda`. Panics if `lambda <= 0`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":64522,"byte_end":64560,"line_start":74,"line_end":74,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":64565,"byte_end":64574,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":990},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":67002,"byte_end":67007,"line_start":42,"line_end":42,"column_start":12,"column_end":17},"name":"Gamma","qualname":"::distributions::gamma::Gamma","value":"Gamma {  }","parent":null,"children":[{"krate":0,"index":991}],"decl_id":null,"docs":" The Gamma distribution `Gamma(shape, scale)` distribution.","sig":null,"attributes":[{"value":"/ The Gamma distribution `Gamma(shape, scale)` distribution.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":66071,"byte_end":66133,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":66134,"byte_end":66137,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ The density function of this distribution is","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":66138,"byte_end":66186,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":66187,"byte_end":66190,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":66191,"byte_end":66202,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/ f(x) =  x^(k - 1) * exp(-x / θ) / (Γ(k) * θ^k)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":66203,"byte_end":66256,"line_start":25,"line_end":25,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":66257,"byte_end":66264,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":66265,"byte_end":66268,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ where `Γ` is the Gamma function, `k` is the shape and `θ` is the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":66269,"byte_end":66339,"line_start":28,"line_end":28,"column_start":1,"column_end":69}},{"value":"/ scale and both `k` and `θ` are strictly positive.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":66340,"byte_end":66394,"line_start":29,"line_end":29,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":66395,"byte_end":66398,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ The algorithm used is that described by Marsaglia & Tsang 2000[^1],","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":66399,"byte_end":66470,"line_start":31,"line_end":31,"column_start":1,"column_end":72}},{"value":"/ falling back to directly sampling from an Exponential for `shape","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":66471,"byte_end":66539,"line_start":32,"line_end":32,"column_start":1,"column_end":69}},{"value":"/ == 1`, and using the boosting technique described in that paper for","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":66540,"byte_end":66611,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/ `shape < 1`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":66612,"byte_end":66628,"line_start":34,"line_end":34,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":66629,"byte_end":66632,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ [^1]: George Marsaglia and Wai Wan Tsang. 2000. \"A Simple Method for","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":66633,"byte_end":66705,"line_start":36,"line_end":36,"column_start":1,"column_end":73}},{"value":"/       Generating Gamma Variables\" *ACM Trans. Math. Softw.* 26, 3","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":66706,"byte_end":66775,"line_start":37,"line_end":37,"column_start":1,"column_end":70}},{"value":"/       (September 2000), 363-372.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":66776,"byte_end":66812,"line_start":38,"line_end":38,"column_start":1,"column_end":37}},{"value":"/       DOI:[10.1145/358407.358414](https://doi.acm.org/10.1145/358407.358414)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":66813,"byte_end":66893,"line_start":39,"line_end":39,"column_start":1,"column_end":81}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":66894,"byte_end":66960,"line_start":40,"line_end":40,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":68295,"byte_end":68298,"line_start":90,"line_end":90,"column_start":12,"column_end":15},"name":"new","qualname":"<Gamma>::new","value":"fn (shape: f64, scale: f64) -> Gamma","parent":null,"children":[],"decl_id":null,"docs":" Construct an object representing the `Gamma(shape, scale)`\n distribution.","sig":null,"attributes":[{"value":"/ Construct an object representing the `Gamma(shape, scale)`","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":68129,"byte_end":68191,"line_start":85,"line_end":85,"column_start":5,"column_end":67}},{"value":"/ distribution.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":68196,"byte_end":68213,"line_start":86,"line_end":86,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":68218,"byte_end":68221,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ Panics if `shape <= 0` or `scale <= 0`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":68226,"byte_end":68269,"line_start":88,"line_end":88,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":68274,"byte_end":68283,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1029},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":70776,"byte_end":70786,"line_start":173,"line_end":173,"column_start":12,"column_end":22},"name":"ChiSquared","qualname":"::distributions::gamma::ChiSquared","value":"ChiSquared {  }","parent":null,"children":[{"krate":0,"index":1030}],"decl_id":null,"docs":" The chi-squared distribution `χ²(k)`, where `k` is the degrees of\n freedom.","sig":null,"attributes":[{"value":"/ The chi-squared distribution `χ²(k)`, where `k` is the degrees of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":70360,"byte_end":70431,"line_start":164,"line_end":164,"column_start":1,"column_end":70}},{"value":"/ freedom.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":70432,"byte_end":70444,"line_start":165,"line_end":165,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":70445,"byte_end":70448,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ For `k > 0` integral, this distribution is the sum of the squares","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":70449,"byte_end":70518,"line_start":167,"line_end":167,"column_start":1,"column_end":70}},{"value":"/ of `k` independent standard normal random variables. For other","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":70519,"byte_end":70585,"line_start":168,"line_end":168,"column_start":1,"column_end":67}},{"value":"/ `k`, this uses the equivalent characterisation","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":70586,"byte_end":70636,"line_start":169,"line_end":169,"column_start":1,"column_end":51}},{"value":"/ `χ²(k) = Gamma(k/2, 2)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":70637,"byte_end":70667,"line_start":170,"line_end":170,"column_start":1,"column_end":29}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":70668,"byte_end":70734,"line_start":171,"line_end":171,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":71252,"byte_end":71255,"line_start":189,"line_end":189,"column_start":12,"column_end":15},"name":"new","qualname":"<ChiSquared>::new","value":"fn (k: f64) -> ChiSquared","parent":null,"children":[],"decl_id":null,"docs":" Create a new chi-squared distribution with degrees-of-freedom\n `k`. Panics if `k < 0`.\n","sig":null,"attributes":[{"value":"/ Create a new chi-squared distribution with degrees-of-freedom","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":71143,"byte_end":71208,"line_start":187,"line_end":187,"column_start":5,"column_end":70}},{"value":"/ `k`. Panics if `k < 0`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":71213,"byte_end":71240,"line_start":188,"line_end":188,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":1047},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":72192,"byte_end":72199,"line_start":219,"line_end":219,"column_start":12,"column_end":19},"name":"FisherF","qualname":"::distributions::gamma::FisherF","value":"FisherF {  }","parent":null,"children":[{"krate":0,"index":1048},{"krate":0,"index":1049},{"krate":0,"index":1050}],"decl_id":null,"docs":" The Fisher F distribution `F(m, n)`.","sig":null,"attributes":[{"value":"/ The Fisher F distribution `F(m, n)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":71890,"byte_end":71930,"line_start":212,"line_end":212,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":71931,"byte_end":71934,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ This distribution is equivalent to the ratio of two normalised","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":71935,"byte_end":72001,"line_start":214,"line_end":214,"column_start":1,"column_end":67}},{"value":"/ chi-squared distributions, that is, `F(m,n) = (χ²(m)/m) /","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":72002,"byte_end":72065,"line_start":215,"line_end":215,"column_start":1,"column_end":62}},{"value":"/ (χ²(n)/n)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":72066,"byte_end":72083,"line_start":216,"line_end":216,"column_start":1,"column_end":16}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":72084,"byte_end":72150,"line_start":217,"line_end":217,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":72534,"byte_end":72537,"line_start":230,"line_end":230,"column_start":12,"column_end":15},"name":"new","qualname":"<FisherF>::new","value":"fn (m: f64, n: f64) -> FisherF","parent":null,"children":[],"decl_id":null,"docs":" Create a new `FisherF` distribution, with the given\n parameter. Panics if either `m` or `n` are not positive.\n","sig":null,"attributes":[{"value":"/ Create a new `FisherF` distribution, with the given","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":72402,"byte_end":72457,"line_start":228,"line_end":228,"column_start":5,"column_end":60}},{"value":"/ parameter. Panics if either `m` or `n` are not positive.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":72462,"byte_end":72522,"line_start":229,"line_end":229,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":1056},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":73206,"byte_end":73214,"line_start":251,"line_end":251,"column_start":12,"column_end":20},"name":"StudentT","qualname":"::distributions::gamma::StudentT","value":"StudentT {  }","parent":null,"children":[{"krate":0,"index":1057},{"krate":0,"index":1058}],"decl_id":null,"docs":" The Student t distribution, `t(nu)`, where `nu` is the degrees of\n freedom.\n","sig":null,"attributes":[{"value":"/ The Student t distribution, `t(nu)`, where `nu` is the degrees of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":73015,"byte_end":73084,"line_start":247,"line_end":247,"column_start":1,"column_end":70}},{"value":"/ freedom.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":73085,"byte_end":73097,"line_start":248,"line_end":248,"column_start":1,"column_end":13}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":73098,"byte_end":73164,"line_start":249,"line_end":249,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":73383,"byte_end":73386,"line_start":259,"line_end":259,"column_start":12,"column_end":15},"name":"new","qualname":"<StudentT>::new","value":"fn (n: f64) -> StudentT","parent":null,"children":[],"decl_id":null,"docs":" Create a new Student t distribution with `n` degrees of\n freedom. Panics if `n <= 0`.\n","sig":null,"attributes":[{"value":"/ Create a new Student t distribution with `n` degrees of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":73275,"byte_end":73334,"line_start":257,"line_end":257,"column_start":5,"column_end":64}},{"value":"/ freedom. Panics if `n <= 0`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":73339,"byte_end":73371,"line_start":258,"line_end":258,"column_start":5,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1064},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":73953,"byte_end":73957,"line_start":277,"line_end":277,"column_start":12,"column_end":16},"name":"Beta","qualname":"::distributions::gamma::Beta","value":"Beta {  }","parent":null,"children":[{"krate":0,"index":1065},{"krate":0,"index":1066}],"decl_id":null,"docs":" The Beta distribution with shape parameters `alpha` and `beta`.\n","sig":null,"attributes":[{"value":"/ The Beta distribution with shape parameters `alpha` and `beta`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":73777,"byte_end":73844,"line_start":274,"line_end":274,"column_start":1,"column_end":68}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":73845,"byte_end":73911,"line_start":275,"line_end":275,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":74169,"byte_end":74172,"line_start":287,"line_end":287,"column_start":12,"column_end":15},"name":"new","qualname":"<Beta>::new","value":"fn (alpha: f64, beta: f64) -> Beta","parent":null,"children":[],"decl_id":null,"docs":" Construct an object representing the `Beta(alpha, beta)`\n distribution.","sig":null,"attributes":[{"value":"/ Construct an object representing the `Beta(alpha, beta)`","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":74019,"byte_end":74079,"line_start":283,"line_end":283,"column_start":5,"column_end":65}},{"value":"/ distribution.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":74084,"byte_end":74101,"line_start":284,"line_end":284,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":74106,"byte_end":74109,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ Panics if `shape <= 0` or `scale <= 0`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":74114,"byte_end":74157,"line_start":286,"line_end":286,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1072},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":77351,"byte_end":77365,"line_start":31,"line_end":31,"column_start":12,"column_end":26},"name":"StandardNormal","qualname":"::distributions::normal::StandardNormal","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples floating-point numbers according to the normal distribution\n `N(0, 1)` (a.k.a. a standard normal, or Gaussian). This is equivalent to\n `Normal::new(0.0, 1.0)` but faster.","sig":null,"attributes":[{"value":"/ Samples floating-point numbers according to the normal distribution","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":76715,"byte_end":76786,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/ `N(0, 1)` (a.k.a. a standard normal, or Gaussian). This is equivalent to","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":76787,"byte_end":76863,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"/ `Normal::new(0.0, 1.0)` but faster.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":76864,"byte_end":76903,"line_start":19,"line_end":19,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":76904,"byte_end":76907,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ See `Normal` for the general normal distribution.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":76908,"byte_end":76961,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":76962,"byte_end":76965,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Implemented via the ZIGNOR variant[^1] of the Ziggurat method.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":76966,"byte_end":77032,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":77033,"byte_end":77036,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [^1]: Jurgen A. Doornik (2005). [*An Improved Ziggurat Method to","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":77037,"byte_end":77105,"line_start":25,"line_end":25,"column_start":1,"column_end":69}},{"value":"/       Generate Normal Random Samples*](","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":77106,"byte_end":77149,"line_start":26,"line_end":26,"column_start":1,"column_end":44}},{"value":"/       https://www.doornik.com/research/ziggurat.pdf).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":77150,"byte_end":77207,"line_start":27,"line_end":27,"column_start":1,"column_end":58}},{"value":"/       Nuffield College, Oxford","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":77208,"byte_end":77242,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":77243,"byte_end":77309,"line_start":29,"line_end":29,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1079},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":79069,"byte_end":79075,"line_start":87,"line_end":87,"column_start":12,"column_end":18},"name":"Normal","qualname":"::distributions::normal::Normal","value":"Normal {  }","parent":null,"children":[{"krate":0,"index":1080},{"krate":0,"index":1081}],"decl_id":null,"docs":" The normal distribution `N(mean, std_dev**2)`.","sig":null,"attributes":[{"value":"/ The normal distribution `N(mean, std_dev**2)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":78629,"byte_end":78679,"line_start":76,"line_end":76,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":78680,"byte_end":78683,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ This uses the ZIGNOR variant of the Ziggurat method, see [`StandardNormal`]","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":78684,"byte_end":78763,"line_start":78,"line_end":78,"column_start":1,"column_end":80}},{"value":"/ for more details.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":78764,"byte_end":78785,"line_start":79,"line_end":79,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":78786,"byte_end":78789,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ Note that [`StandardNormal`] is an optimised implementation for mean 0, and","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":78790,"byte_end":78869,"line_start":81,"line_end":81,"column_start":1,"column_end":80}},{"value":"/ standard deviation 1.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":78870,"byte_end":78895,"line_start":82,"line_end":82,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":78896,"byte_end":78899,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ [`StandardNormal`]: crate::distributions::StandardNormal","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":78900,"byte_end":78960,"line_start":84,"line_end":84,"column_start":1,"column_end":61}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":78961,"byte_end":79027,"line_start":85,"line_end":85,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":79317,"byte_end":79320,"line_start":100,"line_end":100,"column_start":12,"column_end":15},"name":"new","qualname":"<Normal>::new","value":"fn (mean: f64, std_dev: f64) -> Normal","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Normal` distribution with the given mean and\n standard deviation.","sig":null,"attributes":[{"value":"/ Construct a new `Normal` distribution with the given mean and","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":79132,"byte_end":79197,"line_start":93,"line_end":93,"column_start":5,"column_end":70}},{"value":"/ standard deviation.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":79202,"byte_end":79225,"line_start":94,"line_end":94,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":79230,"byte_end":79233,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":79238,"byte_end":79250,"line_start":96,"line_end":96,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":79255,"byte_end":79258,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ Panics if `std_dev < 0`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":79263,"byte_end":79291,"line_start":98,"line_end":98,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":79296,"byte_end":79305,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1087},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":79923,"byte_end":79932,"line_start":119,"line_end":119,"column_start":12,"column_end":21},"name":"LogNormal","qualname":"::distributions::normal::LogNormal","value":"LogNormal {  }","parent":null,"children":[{"krate":0,"index":1088}],"decl_id":null,"docs":" The log-normal distribution `ln N(mean, std_dev**2)`.","sig":null,"attributes":[{"value":"/ The log-normal distribution `ln N(mean, std_dev**2)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":79660,"byte_end":79717,"line_start":113,"line_end":113,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":79718,"byte_end":79721,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ If `X` is log-normal distributed, then `ln(X)` is `N(mean, std_dev**2)`","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":79722,"byte_end":79797,"line_start":115,"line_end":115,"column_start":1,"column_end":76}},{"value":"/ distributed.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":79798,"byte_end":79814,"line_start":116,"line_end":116,"column_start":1,"column_end":17}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":79815,"byte_end":79881,"line_start":117,"line_end":117,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":80165,"byte_end":80168,"line_start":131,"line_end":131,"column_start":12,"column_end":15},"name":"new","qualname":"<LogNormal>::new","value":"fn (mean: f64, std_dev: f64) -> LogNormal","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `LogNormal` distribution with the given mean\n and standard deviation.","sig":null,"attributes":[{"value":"/ Construct a new `LogNormal` distribution with the given mean","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":79977,"byte_end":80041,"line_start":124,"line_end":124,"column_start":5,"column_end":69}},{"value":"/ and standard deviation.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":80046,"byte_end":80073,"line_start":125,"line_end":125,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":80078,"byte_end":80081,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":80086,"byte_end":80098,"line_start":127,"line_end":127,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":80103,"byte_end":80106,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ Panics if `std_dev < 0`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":80111,"byte_end":80139,"line_start":129,"line_end":129,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":80144,"byte_end":80153,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1094},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/pareto.rs","byte_start":81916,"byte_end":81922,"line_start":18,"line_end":18,"column_start":12,"column_end":18},"name":"Pareto","qualname":"::distributions::pareto::Pareto","value":"Pareto {  }","parent":null,"children":[{"krate":0,"index":1095},{"krate":0,"index":1096}],"decl_id":null,"docs":" Samples floating-point numbers according to the Pareto distribution\n","sig":null,"attributes":[{"value":"/ Samples floating-point numbers according to the Pareto distribution","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/pareto.rs","byte_start":81736,"byte_end":81807,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/pareto.rs","byte_start":81808,"byte_end":81874,"line_start":16,"line_end":16,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/pareto.rs","byte_start":82293,"byte_end":82296,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<Pareto>::new","value":"fn (scale: f64, shape: f64) -> Pareto","parent":null,"children":[],"decl_id":null,"docs":" Construct a new Pareto distribution with given `scale` and `shape`.","sig":null,"attributes":[{"value":"/ Construct a new Pareto distribution with given `scale` and `shape`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/pareto.rs","byte_start":81986,"byte_end":82057,"line_start":24,"line_end":24,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/pareto.rs","byte_start":82062,"byte_end":82065,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ In the literature, `scale` is commonly written as x<sub>m</sub> or k and","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/pareto.rs","byte_start":82070,"byte_end":82146,"line_start":26,"line_end":26,"column_start":5,"column_end":81}},{"value":"/ `shape` is often written as α.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/pareto.rs","byte_start":82151,"byte_end":82186,"line_start":27,"line_end":27,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/pareto.rs","byte_start":82191,"byte_end":82194,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/pareto.rs","byte_start":82199,"byte_end":82211,"line_start":29,"line_end":29,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/pareto.rs","byte_start":82216,"byte_end":82219,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ `scale` and `shape` have to be non-zero and positive.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/pareto.rs","byte_start":82224,"byte_end":82281,"line_start":31,"line_end":31,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1102},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/poisson.rs","byte_start":83974,"byte_end":83981,"line_start":23,"line_end":23,"column_start":12,"column_end":19},"name":"Poisson","qualname":"::distributions::poisson::Poisson","value":"Poisson {  }","parent":null,"children":[{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1107}],"decl_id":null,"docs":" The Poisson distribution `Poisson(lambda)`.","sig":null,"attributes":[{"value":"/ The Poisson distribution `Poisson(lambda)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/poisson.rs","byte_start":83712,"byte_end":83759,"line_start":17,"line_end":17,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/poisson.rs","byte_start":83760,"byte_end":83763,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This distribution has a density function:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/poisson.rs","byte_start":83764,"byte_end":83809,"line_start":19,"line_end":19,"column_start":1,"column_end":46}},{"value":"/ `f(k) = lambda^k * exp(-lambda) / k!` for `k >= 0`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/poisson.rs","byte_start":83810,"byte_end":83865,"line_start":20,"line_end":20,"column_start":1,"column_end":56}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/poisson.rs","byte_start":83866,"byte_end":83932,"line_start":21,"line_end":21,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/poisson.rs","byte_start":84251,"byte_end":84254,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Poisson>::new","value":"fn (lambda: f64) -> Poisson","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Poisson` with the given shape parameter\n `lambda`. Panics if `lambda <= 0`.\n","sig":null,"attributes":[{"value":"/ Construct a new `Poisson` with the given shape parameter","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/poisson.rs","byte_start":84136,"byte_end":84196,"line_start":33,"line_end":33,"column_start":5,"column_end":65}},{"value":"/ `lambda`. Panics if `lambda <= 0`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/poisson.rs","byte_start":84201,"byte_end":84239,"line_start":34,"line_end":34,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1113},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/triangular.rs","byte_start":88858,"byte_end":88868,"line_start":18,"line_end":18,"column_start":12,"column_end":22},"name":"Triangular","qualname":"::distributions::triangular::Triangular","value":"Triangular {  }","parent":null,"children":[{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116}],"decl_id":null,"docs":" The triangular distribution.\n","sig":null,"attributes":[{"value":"/ The triangular distribution.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/triangular.rs","byte_start":88717,"byte_end":88749,"line_start":15,"line_end":15,"column_start":1,"column_end":33}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/triangular.rs","byte_start":88750,"byte_end":88816,"line_start":16,"line_end":16,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/triangular.rs","byte_start":89144,"byte_end":89147,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<Triangular>::new","value":"fn (min: f64, max: f64, mode: f64) -> Triangular","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Triangular` with minimum `min`, maximum `max` and mode\n `mode`.","sig":null,"attributes":[{"value":"/ Construct a new `Triangular` with minimum `min`, maximum `max` and mode","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/triangular.rs","byte_start":88939,"byte_end":89014,"line_start":25,"line_end":25,"column_start":5,"column_end":80}},{"value":"/ `mode`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/triangular.rs","byte_start":89019,"byte_end":89030,"line_start":26,"line_end":26,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/triangular.rs","byte_start":89035,"byte_end":89038,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/triangular.rs","byte_start":89043,"byte_end":89055,"line_start":28,"line_end":28,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/triangular.rs","byte_start":89060,"byte_end":89063,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ If `max < mode`, `mode < max` or `max == min`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/triangular.rs","byte_start":89068,"byte_end":89118,"line_start":30,"line_end":30,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/triangular.rs","byte_start":89123,"byte_end":89132,"line_start":31,"line_end":31,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":217},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"uniform","qualname":"::distributions::uniform","value":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","parent":null,"children":[{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":1122},{"krate":0,"index":1131},{"krate":0,"index":1129},{"krate":0,"index":1126},{"krate":0,"index":227},{"krate":0,"index":235},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":255},{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":264},{"krate":0,"index":267},{"krate":0,"index":1134},{"krate":0,"index":1144},{"krate":0,"index":1142},{"krate":0,"index":1139},{"krate":0,"index":271},{"krate":0,"index":1147},{"krate":0,"index":1149},{"krate":0,"index":1163},{"krate":0,"index":1165},{"krate":0,"index":1179},{"krate":0,"index":1181},{"krate":0,"index":1195},{"krate":0,"index":1197},{"krate":0,"index":1211},{"krate":0,"index":1213},{"krate":0,"index":1227},{"krate":0,"index":1229},{"krate":0,"index":1243},{"krate":0,"index":1245},{"krate":0,"index":1259},{"krate":0,"index":1261},{"krate":0,"index":1275},{"krate":0,"index":1277},{"krate":0,"index":1291},{"krate":0,"index":1293},{"krate":0,"index":1307},{"krate":0,"index":1309},{"krate":0,"index":1323},{"krate":0,"index":1325},{"krate":0,"index":1339},{"krate":0,"index":1348},{"krate":0,"index":1346},{"krate":0,"index":1343},{"krate":0,"index":272},{"krate":0,"index":1351},{"krate":0,"index":1353},{"krate":0,"index":1367},{"krate":0,"index":1369},{"krate":0,"index":1383},{"krate":0,"index":1389},{"krate":0,"index":1388},{"krate":0,"index":1386},{"krate":0,"index":1391},{"krate":0,"index":1404},{"krate":0,"index":1403},{"krate":0,"index":1401},{"krate":0,"index":273},{"krate":0,"index":275}],"decl_id":null,"docs":" A distribution uniformly sampling numbers within a given range.","sig":null,"attributes":[{"value":"! A distribution uniformly sampling numbers within a given range.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":90925,"byte_end":90992,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":90993,"byte_end":90996,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! [`Uniform`] is the standard distribution to sample uniformly from a range;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":90997,"byte_end":91075,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"! e.g. `Uniform::new_inclusive(1, 6)` can sample integers from 1 to 6, like a","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91076,"byte_end":91155,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"! standard die. [`Rng::gen_range`] supports any type supported by","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91156,"byte_end":91223,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"! [`Uniform`].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91224,"byte_end":91240,"line_start":15,"line_end":15,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91241,"byte_end":91244,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! This distribution is provided with support for several primitive types","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91245,"byte_end":91319,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"! (all integer and floating-point types) as well as [`std::time::Duration`],","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91320,"byte_end":91398,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"! and supports extension to user-defined types via a type-specific *back-end*","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91399,"byte_end":91478,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"! implementation.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91479,"byte_end":91498,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91499,"byte_end":91502,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! The types [`UniformInt`], [`UniformFloat`] and [`UniformDuration`] are the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91503,"byte_end":91581,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"! back-ends supporting sampling from primitive integer and floating-point","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91582,"byte_end":91657,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"! ranges as well as from [`std::time::Duration`]; these types do not normally","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91658,"byte_end":91737,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"! need to be used directly (unless implementing a derived back-end).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91738,"byte_end":91808,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91809,"byte_end":91812,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! # Example usage","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91813,"byte_end":91832,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91833,"byte_end":91836,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91837,"byte_end":91844,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"! use rand::{Rng, thread_rng};","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91845,"byte_end":91877,"line_start":30,"line_end":30,"column_start":1,"column_end":33}},{"value":"! use rand::distributions::Uniform;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91878,"byte_end":91915,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91916,"byte_end":91919,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! let mut rng = thread_rng();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91920,"byte_end":91951,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"! let side = Uniform::new(-10.0, 10.0);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91952,"byte_end":91993,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91994,"byte_end":91997,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"! // sample between 1 and 10 points","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":91998,"byte_end":92035,"line_start":36,"line_end":36,"column_start":1,"column_end":38}},{"value":"! for _ in 0..rng.gen_range(1, 11) {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":92036,"byte_end":92074,"line_start":37,"line_end":37,"column_start":1,"column_end":39}},{"value":"!     // sample a point from the square with sides -10 - 10 in two dimensions","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":92075,"byte_end":92154,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"!     let (x, y) = (rng.sample(side), rng.sample(side));","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":92155,"byte_end":92213,"line_start":39,"line_end":39,"column_start":1,"column_end":59}},{"value":"!     println!(\"Point: {}, {}\", x, y);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":92214,"byte_end":92254,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"! }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":92255,"byte_end":92260,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":92261,"byte_end":92268,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":92269,"byte_end":92272,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! # Extending `Uniform` to support a custom type","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":92273,"byte_end":92323,"line_start":44,"line_end":44,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":92324,"byte_end":92327,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"! To extend [`Uniform`] to support your own types, write a back-end which","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":92328,"byte_end":92403,"line_start":46,"line_end":46,"column_start":1,"column_end":76}},{"value":"! implements the [`UniformSampler`] trait, then implement the [`SampleUniform`]","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":92404,"byte_end":92485,"line_start":47,"line_end":47,"column_start":1,"column_end":82}},{"value":"! helper trait to \"register\" your back-end. See the `MyF32` example below.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":92486,"byte_end":92562,"line_start":48,"line_end":48,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":92563,"byte_end":92566,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! At a minimum, the back-end needs to store any parameters needed for sampling","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":92567,"byte_end":92647,"line_start":50,"line_end":50,"column_start":1,"column_end":81}},{"value":"! (e.g. the target range) and implement `new`, `new_inclusive` and `sample`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":92648,"byte_end":92726,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"! Those methods should include an assert to check the range is valid (i.e.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":92727,"byte_end":92803,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"! `low < high`). The example below merely wraps another back-end.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":92804,"byte_end":92871,"line_start":53,"line_end":53,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":92872,"byte_end":92875,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"! The `new`, `new_inclusive` and `sample_single` functions use arguments of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":92876,"byte_end":92953,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"! type SampleBorrow<X> in order to support passing in values by reference or","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":92954,"byte_end":93032,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"! by value. In the implementation of these functions, you can choose to","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93033,"byte_end":93106,"line_start":57,"line_end":57,"column_start":1,"column_end":74}},{"value":"! simply use the reference returned by [`SampleBorrow::borrow`], or you can choose","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93107,"byte_end":93191,"line_start":58,"line_end":58,"column_start":1,"column_end":85}},{"value":"! to copy or clone the value, whatever is appropriate for your type.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93192,"byte_end":93262,"line_start":59,"line_end":59,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93263,"byte_end":93266,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93267,"byte_end":93274,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"! use rand::prelude::*;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93275,"byte_end":93300,"line_start":62,"line_end":62,"column_start":1,"column_end":26}},{"value":"! use rand::distributions::uniform::{Uniform, SampleUniform,","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93301,"byte_end":93363,"line_start":63,"line_end":63,"column_start":1,"column_end":63}},{"value":"!         UniformSampler, UniformFloat, SampleBorrow};","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93364,"byte_end":93420,"line_start":64,"line_end":64,"column_start":1,"column_end":57}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93421,"byte_end":93424,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"! struct MyF32(f32);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93425,"byte_end":93447,"line_start":66,"line_end":66,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93448,"byte_end":93451,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"! #[derive(Clone, Copy, Debug)]","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93452,"byte_end":93485,"line_start":68,"line_end":68,"column_start":1,"column_end":34}},{"value":"! struct UniformMyF32(UniformFloat<f32>);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93486,"byte_end":93529,"line_start":69,"line_end":69,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93530,"byte_end":93533,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"! impl UniformSampler for UniformMyF32 {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93534,"byte_end":93576,"line_start":71,"line_end":71,"column_start":1,"column_end":43}},{"value":"!     type X = MyF32;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93577,"byte_end":93600,"line_start":72,"line_end":72,"column_start":1,"column_end":24}},{"value":"!     fn new<B1, B2>(low: B1, high: B2) -> Self","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93601,"byte_end":93650,"line_start":73,"line_end":73,"column_start":1,"column_end":50}},{"value":"!         where B1: SampleBorrow<Self::X> + Sized,","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93651,"byte_end":93703,"line_start":74,"line_end":74,"column_start":1,"column_end":53}},{"value":"!               B2: SampleBorrow<Self::X> + Sized","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93704,"byte_end":93755,"line_start":75,"line_end":75,"column_start":1,"column_end":52}},{"value":"!     {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93756,"byte_end":93765,"line_start":76,"line_end":76,"column_start":1,"column_end":10}},{"value":"!         UniformMyF32(UniformFloat::<f32>::new(low.borrow().0, high.borrow().0))","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93766,"byte_end":93849,"line_start":77,"line_end":77,"column_start":1,"column_end":84}},{"value":"!     }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93850,"byte_end":93859,"line_start":78,"line_end":78,"column_start":1,"column_end":10}},{"value":"!     fn new_inclusive<B1, B2>(low: B1, high: B2) -> Self","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93860,"byte_end":93919,"line_start":79,"line_end":79,"column_start":1,"column_end":60}},{"value":"!         where B1: SampleBorrow<Self::X> + Sized,","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93920,"byte_end":93972,"line_start":80,"line_end":80,"column_start":1,"column_end":53}},{"value":"!               B2: SampleBorrow<Self::X> + Sized","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":93973,"byte_end":94024,"line_start":81,"line_end":81,"column_start":1,"column_end":52}},{"value":"!     {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94025,"byte_end":94034,"line_start":82,"line_end":82,"column_start":1,"column_end":10}},{"value":"!         UniformSampler::new(low, high)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94035,"byte_end":94077,"line_start":83,"line_end":83,"column_start":1,"column_end":43}},{"value":"!     }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94078,"byte_end":94087,"line_start":84,"line_end":84,"column_start":1,"column_end":10}},{"value":"!     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Self::X {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94088,"byte_end":94155,"line_start":85,"line_end":85,"column_start":1,"column_end":68}},{"value":"!         MyF32(self.0.sample(rng))","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94156,"byte_end":94193,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"!     }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94194,"byte_end":94203,"line_start":87,"line_end":87,"column_start":1,"column_end":10}},{"value":"! }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94204,"byte_end":94209,"line_start":88,"line_end":88,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94210,"byte_end":94213,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"! impl SampleUniform for MyF32 {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94214,"byte_end":94248,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"!     type Sampler = UniformMyF32;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94249,"byte_end":94285,"line_start":91,"line_end":91,"column_start":1,"column_end":37}},{"value":"! }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94286,"byte_end":94291,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94292,"byte_end":94295,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"! let (low, high) = (MyF32(17.0f32), MyF32(22.0f32));","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94296,"byte_end":94351,"line_start":94,"line_end":94,"column_start":1,"column_end":56}},{"value":"! let uniform = Uniform::new(low, high);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94352,"byte_end":94394,"line_start":95,"line_end":95,"column_start":1,"column_end":43}},{"value":"! let x = uniform.sample(&mut thread_rng());","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94395,"byte_end":94441,"line_start":96,"line_end":96,"column_start":1,"column_end":47}},{"value":"! ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94442,"byte_end":94449,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94450,"byte_end":94453,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"! [`SampleUniform`]: crate::distributions::uniform::SampleUniform","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94454,"byte_end":94521,"line_start":99,"line_end":99,"column_start":1,"column_end":68}},{"value":"! [`UniformSampler`]: crate::distributions::uniform::UniformSampler","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94522,"byte_end":94591,"line_start":100,"line_end":100,"column_start":1,"column_end":70}},{"value":"! [`UniformInt`]: crate::distributions::uniform::UniformInt","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94592,"byte_end":94653,"line_start":101,"line_end":101,"column_start":1,"column_end":62}},{"value":"! [`UniformFloat`]: crate::distributions::uniform::UniformFloat","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94654,"byte_end":94719,"line_start":102,"line_end":102,"column_start":1,"column_end":66}},{"value":"! [`UniformDuration`]: crate::distributions::uniform::UniformDuration","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94720,"byte_end":94791,"line_start":103,"line_end":103,"column_start":1,"column_end":72}},{"value":"! [`SampleBorrow::borrow`]: crate::distributions::uniform::SampleBorrow::borrow","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":94792,"byte_end":94873,"line_start":104,"line_end":104,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":1122},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":97023,"byte_end":97030,"line_start":162,"line_end":162,"column_start":12,"column_end":19},"name":"Uniform","qualname":"::distributions::uniform::Uniform","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample values uniformly between two bounds.","sig":null,"attributes":[{"value":"/ Sample values uniformly between two bounds.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":95376,"byte_end":95423,"line_start":121,"line_end":121,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":95424,"byte_end":95427,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ [`Uniform::new`] and [`Uniform::new_inclusive`] construct a uniform","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":95428,"byte_end":95499,"line_start":123,"line_end":123,"column_start":1,"column_end":72}},{"value":"/ distribution sampling from the given range; these functions may do extra","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":95500,"byte_end":95576,"line_start":124,"line_end":124,"column_start":1,"column_end":77}},{"value":"/ work up front to make sampling of multiple values faster.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":95577,"byte_end":95638,"line_start":125,"line_end":125,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":95639,"byte_end":95642,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ When sampling from a constant range, many calculations can happen at","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":95643,"byte_end":95715,"line_start":127,"line_end":127,"column_start":1,"column_end":73}},{"value":"/ compile-time and all methods should be fast; for floating-point ranges and","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":95716,"byte_end":95794,"line_start":128,"line_end":128,"column_start":1,"column_end":79}},{"value":"/ the full range of integer types this should have comparable performance to","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":95795,"byte_end":95873,"line_start":129,"line_end":129,"column_start":1,"column_end":79}},{"value":"/ the `Standard` distribution.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":95874,"byte_end":95906,"line_start":130,"line_end":130,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":95907,"byte_end":95910,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ Steps are taken to avoid bias which might be present in naive","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":95911,"byte_end":95976,"line_start":132,"line_end":132,"column_start":1,"column_end":66}},{"value":"/ implementations; for example `rng.gen::<u8>() % 170` samples from the range","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":95977,"byte_end":96056,"line_start":133,"line_end":133,"column_start":1,"column_end":80}},{"value":"/ `[0, 169]` but is twice as likely to select numbers less than 85 than other","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96057,"byte_end":96136,"line_start":134,"line_end":134,"column_start":1,"column_end":80}},{"value":"/ values. Further, the implementations here give more weight to the high-bits","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96137,"byte_end":96216,"line_start":135,"line_end":135,"column_start":1,"column_end":80}},{"value":"/ generated by the RNG than the low bits, since with some RNGs the low-bits","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96217,"byte_end":96294,"line_start":136,"line_end":136,"column_start":1,"column_end":78}},{"value":"/ are of lower quality than the high bits.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96295,"byte_end":96339,"line_start":137,"line_end":137,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96340,"byte_end":96343,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ Implementations must sample in `[low, high)` range for","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96344,"byte_end":96402,"line_start":139,"line_end":139,"column_start":1,"column_end":59}},{"value":"/ `Uniform::new(low, high)`, i.e., excluding `high`. In particular care must","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96403,"byte_end":96481,"line_start":140,"line_end":140,"column_start":1,"column_end":79}},{"value":"/ be taken to ensure that rounding never results values `< low` or `>= high`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96482,"byte_end":96561,"line_start":141,"line_end":141,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96562,"byte_end":96565,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96566,"byte_end":96579,"line_start":143,"line_end":143,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96580,"byte_end":96583,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96584,"byte_end":96591,"line_start":145,"line_end":145,"column_start":1,"column_end":8}},{"value":"/ use rand::distributions::{Distribution, Uniform};","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96592,"byte_end":96645,"line_start":146,"line_end":146,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96646,"byte_end":96649,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96650,"byte_end":96665,"line_start":148,"line_end":148,"column_start":1,"column_end":16}},{"value":"/     let between = Uniform::from(10..10000);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96666,"byte_end":96713,"line_start":149,"line_end":149,"column_start":1,"column_end":48}},{"value":"/     let mut rng = rand::thread_rng();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96714,"byte_end":96755,"line_start":150,"line_end":150,"column_start":1,"column_end":42}},{"value":"/     let mut sum = 0;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96756,"byte_end":96780,"line_start":151,"line_end":151,"column_start":1,"column_end":25}},{"value":"/     for _ in 0..1000 {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96781,"byte_end":96807,"line_start":152,"line_end":152,"column_start":1,"column_end":27}},{"value":"/         sum += between.sample(&mut rng);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96808,"byte_end":96852,"line_start":153,"line_end":153,"column_start":1,"column_end":45}},{"value":"/     }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96853,"byte_end":96862,"line_start":154,"line_end":154,"column_start":1,"column_end":10}},{"value":"/     println!(\"{}\", sum);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96863,"byte_end":96891,"line_start":155,"line_end":155,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96892,"byte_end":96897,"line_start":156,"line_end":156,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96898,"byte_end":96905,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96906,"byte_end":96909,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ [`new`]: Uniform::new","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96910,"byte_end":96935,"line_start":159,"line_end":159,"column_start":1,"column_end":26}},{"value":"/ [`new_inclusive`]: Uniform::new_inclusive","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":96936,"byte_end":96981,"line_start":160,"line_end":160,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":97266,"byte_end":97269,"line_start":167,"line_end":167,"column_start":12,"column_end":15},"name":"new","qualname":"<Uniform<X>>::new","value":"fn <B1, B2> (low: B1, high: B2) -> Uniform<X>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the half\n open range `[low, high)` (excluding `high`). Panics if `low >= high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Uniform` instance which samples uniformly from the half","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":97103,"byte_end":97176,"line_start":165,"line_end":165,"column_start":5,"column_end":78}},{"value":"/ open range `[low, high)` (excluding `high`). Panics if `low >= high`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":97181,"byte_end":97254,"line_start":166,"line_end":166,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":97608,"byte_end":97621,"line_start":177,"line_end":177,"column_start":12,"column_end":25},"name":"new_inclusive","qualname":"<Uniform<X>>::new_inclusive","value":"fn <B1, B2> (low: B1, high: B2) -> Uniform<X>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the closed\n range `[low, high]` (inclusive). Panics if `low > high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Uniform` instance which samples uniformly from the closed","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":97456,"byte_end":97531,"line_start":175,"line_end":175,"column_start":5,"column_end":80}},{"value":"/ range `[low, high]` (inclusive). Panics if `low > high`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":97536,"byte_end":97596,"line_start":176,"line_end":176,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":239},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98267,"byte_end":98280,"line_start":199,"line_end":199,"column_start":11,"column_end":24},"name":"SampleUniform","qualname":"::distributions::uniform::SampleUniform","value":"SampleUniform: Sized","parent":null,"children":[{"krate":0,"index":240}],"decl_id":null,"docs":" Helper trait for creating objects using the correct implementation of\n [`UniformSampler`] for the sampling type.","sig":null,"attributes":[{"value":"/ Helper trait for creating objects using the correct implementation of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":97966,"byte_end":98039,"line_start":192,"line_end":192,"column_start":1,"column_end":74}},{"value":"/ [`UniformSampler`] for the sampling type.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98040,"byte_end":98085,"line_start":193,"line_end":193,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98086,"byte_end":98089,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ See the [module documentation] on how to implement [`Uniform`] range","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98090,"byte_end":98162,"line_start":195,"line_end":195,"column_start":1,"column_end":73}},{"value":"/ sampling for a custom type.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98163,"byte_end":98194,"line_start":196,"line_end":196,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98195,"byte_end":98198,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ [module documentation]: crate::distributions::uniform","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98199,"byte_end":98256,"line_start":198,"line_end":198,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":240},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98364,"byte_end":98371,"line_start":201,"line_end":201,"column_start":10,"column_end":17},"name":"Sampler","qualname":"::distributions::uniform::SampleUniform::Sampler","value":"type Sampler: UniformSampler<X = Self>;","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" The `UniformSampler` implementation supporting type `X`.\n","sig":null,"attributes":[{"value":"/ The `UniformSampler` implementation supporting type `X`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98294,"byte_end":98354,"line_start":200,"line_end":200,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":241},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98846,"byte_end":98860,"line_start":214,"line_end":214,"column_start":11,"column_end":25},"name":"UniformSampler","qualname":"::distributions::uniform::UniformSampler","value":"UniformSampler: Sized","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":246},{"krate":0,"index":249},{"krate":0,"index":251}],"decl_id":null,"docs":" Helper trait handling actual uniform sampling.","sig":null,"attributes":[{"value":"/ Helper trait handling actual uniform sampling.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98402,"byte_end":98452,"line_start":204,"line_end":204,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98453,"byte_end":98456,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ See the [module documentation] on how to implement [`Uniform`] range","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98457,"byte_end":98529,"line_start":206,"line_end":206,"column_start":1,"column_end":73}},{"value":"/ sampling for a custom type.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98530,"byte_end":98561,"line_start":207,"line_end":207,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98562,"byte_end":98565,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ Implementation of [`sample_single`] is optional, and is only useful when","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98566,"byte_end":98642,"line_start":209,"line_end":209,"column_start":1,"column_end":77}},{"value":"/ the implementation can be faster than `Self::new(low, high).sample(rng)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98643,"byte_end":98720,"line_start":210,"line_end":210,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98721,"byte_end":98724,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ [module documentation]: crate::distributions::uniform","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98725,"byte_end":98782,"line_start":212,"line_end":212,"column_start":1,"column_end":58}},{"value":"/ [`sample_single`]: UniformSampler::sample_single","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98783,"byte_end":98835,"line_start":213,"line_end":213,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":242},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98928,"byte_end":98929,"line_start":216,"line_end":216,"column_start":10,"column_end":11},"name":"X","qualname":"::distributions::uniform::UniformSampler::X","value":"type X;","parent":{"krate":0,"index":241},"children":[],"decl_id":null,"docs":" The type sampled by this implementation.\n","sig":null,"attributes":[{"value":"/ The type sampled by this implementation.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98874,"byte_end":98918,"line_start":215,"line_end":215,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":99192,"byte_end":99195,"line_start":223,"line_end":223,"column_start":8,"column_end":11},"name":"new","qualname":"::distributions::uniform::UniformSampler::new","value":"fn <B1, B2> (low: B1, high: B2) -> Self","parent":{"krate":0,"index":241},"children":[],"decl_id":null,"docs":" Construct self, with inclusive lower bound and exclusive upper bound\n `[low, high)`.","sig":null,"attributes":[{"value":"/ Construct self, with inclusive lower bound and exclusive upper bound","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98936,"byte_end":99008,"line_start":218,"line_end":218,"column_start":5,"column_end":77}},{"value":"/ `[low, high)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":99013,"byte_end":99031,"line_start":219,"line_end":219,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":99036,"byte_end":99039,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":99044,"byte_end":99107,"line_start":221,"line_end":221,"column_start":5,"column_end":68}},{"value":"/ `Uniform::new`, which asserts that `low < high` before calling this.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":99112,"byte_end":99184,"line_start":222,"line_end":222,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":99568,"byte_end":99581,"line_start":233,"line_end":233,"column_start":8,"column_end":21},"name":"new_inclusive","qualname":"::distributions::uniform::UniformSampler::new_inclusive","value":"fn <B1, B2> (low: B1, high: B2) -> Self","parent":{"krate":0,"index":241},"children":[],"decl_id":null,"docs":" Construct self, with inclusive bounds `[low, high]`.","sig":null,"attributes":[{"value":"/ Construct self, with inclusive bounds `[low, high]`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":99332,"byte_end":99388,"line_start":228,"line_end":228,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":99393,"byte_end":99396,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":99401,"byte_end":99464,"line_start":230,"line_end":230,"column_start":5,"column_end":68}},{"value":"/ `Uniform::new_inclusive`, which asserts that `low <= high` before","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":99469,"byte_end":99538,"line_start":231,"line_end":231,"column_start":5,"column_end":74}},{"value":"/ calling this.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":99543,"byte_end":99560,"line_start":232,"line_end":232,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":99745,"byte_end":99751,"line_start":239,"line_end":239,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::uniform::UniformSampler::sample","value":"fn <R> (&self, rng: &mut R) -> Self::X","parent":{"krate":0,"index":241},"children":[],"decl_id":null,"docs":" Sample a value.\n","sig":null,"attributes":[{"value":"/ Sample a value.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":99718,"byte_end":99737,"line_start":238,"line_end":238,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":100726,"byte_end":100739,"line_start":260,"line_end":260,"column_start":8,"column_end":21},"name":"sample_single","qualname":"::distributions::uniform::UniformSampler::sample_single","value":"fn <R, B1, B2> (low: B1, high: B2, rng: &mut R) -> Self::X","parent":{"krate":0,"index":241},"children":[],"decl_id":null,"docs":" Sample a single value uniformly from a range with inclusive lower bound\n and exclusive upper bound `[low, high)`.","sig":null,"attributes":[{"value":"/ Sample a single value uniformly from a range with inclusive lower bound","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":99806,"byte_end":99881,"line_start":241,"line_end":241,"column_start":5,"column_end":80}},{"value":"/ and exclusive upper bound `[low, high)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":99886,"byte_end":99930,"line_start":242,"line_end":242,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":99935,"byte_end":99938,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ By default this is implemented using","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":99943,"byte_end":99983,"line_start":244,"line_end":244,"column_start":5,"column_end":45}},{"value":"/ `UniformSampler::new(low, high).sample(rng)`. However, for some types","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":99988,"byte_end":100061,"line_start":245,"line_end":245,"column_start":5,"column_end":78}},{"value":"/ more optimal implementations for single usage may be provided via this","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":100066,"byte_end":100140,"line_start":246,"line_end":246,"column_start":5,"column_end":79}},{"value":"/ method (which is the case for integers and floats).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":100145,"byte_end":100200,"line_start":247,"line_end":247,"column_start":5,"column_end":60}},{"value":"/ Results may not be identical.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":100205,"byte_end":100238,"line_start":248,"line_end":248,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":100243,"byte_end":100246,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ Note that to use this method in a generic context, the type needs to be","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":100251,"byte_end":100326,"line_start":250,"line_end":250,"column_start":5,"column_end":80}},{"value":"/ retrieved via `SampleUniform::Sampler` as follows:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":100331,"byte_end":100385,"line_start":251,"line_end":251,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":100390,"byte_end":100397,"line_start":252,"line_end":252,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, distributions::uniform::{SampleUniform, UniformSampler}};","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":100402,"byte_end":100486,"line_start":253,"line_end":253,"column_start":5,"column_end":89}},{"value":"/ # #[allow(unused)]","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":100491,"byte_end":100513,"line_start":254,"line_end":254,"column_start":5,"column_end":27}},{"value":"/ fn sample_from_range<T: SampleUniform>(lb: T, ub: T) -> T {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":100518,"byte_end":100581,"line_start":255,"line_end":255,"column_start":5,"column_end":68}},{"value":"/     let mut rng = thread_rng();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":100586,"byte_end":100621,"line_start":256,"line_end":256,"column_start":5,"column_end":40}},{"value":"/     <T as SampleUniform>::Sampler::sample_single(lb, ub, &mut rng)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":100626,"byte_end":100696,"line_start":257,"line_end":257,"column_start":5,"column_end":75}},{"value":"/ }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":100701,"byte_end":100706,"line_start":258,"line_end":258,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":100711,"byte_end":100718,"line_start":259,"line_end":259,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":261},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":101581,"byte_end":101593,"line_start":287,"line_end":287,"column_start":11,"column_end":23},"name":"SampleBorrow","qualname":"::distributions::uniform::SampleBorrow","value":"SampleBorrow<Borrowed>","parent":null,"children":[{"krate":0,"index":263}],"decl_id":null,"docs":" Helper trait similar to [`Borrow`] but implemented\n only for SampleUniform and references to SampleUniform in\n order to resolve ambiguity issues.","sig":null,"attributes":[{"value":"/ Helper trait similar to [`Borrow`] but implemented","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":101375,"byte_end":101429,"line_start":282,"line_end":282,"column_start":1,"column_end":55}},{"value":"/ only for SampleUniform and references to SampleUniform in","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":101430,"byte_end":101491,"line_start":283,"line_end":283,"column_start":1,"column_end":62}},{"value":"/ order to resolve ambiguity issues.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":101492,"byte_end":101530,"line_start":284,"line_end":284,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":101531,"byte_end":101534,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ [`Borrow`]: std::borrow::Borrow","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":101535,"byte_end":101570,"line_start":286,"line_end":286,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":101747,"byte_end":101753,"line_start":291,"line_end":291,"column_start":8,"column_end":14},"name":"borrow","qualname":"::distributions::uniform::SampleBorrow::borrow","value":"fn (&self) -> &Borrowed","parent":{"krate":0,"index":261},"children":[],"decl_id":null,"docs":" Immutably borrows from an owned value. See [`Borrow::borrow`]","sig":null,"attributes":[{"value":"/ Immutably borrows from an owned value. See [`Borrow::borrow`]","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":101610,"byte_end":101675,"line_start":288,"line_end":288,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":101680,"byte_end":101683,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ [`Borrow::borrow`]: std::borrow::Borrow::borrow","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":101688,"byte_end":101739,"line_start":290,"line_end":290,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1134},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":104175,"byte_end":104185,"line_start":350,"line_end":350,"column_start":12,"column_end":22},"name":"UniformInt","qualname":"::distributions::uniform::UniformInt","value":"UniformInt {  }","parent":null,"children":[{"krate":0,"index":1136},{"krate":0,"index":1137},{"krate":0,"index":1138}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for integer types.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for integer types.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":102230,"byte_end":102297,"line_start":315,"line_end":315,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":102298,"byte_end":102301,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":102302,"byte_end":102381,"line_start":317,"line_end":317,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":102382,"byte_end":102439,"line_start":318,"line_end":318,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":102440,"byte_end":102443,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":102444,"byte_end":102470,"line_start":320,"line_end":320,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":102471,"byte_end":102474,"line_start":321,"line_end":321,"column_start":1,"column_end":4}},{"value":"/ For simplicity, we use the same generic struct `UniformInt<X>` for all","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":102475,"byte_end":102549,"line_start":322,"line_end":322,"column_start":1,"column_end":75}},{"value":"/ integer types `X`. This gives us only one field type, `X`; to store unsigned","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":102550,"byte_end":102630,"line_start":323,"line_end":323,"column_start":1,"column_end":81}},{"value":"/ values of this size, we take use the fact that these conversions are no-ops.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":102631,"byte_end":102711,"line_start":324,"line_end":324,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":102712,"byte_end":102715,"line_start":325,"line_end":325,"column_start":1,"column_end":4}},{"value":"/ For a closed range, the number of possible numbers we should generate is","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":102716,"byte_end":102792,"line_start":326,"line_end":326,"column_start":1,"column_end":77}},{"value":"/ `range = (high - low + 1)`. To avoid bias, we must ensure that the size of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":102793,"byte_end":102871,"line_start":327,"line_end":327,"column_start":1,"column_end":79}},{"value":"/ our sample space, `zone`, is a multiple of `range`; other values must be","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":102872,"byte_end":102948,"line_start":328,"line_end":328,"column_start":1,"column_end":77}},{"value":"/ rejected (by replacing with a new random sample).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":102949,"byte_end":103002,"line_start":329,"line_end":329,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":103003,"byte_end":103006,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ As a special case, we use `range = 0` to represent the full range of the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":103007,"byte_end":103083,"line_start":331,"line_end":331,"column_start":1,"column_end":77}},{"value":"/ result type (i.e. for `new_inclusive($ty::MIN, $ty::MAX)`).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":103084,"byte_end":103147,"line_start":332,"line_end":332,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":103148,"byte_end":103151,"line_start":333,"line_end":333,"column_start":1,"column_end":4}},{"value":"/ The optimum `zone` is the largest product of `range` which fits in our","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":103152,"byte_end":103226,"line_start":334,"line_end":334,"column_start":1,"column_end":75}},{"value":"/ (unsigned) target type. We calculate this by calculating how many numbers we","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":103227,"byte_end":103307,"line_start":335,"line_end":335,"column_start":1,"column_end":81}},{"value":"/ must reject: `reject = (MAX + 1) % range = (MAX - range + 1) % range`. Any (large)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":103308,"byte_end":103394,"line_start":336,"line_end":336,"column_start":1,"column_end":87}},{"value":"/ product of `range` will suffice, thus in `sample_single` we multiply by a","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":103395,"byte_end":103472,"line_start":337,"line_end":337,"column_start":1,"column_end":78}},{"value":"/ power of 2 via bit-shifting (faster but may cause more rejections).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":103473,"byte_end":103544,"line_start":338,"line_end":338,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":103545,"byte_end":103548,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ The smallest integer PRNGs generate is `u32`. For 8- and 16-bit outputs we","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":103549,"byte_end":103627,"line_start":340,"line_end":340,"column_start":1,"column_end":79}},{"value":"/ use `u32` for our `zone` and samples (because it's not slower and because","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":103628,"byte_end":103705,"line_start":341,"line_end":341,"column_start":1,"column_end":78}},{"value":"/ it reduces the chance of having to reject a sample). In this case we cannot","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":103706,"byte_end":103785,"line_start":342,"line_end":342,"column_start":1,"column_end":80}},{"value":"/ store `zone` in the target type since it is too large, however we know","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":103786,"byte_end":103860,"line_start":343,"line_end":343,"column_start":1,"column_end":75}},{"value":"/ `ints_to_reject < range <= $unsigned::MAX`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":103861,"byte_end":103908,"line_start":344,"line_end":344,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":103909,"byte_end":103912,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"/ An alternative to using a modulus is widening multiply: After a widening","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":103913,"byte_end":103989,"line_start":346,"line_end":346,"column_start":1,"column_end":77}},{"value":"/ multiply by `range`, the result is in the high word. Then comparing the low","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":103990,"byte_end":104069,"line_start":347,"line_end":347,"column_start":1,"column_end":80}},{"value":"/ word against `zone` makes sure our distribution is uniform.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":104070,"byte_end":104133,"line_start":348,"line_end":348,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1339},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":116067,"byte_end":116079,"line_start":647,"line_end":647,"column_start":12,"column_end":24},"name":"UniformFloat","qualname":"::distributions::uniform::UniformFloat","value":"UniformFloat {  }","parent":null,"children":[{"krate":0,"index":1341},{"krate":0,"index":1342}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for floating-point types.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for floating-point types.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":115141,"byte_end":115215,"line_start":627,"line_end":627,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":115216,"byte_end":115219,"line_start":628,"line_end":628,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":115220,"byte_end":115299,"line_start":629,"line_end":629,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":115300,"byte_end":115357,"line_start":630,"line_end":630,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":115358,"byte_end":115361,"line_start":631,"line_end":631,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":115362,"byte_end":115388,"line_start":632,"line_end":632,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":115389,"byte_end":115392,"line_start":633,"line_end":633,"column_start":1,"column_end":4}},{"value":"/ Instead of generating a float in the `[0, 1)` range using [`Standard`], the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":115393,"byte_end":115472,"line_start":634,"line_end":634,"column_start":1,"column_end":80}},{"value":"/ `UniformFloat` implementation converts the output of an PRNG itself. This","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":115473,"byte_end":115550,"line_start":635,"line_end":635,"column_start":1,"column_end":78}},{"value":"/ way one or two steps can be optimized out.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":115551,"byte_end":115597,"line_start":636,"line_end":636,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":115598,"byte_end":115601,"line_start":637,"line_end":637,"column_start":1,"column_end":4}},{"value":"/ The floats are first converted to a value in the `[1, 2)` interval using a","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":115602,"byte_end":115680,"line_start":638,"line_end":638,"column_start":1,"column_end":79}},{"value":"/ transmute-based method, and then mapped to the expected range with a","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":115681,"byte_end":115753,"line_start":639,"line_end":639,"column_start":1,"column_end":73}},{"value":"/ multiply and addition. Values produced this way have what equals 23 bits of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":115754,"byte_end":115833,"line_start":640,"line_end":640,"column_start":1,"column_end":80}},{"value":"/ random digits for an `f32`, and 52 for an `f64`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":115834,"byte_end":115886,"line_start":641,"line_end":641,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":115887,"byte_end":115890,"line_start":642,"line_end":642,"column_start":1,"column_end":4}},{"value":"/ [`new`]: UniformSampler::new","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":115891,"byte_end":115923,"line_start":643,"line_end":643,"column_start":1,"column_end":33}},{"value":"/ [`new_inclusive`]: UniformSampler::new_inclusive","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":115924,"byte_end":115976,"line_start":644,"line_end":644,"column_start":1,"column_end":53}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":115977,"byte_end":116025,"line_start":645,"line_end":645,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":1383},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":124143,"byte_end":124158,"line_start":840,"line_end":840,"column_start":12,"column_end":27},"name":"UniformDuration","qualname":"::distributions::uniform::UniformDuration","value":"UniformDuration {  }","parent":null,"children":[{"krate":0,"index":1384},{"krate":0,"index":1385}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for `Duration`.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for `Duration`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":123894,"byte_end":123958,"line_start":835,"line_end":835,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":123959,"byte_end":123962,"line_start":836,"line_end":836,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own types, this type","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":123963,"byte_end":124043,"line_start":837,"line_end":837,"column_start":1,"column_end":81}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":124044,"byte_end":124101,"line_start":838,"line_end":838,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1406},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_circle.rs","byte_start":144143,"byte_end":144153,"line_start":25,"line_end":25,"column_start":12,"column_end":22},"name":"UnitCircle","qualname":"::distributions::unit_circle::UnitCircle","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples uniformly from the edge of the unit circle in two dimensions.","sig":null,"attributes":[{"value":"/ Samples uniformly from the edge of the unit circle in two dimensions.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_circle.rs","byte_start":143637,"byte_end":143710,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_circle.rs","byte_start":143711,"byte_end":143714,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Implemented via a method by von Neumann[^1].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_circle.rs","byte_start":143715,"byte_end":143763,"line_start":17,"line_end":17,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_circle.rs","byte_start":143764,"byte_end":143767,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [^1]: von Neumann, J. (1951) [*Various Techniques Used in Connection with","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_circle.rs","byte_start":143768,"byte_end":143845,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/       Random Digits.*](https://mcnp.lanl.gov/pdf_files/nbs_vonneumann.pdf)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_circle.rs","byte_start":143846,"byte_end":143924,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/       NBS Appl. Math. Ser., No. 12. Washington, DC: U.S. Government Printing","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_circle.rs","byte_start":143925,"byte_end":144005,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/       Office, pp. 36-38.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_circle.rs","byte_start":144006,"byte_end":144034,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_circle.rs","byte_start":144035,"byte_end":144101,"line_start":23,"line_end":23,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_circle.rs","byte_start":144250,"byte_end":144253,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<UnitCircle>::new","value":"fn () -> UnitCircle","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `UnitCircle` distribution.\n","sig":null,"attributes":[{"value":"/ Construct a new `UnitCircle` distribution.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_circle.rs","byte_start":144178,"byte_end":144224,"line_start":28,"line_end":28,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_circle.rs","byte_start":144229,"byte_end":144238,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1413},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_sphere.rs","byte_start":147160,"byte_end":147177,"line_start":24,"line_end":24,"column_start":12,"column_end":29},"name":"UnitSphereSurface","qualname":"::distributions::unit_sphere::UnitSphereSurface","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples uniformly from the surface of the unit sphere in three dimensions.","sig":null,"attributes":[{"value":"/ Samples uniformly from the surface of the unit sphere in three dimensions.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_sphere.rs","byte_start":146729,"byte_end":146807,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_sphere.rs","byte_start":146808,"byte_end":146811,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Implemented via a method by Marsaglia[^1].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_sphere.rs","byte_start":146812,"byte_end":146858,"line_start":17,"line_end":17,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_sphere.rs","byte_start":146859,"byte_end":146862,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [^1]: Marsaglia, George (1972). [*Choosing a Point from the Surface of a","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_sphere.rs","byte_start":146863,"byte_end":146939,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/       Sphere.*](https://doi.org/10.1214/aoms/1177692644)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_sphere.rs","byte_start":146940,"byte_end":147000,"line_start":20,"line_end":20,"column_start":1,"column_end":61}},{"value":"/       Ann. Math. Statist. 43, no. 2, 645--646.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_sphere.rs","byte_start":147001,"byte_end":147051,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_sphere.rs","byte_start":147052,"byte_end":147118,"line_start":22,"line_end":22,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_sphere.rs","byte_start":147288,"byte_end":147291,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<UnitSphereSurface>::new","value":"fn () -> UnitSphereSurface","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `UnitSphereSurface` distribution.\n","sig":null,"attributes":[{"value":"/ Construct a new `UnitSphereSurface` distribution.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_sphere.rs","byte_start":147209,"byte_end":147262,"line_start":27,"line_end":27,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_sphere.rs","byte_start":147267,"byte_end":147276,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1420},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weibull.rs","byte_start":150069,"byte_end":150076,"line_start":18,"line_end":18,"column_start":12,"column_end":19},"name":"Weibull","qualname":"::distributions::weibull::Weibull","value":"Weibull {  }","parent":null,"children":[{"krate":0,"index":1421},{"krate":0,"index":1422}],"decl_id":null,"docs":" Samples floating-point numbers according to the Weibull distribution\n","sig":null,"attributes":[{"value":"/ Samples floating-point numbers according to the Weibull distribution","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weibull.rs","byte_start":149888,"byte_end":149960,"line_start":15,"line_end":15,"column_start":1,"column_end":73}},{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weibull.rs","byte_start":149961,"byte_end":150027,"line_start":16,"line_end":16,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weibull.rs","byte_start":150318,"byte_end":150321,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<Weibull>::new","value":"fn (scale: f64, shape: f64) -> Weibull","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Weibull` distribution with given `scale` and `shape`.","sig":null,"attributes":[{"value":"/ Construct a new `Weibull` distribution with given `scale` and `shape`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weibull.rs","byte_start":150137,"byte_end":150211,"line_start":24,"line_end":24,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weibull.rs","byte_start":150216,"byte_end":150219,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weibull.rs","byte_start":150224,"byte_end":150236,"line_start":26,"line_end":26,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weibull.rs","byte_start":150241,"byte_end":150244,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ `scale` and `shape` have to be non-zero and positive.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weibull.rs","byte_start":150249,"byte_end":150306,"line_start":28,"line_end":28,"column_start":5,"column_end":62}}]},{"kind":"Mod","id":{"krate":0,"index":320},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"weighted","qualname":"::distributions::weighted","value":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","parent":null,"children":[{"krate":0,"index":321},{"krate":0,"index":383},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":1486},{"krate":0,"index":1494},{"krate":0,"index":1491},{"krate":0,"index":391},{"krate":0,"index":399},{"krate":0,"index":1497},{"krate":0,"index":1515},{"krate":0,"index":1513},{"krate":0,"index":1512},{"krate":0,"index":1509},{"krate":0,"index":1510},{"krate":0,"index":1506},{"krate":0,"index":1507},{"krate":0,"index":405},{"krate":0,"index":406}],"decl_id":null,"docs":" Weighted index sampling","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":28734,"byte_end":28759,"line_start":158,"line_end":158,"column_start":1,"column_end":26}},{"value":"! Weighted index sampling","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":151522,"byte_end":151549,"line_start":9,"line_end":9,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":151550,"byte_end":151553,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! This module provides two implementations for sampling indices:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":151554,"byte_end":151620,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":151621,"byte_end":151624,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! *   [`WeightedIndex`] allows `O(log N)` sampling","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":151625,"byte_end":151677,"line_start":13,"line_end":13,"column_start":1,"column_end":53}},{"value":"! *   [`alias_method::WeightedIndex`] allows `O(1)` sampling, but with","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":151678,"byte_end":151750,"line_start":14,"line_end":14,"column_start":1,"column_end":73}},{"value":"!      much greater set-up cost","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":151751,"byte_end":151784,"line_start":15,"line_end":15,"column_start":1,"column_end":34}},{"value":"!      ","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":151785,"byte_end":151794,"line_start":16,"line_end":16,"column_start":1,"column_end":10}},{"value":"! [`alias_method::WeightedIndex`]: alias_method/struct.WeightedIndex.html","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":151795,"byte_end":151870,"line_start":17,"line_end":17,"column_start":1,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":321},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"alias_method","qualname":"::distributions::weighted::alias_method","value":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","parent":null,"children":[{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":338},{"krate":0,"index":344},{"krate":0,"index":362},{"krate":0,"index":366},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":382},{"krate":0,"index":1428},{"krate":0,"index":1433},{"krate":0,"index":1438},{"krate":0,"index":1442},{"krate":0,"index":1446},{"krate":0,"index":1450},{"krate":0,"index":1454},{"krate":0,"index":1458},{"krate":0,"index":1462},{"krate":0,"index":1466},{"krate":0,"index":1470},{"krate":0,"index":1474},{"krate":0,"index":1478},{"krate":0,"index":1482}],"decl_id":null,"docs":" This module contains an implementation of alias method for sampling random\n indices with probabilities proportional to a collection of weights.\n","sig":null,"attributes":[{"value":"! This module contains an implementation of alias method for sampling random","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":165785,"byte_end":165863,"line_start":1,"line_end":1,"column_start":1,"column_end":79}},{"value":"! indices with probabilities proportional to a collection of weights.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":165864,"byte_end":165935,"line_start":2,"line_end":2,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":338},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":168333,"byte_end":168346,"line_start":62,"line_end":62,"column_start":12,"column_end":25},"name":"WeightedIndex","qualname":"::distributions::weighted::alias_method::WeightedIndex","value":"WeightedIndex {  }","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343}],"decl_id":null,"docs":" A distribution using weighted sampling to pick a discretely selected item.","sig":null,"attributes":[{"value":"/ A distribution using weighted sampling to pick a discretely selected item.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":166331,"byte_end":166409,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":166410,"byte_end":166413,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Sampling a [`WeightedIndex<W>`] distribution returns the index of a randomly","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":166414,"byte_end":166494,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"/ selected element from the vector used to create the [`WeightedIndex<W>`].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":166495,"byte_end":166572,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ The chance of a given element being picked is proportional to the value of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":166573,"byte_end":166651,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ the element. The weights can have any type `W` for which a implementation of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":166652,"byte_end":166732,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ [`Weight`] exists.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":166733,"byte_end":166755,"line_start":21,"line_end":21,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":166756,"byte_end":166759,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Performance","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":166760,"byte_end":166777,"line_start":23,"line_end":23,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":166778,"byte_end":166781,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Given that `n` is the number of items in the vector used to create an","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":166782,"byte_end":166855,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"/ [`WeightedIndex<W>`], [`WeightedIndex<W>`] will require `O(n)` amount of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":166856,"byte_end":166932,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/ memory. More specifically it takes up some constant amount of memory plus","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":166933,"byte_end":167010,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/ the vector used to create it and a [`Vec<u32>`] with capacity `n`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167011,"byte_end":167081,"line_start":28,"line_end":28,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167082,"byte_end":167085,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Time complexity for the creation of a [`WeightedIndex<W>`] is `O(n)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167086,"byte_end":167159,"line_start":30,"line_end":30,"column_start":1,"column_end":74}},{"value":"/ Sampling is `O(1)`, it makes a call to [`Uniform<u32>::sample`] and a call","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167160,"byte_end":167238,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ to [`Uniform<W>::sample`].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167239,"byte_end":167269,"line_start":32,"line_end":32,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167270,"byte_end":167273,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167274,"byte_end":167287,"line_start":34,"line_end":34,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167288,"byte_end":167291,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167292,"byte_end":167299,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ use rand::distributions::weighted::alias_method::WeightedIndex;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167300,"byte_end":167367,"line_start":37,"line_end":37,"column_start":1,"column_end":68}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167368,"byte_end":167393,"line_start":38,"line_end":38,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167394,"byte_end":167397,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ let choices = vec!['a', 'b', 'c'];","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167398,"byte_end":167436,"line_start":40,"line_end":40,"column_start":1,"column_end":39}},{"value":"/ let weights = vec![2, 1, 1];","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167437,"byte_end":167469,"line_start":41,"line_end":41,"column_start":1,"column_end":33}},{"value":"/ let dist = WeightedIndex::new(weights).unwrap();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167470,"byte_end":167522,"line_start":42,"line_end":42,"column_start":1,"column_end":53}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167523,"byte_end":167554,"line_start":43,"line_end":43,"column_start":1,"column_end":32}},{"value":"/ for _ in 0..100 {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167555,"byte_end":167576,"line_start":44,"line_end":44,"column_start":1,"column_end":22}},{"value":"/     // 50% chance to print 'a', 25% chance to print 'b', 25% chance to print 'c'","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167577,"byte_end":167661,"line_start":45,"line_end":45,"column_start":1,"column_end":85}},{"value":"/     println!(\"{}\", choices[dist.sample(&mut rng)]);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167662,"byte_end":167717,"line_start":46,"line_end":46,"column_start":1,"column_end":56}},{"value":"/ }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167718,"byte_end":167723,"line_start":47,"line_end":47,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167724,"byte_end":167727,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ let items = [('a', 0), ('b', 3), ('c', 7)];","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167728,"byte_end":167775,"line_start":49,"line_end":49,"column_start":1,"column_end":48}},{"value":"/ let dist2 = WeightedIndex::new(items.iter().map(|item| item.1).collect()).unwrap();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167776,"byte_end":167863,"line_start":50,"line_end":50,"column_start":1,"column_end":88}},{"value":"/ for _ in 0..100 {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167864,"byte_end":167885,"line_start":51,"line_end":51,"column_start":1,"column_end":22}},{"value":"/     // 0% chance to print 'a', 30% chance to print 'b', 70% chance to print 'c'","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167886,"byte_end":167969,"line_start":52,"line_end":52,"column_start":1,"column_end":84}},{"value":"/     println!(\"{}\", items[dist2.sample(&mut rng)].0);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":167970,"byte_end":168026,"line_start":53,"line_end":53,"column_start":1,"column_end":57}},{"value":"/ }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":168027,"byte_end":168032,"line_start":54,"line_end":54,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":168033,"byte_end":168040,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":168041,"byte_end":168044,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ [`WeightedIndex<W>`]: crate::distributions::weighted::alias_method::WeightedIndex","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":168045,"byte_end":168130,"line_start":57,"line_end":57,"column_start":1,"column_end":86}},{"value":"/ [`Weight`]: crate::distributions::weighted::alias_method::Weight","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":168131,"byte_end":168199,"line_start":58,"line_end":58,"column_start":1,"column_end":69}},{"value":"/ [`Vec<u32>`]: Vec","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":168200,"byte_end":168221,"line_start":59,"line_end":59,"column_start":1,"column_end":22}},{"value":"/ [`Uniform<u32>::sample`]: Distribution::sample","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":168222,"byte_end":168272,"line_start":60,"line_end":60,"column_start":1,"column_end":51}},{"value":"/ [`Uniform<W>::sample`]: Distribution::sample","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":168273,"byte_end":168321,"line_start":61,"line_end":61,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":168829,"byte_end":168832,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"new","qualname":"<WeightedIndex<W>>::new","value":"fn (weights: Vec<W>) -> Result<Self, WeightedError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`WeightedIndex`].","sig":null,"attributes":[{"value":"/ Creates a new [`WeightedIndex`].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":168528,"byte_end":168564,"line_start":70,"line_end":70,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":168569,"byte_end":168572,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Returns an error if:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":168577,"byte_end":168601,"line_start":72,"line_end":72,"column_start":5,"column_end":29}},{"value":"/ - The vector is empty.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":168606,"byte_end":168632,"line_start":73,"line_end":73,"column_start":5,"column_end":31}},{"value":"/ - The vector is longer than `u32::MAX`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":168637,"byte_end":168680,"line_start":74,"line_end":74,"column_start":5,"column_end":48}},{"value":"/ - For any weight `w`: `w < 0` or `w > max` where `max = W::MAX /","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":168685,"byte_end":168753,"line_start":75,"line_end":75,"column_start":5,"column_end":73}},{"value":"/   weights.len()`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":168758,"byte_end":168779,"line_start":76,"line_end":76,"column_start":5,"column_end":26}},{"value":"/ - The sum of weights is zero.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":168784,"byte_end":168817,"line_start":77,"line_end":77,"column_start":5,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":372},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175377,"byte_end":175383,"line_start":268,"line_end":268,"column_start":11,"column_end":17},"name":"Weight","qualname":"::distributions::weighted::alias_method::Weight","value":"Weight: Sized + Copy + SampleUniform + PartialOrd + Add<Output = Self> + AddAssign +\nSub<Output = Self> + SubAssign + Mul<Output = Self> + MulAssign +\nDiv<Output = Self> + DivAssign + Sum","parent":null,"children":[{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376}],"decl_id":null,"docs":" Trait that must be implemented for weights, that are used with\n [`WeightedIndex`]. Currently no guarantees on the correctness of\n [`WeightedIndex`] are given for custom implementations of this trait.\n","sig":null,"attributes":[{"value":"/ Trait that must be implemented for weights, that are used with","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175157,"byte_end":175223,"line_start":265,"line_end":265,"column_start":1,"column_end":67}},{"value":"/ [`WeightedIndex`]. Currently no guarantees on the correctness of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175224,"byte_end":175292,"line_start":266,"line_end":266,"column_start":1,"column_end":69}},{"value":"/ [`WeightedIndex`] are given for custom implementations of this trait.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175293,"byte_end":175366,"line_start":267,"line_end":267,"column_start":1,"column_end":74}}]},{"kind":"Const","id":{"krate":0,"index":373},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175677,"byte_end":175680,"line_start":284,"line_end":284,"column_start":11,"column_end":14},"name":"MAX","qualname":"::distributions::weighted::alias_method::Weight::MAX","value":"Self","parent":{"krate":0,"index":372},"children":[],"decl_id":null,"docs":" Maximum number representable by `Self`.\n","sig":null,"attributes":[{"value":"/ Maximum number representable by `Self`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175623,"byte_end":175666,"line_start":283,"line_end":283,"column_start":5,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":374},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175742,"byte_end":175746,"line_start":287,"line_end":287,"column_start":11,"column_end":15},"name":"ZERO","qualname":"::distributions::weighted::alias_method::Weight::ZERO","value":"Self","parent":{"krate":0,"index":372},"children":[],"decl_id":null,"docs":" Element of `Self` equivalent to 0.\n","sig":null,"attributes":[{"value":"/ Element of `Self` equivalent to 0.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175693,"byte_end":175731,"line_start":286,"line_end":286,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175943,"byte_end":175961,"line_start":292,"line_end":292,"column_start":8,"column_end":26},"name":"try_from_u32_lossy","qualname":"::distributions::weighted::alias_method::Weight::try_from_u32_lossy","value":"fn (n: u32) -> Option<Self>","parent":{"krate":0,"index":372},"children":[],"decl_id":null,"docs":" Produce an instance of `Self` from a `u32` value, or return `None` if\n out of range. Loss of precision (where `Self` is a floating point type)\n is acceptable.\n","sig":null,"attributes":[{"value":"/ Produce an instance of `Self` from a `u32` value, or return `None` if","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175759,"byte_end":175832,"line_start":289,"line_end":289,"column_start":5,"column_end":78}},{"value":"/ out of range. Loss of precision (where `Self` is a floating point type)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175837,"byte_end":175912,"line_start":290,"line_end":290,"column_start":5,"column_end":80}},{"value":"/ is acceptable.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175917,"byte_end":175935,"line_start":291,"line_end":291,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":176038,"byte_end":176041,"line_start":295,"line_end":295,"column_start":8,"column_end":11},"name":"sum","qualname":"::distributions::weighted::alias_method::Weight::sum","value":"fn (values: &[Self]) -> Self","parent":{"krate":0,"index":372},"children":[],"decl_id":null,"docs":" Sums all values in slice `values`.\n","sig":null,"attributes":[{"value":"/ Sums all values in slice `values`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175992,"byte_end":176030,"line_start":294,"line_end":294,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1486},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":154541,"byte_end":154554,"line_start":85,"line_end":85,"column_start":12,"column_end":25},"name":"WeightedIndex","qualname":"::distributions::weighted::WeightedIndex","value":"WeightedIndex {  }","parent":null,"children":[{"krate":0,"index":1488},{"krate":0,"index":1489},{"krate":0,"index":1490}],"decl_id":null,"docs":" A distribution using weighted sampling to pick a discretely selected\n item.","sig":null,"attributes":[{"value":"/ A distribution using weighted sampling to pick a discretely selected","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":152213,"byte_end":152285,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"/ item.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":152286,"byte_end":152295,"line_start":31,"line_end":31,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":152296,"byte_end":152299,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Sampling a `WeightedIndex` distribution returns the index of a randomly","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":152300,"byte_end":152375,"line_start":33,"line_end":33,"column_start":1,"column_end":76}},{"value":"/ selected element from the iterator used when the `WeightedIndex` was","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":152376,"byte_end":152448,"line_start":34,"line_end":34,"column_start":1,"column_end":73}},{"value":"/ created. The chance of a given element being picked is proportional to the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":152449,"byte_end":152527,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ value of the element. The weights can use any type `X` for which an","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":152528,"byte_end":152599,"line_start":36,"line_end":36,"column_start":1,"column_end":72}},{"value":"/ implementation of [`Uniform<X>`] exists.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":152600,"byte_end":152644,"line_start":37,"line_end":37,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":152645,"byte_end":152648,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ # Performance","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":152649,"byte_end":152666,"line_start":39,"line_end":39,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":152667,"byte_end":152670,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ A `WeightedIndex<X>` contains a `Vec<X>` and a [`Uniform<X>`] and so its","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":152671,"byte_end":152747,"line_start":41,"line_end":41,"column_start":1,"column_end":77}},{"value":"/ size is the sum of the size of those objects, possibly plus some alignment.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":152748,"byte_end":152827,"line_start":42,"line_end":42,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":152828,"byte_end":152831,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Creating a `WeightedIndex<X>` will allocate enough space to hold `N - 1`","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":152832,"byte_end":152908,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ weights of type `X`, where `N` is the number of weights. However, since","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":152909,"byte_end":152984,"line_start":45,"line_end":45,"column_start":1,"column_end":76}},{"value":"/ `Vec` doesn't guarantee a particular growth strategy, additional memory","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":152985,"byte_end":153060,"line_start":46,"line_end":46,"column_start":1,"column_end":76}},{"value":"/ might be allocated but not used. Since the `WeightedIndex` object also","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153061,"byte_end":153135,"line_start":47,"line_end":47,"column_start":1,"column_end":75}},{"value":"/ contains, this might cause additional allocations, though for primitive","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153136,"byte_end":153211,"line_start":48,"line_end":48,"column_start":1,"column_end":76}},{"value":"/ types, ['Uniform<X>`] doesn't allocate any memory.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153212,"byte_end":153266,"line_start":49,"line_end":49,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153267,"byte_end":153270,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ Time complexity of sampling from `WeightedIndex` is `O(log N)` where","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153271,"byte_end":153343,"line_start":51,"line_end":51,"column_start":1,"column_end":73}},{"value":"/ `N` is the number of weights.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153344,"byte_end":153377,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153378,"byte_end":153381,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ Sampling from `WeightedIndex` will result in a single call to","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153382,"byte_end":153447,"line_start":54,"line_end":54,"column_start":1,"column_end":66}},{"value":"/ `Uniform<X>::sample` (method of the [`Distribution`] trait), which typically","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153448,"byte_end":153528,"line_start":55,"line_end":55,"column_start":1,"column_end":81}},{"value":"/ will request a single value from the underlying [`RngCore`], though the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153529,"byte_end":153604,"line_start":56,"line_end":56,"column_start":1,"column_end":76}},{"value":"/ exact number depends on the implementaiton of `Uniform<X>::sample`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153605,"byte_end":153676,"line_start":57,"line_end":57,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153677,"byte_end":153680,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153681,"byte_end":153694,"line_start":59,"line_end":59,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153695,"byte_end":153698,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153699,"byte_end":153706,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153707,"byte_end":153732,"line_start":62,"line_end":62,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::WeightedIndex;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153733,"byte_end":153776,"line_start":63,"line_end":63,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153777,"byte_end":153780,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ let choices = ['a', 'b', 'c'];","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153781,"byte_end":153815,"line_start":65,"line_end":65,"column_start":1,"column_end":35}},{"value":"/ let weights = [2,   1,   1];","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153816,"byte_end":153848,"line_start":66,"line_end":66,"column_start":1,"column_end":33}},{"value":"/ let dist = WeightedIndex::new(&weights).unwrap();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153849,"byte_end":153902,"line_start":67,"line_end":67,"column_start":1,"column_end":54}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153903,"byte_end":153934,"line_start":68,"line_end":68,"column_start":1,"column_end":32}},{"value":"/ for _ in 0..100 {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153935,"byte_end":153956,"line_start":69,"line_end":69,"column_start":1,"column_end":22}},{"value":"/     // 50% chance to print 'a', 25% chance to print 'b', 25% chance to print 'c'","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":153957,"byte_end":154041,"line_start":70,"line_end":70,"column_start":1,"column_end":85}},{"value":"/     println!(\"{}\", choices[dist.sample(&mut rng)]);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":154042,"byte_end":154097,"line_start":71,"line_end":71,"column_start":1,"column_end":56}},{"value":"/ }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":154098,"byte_end":154103,"line_start":72,"line_end":72,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":154104,"byte_end":154107,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ let items = [('a', 0), ('b', 3), ('c', 7)];","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":154108,"byte_end":154155,"line_start":74,"line_end":74,"column_start":1,"column_end":48}},{"value":"/ let dist2 = WeightedIndex::new(items.iter().map(|item| item.1)).unwrap();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":154156,"byte_end":154233,"line_start":75,"line_end":75,"column_start":1,"column_end":78}},{"value":"/ for _ in 0..100 {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":154234,"byte_end":154255,"line_start":76,"line_end":76,"column_start":1,"column_end":22}},{"value":"/     // 0% chance to print 'a', 30% chance to print 'b', 70% chance to print 'c'","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":154256,"byte_end":154339,"line_start":77,"line_end":77,"column_start":1,"column_end":84}},{"value":"/     println!(\"{}\", items[dist2.sample(&mut rng)].0);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":154340,"byte_end":154396,"line_start":78,"line_end":78,"column_start":1,"column_end":57}},{"value":"/ }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":154397,"byte_end":154402,"line_start":79,"line_end":79,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":154403,"byte_end":154410,"line_start":80,"line_end":80,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":154411,"byte_end":154414,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ [`Uniform<X>`]: crate::distributions::uniform::Uniform","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":154415,"byte_end":154473,"line_start":82,"line_end":82,"column_start":1,"column_end":59}},{"value":"/ [`RngCore`]: crate::RngCore","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":154474,"byte_end":154505,"line_start":83,"line_end":83,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":155128,"byte_end":155131,"line_start":100,"line_end":100,"column_start":12,"column_end":15},"name":"new","qualname":"<WeightedIndex<X>>::new","value":"fn <I> (weights: I) -> Result<WeightedIndex<X>, WeightedError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new a `WeightedIndex` [`Distribution`] using the values\n in `weights`. The weights can use any type `X` for which an\n implementation of [`Uniform<X>`] exists.","sig":null,"attributes":[{"value":"/ Creates a new a `WeightedIndex` [`Distribution`] using the values","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":154740,"byte_end":154809,"line_start":92,"line_end":92,"column_start":5,"column_end":74}},{"value":"/ in `weights`. The weights can use any type `X` for which an","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":154814,"byte_end":154877,"line_start":93,"line_end":93,"column_start":5,"column_end":68}},{"value":"/ implementation of [`Uniform<X>`] exists.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":154882,"byte_end":154926,"line_start":94,"line_end":94,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":154931,"byte_end":154934,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the iterator is empty, if any weight is `< 0`, or","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":154939,"byte_end":155012,"line_start":96,"line_end":96,"column_start":5,"column_end":78}},{"value":"/ if its total value is 0.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":155017,"byte_end":155045,"line_start":97,"line_end":97,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":155050,"byte_end":155053,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ [`Uniform<X>`]: crate::distributions::uniform::Uniform","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":155058,"byte_end":155116,"line_start":99,"line_end":99,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":156662,"byte_end":156676,"line_start":144,"line_end":144,"column_start":12,"column_end":26},"name":"update_weights","qualname":"<WeightedIndex<X>>::update_weights","value":"fn (&mut self, new_weights: &[(usize, &X)]) -> Result<(), WeightedError>","parent":null,"children":[],"decl_id":null,"docs":" Update a subset of weights, without changing the number of weights.","sig":null,"attributes":[{"value":"/ Update a subset of weights, without changing the number of weights.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":156239,"byte_end":156310,"line_start":135,"line_end":135,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":156315,"byte_end":156318,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ `new_weights` must be sorted by the index.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":156323,"byte_end":156369,"line_start":137,"line_end":137,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":156374,"byte_end":156377,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ Using this method instead of `new` might be more efficient if only a small number of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":156382,"byte_end":156470,"line_start":139,"line_end":139,"column_start":5,"column_end":93}},{"value":"/ weights is modified. No allocations are performed, unless the weight type `X` uses","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":156475,"byte_end":156561,"line_start":140,"line_end":140,"column_start":5,"column_end":91}},{"value":"/ allocation internally.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":156566,"byte_end":156592,"line_start":141,"line_end":141,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":156597,"byte_end":156600,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ In case of error, `self` is not modified.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":156605,"byte_end":156650,"line_start":143,"line_end":143,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1498},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":164953,"byte_end":164959,"line_start":388,"line_end":388,"column_start":5,"column_end":11},"name":"NoItem","qualname":"::distributions::weighted::WeightedError::NoItem","value":"WeightedError::NoItem","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":" The provided weight collection contains no items.\n","sig":null,"attributes":[{"value":"/ The provided weight collection contains no items.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":164895,"byte_end":164948,"line_start":387,"line_end":387,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1500},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":165074,"byte_end":165087,"line_start":392,"line_end":392,"column_start":5,"column_end":18},"name":"InvalidWeight","qualname":"::distributions::weighted::WeightedError::InvalidWeight","value":"WeightedError::InvalidWeight","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":" A weight is either less than zero, greater than the supported maximum or\n otherwise invalid.\n","sig":null,"attributes":[{"value":"/ A weight is either less than zero, greater than the supported maximum or","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":164966,"byte_end":165042,"line_start":390,"line_end":390,"column_start":5,"column_end":81}},{"value":"/ otherwise invalid.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":165047,"byte_end":165069,"line_start":391,"line_end":391,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1502},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":165156,"byte_end":165170,"line_start":395,"line_end":395,"column_start":5,"column_end":19},"name":"AllWeightsZero","qualname":"::distributions::weighted::WeightedError::AllWeightsZero","value":"WeightedError::AllWeightsZero","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":" All items in the provided weight collection are zero.\n","sig":null,"attributes":[{"value":"/ All items in the provided weight collection are zero.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":165094,"byte_end":165151,"line_start":394,"line_end":394,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1504},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":165248,"byte_end":165255,"line_start":398,"line_end":398,"column_start":5,"column_end":12},"name":"TooMany","qualname":"::distributions::weighted::WeightedError::TooMany","value":"WeightedError::TooMany","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":" Too many weights are provided (length greater than `u32::MAX`)\n","sig":null,"attributes":[{"value":"/ Too many weights are provided (length greater than `u32::MAX`)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":165177,"byte_end":165243,"line_start":397,"line_end":397,"column_start":5,"column_end":71}}]},{"kind":"Enum","id":{"krate":0,"index":1497},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":164875,"byte_end":164888,"line_start":386,"line_end":386,"column_start":10,"column_end":23},"name":"WeightedError","qualname":"::distributions::weighted::WeightedError","value":"WeightedError::{NoItem, InvalidWeight, AllWeightsZero, TooMany}","parent":null,"children":[{"krate":0,"index":1498},{"krate":0,"index":1500},{"krate":0,"index":1502},{"krate":0,"index":1504}],"decl_id":null,"docs":" Error type returned from `WeightedIndex::new`.\n","sig":null,"attributes":[{"value":"/ Error type returned from `WeightedIndex::new`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":164770,"byte_end":164820,"line_start":384,"line_end":384,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1517},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184537,"byte_end":184549,"line_start":42,"line_end":42,"column_start":12,"column_end":24},"name":"OpenClosed01","qualname":"::distributions::float::OpenClosed01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the half-open\n interval `(0, 1]`, i.e. including 1 but not 0.","sig":null,"attributes":[{"value":"/ A distribution to sample floating point numbers uniformly in the half-open","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":183584,"byte_end":183662,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/ interval `(0, 1]`, i.e. including 1 but not 0.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":183663,"byte_end":183713,"line_start":18,"line_end":18,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":183714,"byte_end":183717,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε/2`. For `f32`","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":183718,"byte_end":183792,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ the 24 most significant random bits of a `u32` are used and for `f64` the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":183793,"byte_end":183870,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ 53 most significant bits of a `u64` are used. The conversion uses the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":183871,"byte_end":183944,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/ multiplicative method.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":183945,"byte_end":183971,"line_start":23,"line_end":23,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":183972,"byte_end":183975,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ See also: [`Standard`] which samples from `[0, 1)`, [`Open01`]","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":183976,"byte_end":184042,"line_start":25,"line_end":25,"column_start":1,"column_end":67}},{"value":"/ which samples from `(0, 1)` and [`Uniform`] which samples from arbitrary","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184043,"byte_end":184119,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/ ranges.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184120,"byte_end":184131,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184132,"byte_end":184135,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184136,"byte_end":184149,"line_start":29,"line_end":29,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184150,"byte_end":184157,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184158,"byte_end":184190,"line_start":31,"line_end":31,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::OpenClosed01;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184191,"byte_end":184233,"line_start":32,"line_end":32,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184234,"byte_end":184237,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = thread_rng().sample(OpenClosed01);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184238,"byte_end":184291,"line_start":34,"line_end":34,"column_start":1,"column_end":54}},{"value":"/ println!(\"f32 from (0, 1): {}\", val);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184292,"byte_end":184333,"line_start":35,"line_end":35,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184334,"byte_end":184341,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184342,"byte_end":184345,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184346,"byte_end":184394,"line_start":38,"line_end":38,"column_start":1,"column_end":49}},{"value":"/ [`Open01`]: crate::distributions::Open01","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184395,"byte_end":184439,"line_start":39,"line_end":39,"column_start":1,"column_end":45}},{"value":"/ [`Uniform`]: crate::distributions::uniform::Uniform","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184440,"byte_end":184495,"line_start":40,"line_end":40,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1524},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185480,"byte_end":185486,"line_start":68,"line_end":68,"column_start":12,"column_end":18},"name":"Open01","qualname":"::distributions::float::Open01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the open\n interval `(0, 1)`, i.e. not including either endpoint.","sig":null,"attributes":[{"value":"/ A distribution to sample floating point numbers uniformly in the open","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184552,"byte_end":184625,"line_start":44,"line_end":44,"column_start":1,"column_end":74}},{"value":"/ interval `(0, 1)`, i.e. not including either endpoint.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184626,"byte_end":184684,"line_start":45,"line_end":45,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184685,"byte_end":184688,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε + ε/2`. For `f32`","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184689,"byte_end":184768,"line_start":47,"line_end":47,"column_start":1,"column_end":78}},{"value":"/ the 23 most significant random bits of an `u32` are used, for `f64` 52 from","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184769,"byte_end":184848,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ an `u64`. The conversion uses a transmute-based method.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184849,"byte_end":184908,"line_start":49,"line_end":49,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184909,"byte_end":184912,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ See also: [`Standard`] which samples from `[0, 1)`, [`OpenClosed01`]","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184913,"byte_end":184985,"line_start":51,"line_end":51,"column_start":1,"column_end":73}},{"value":"/ which samples from `(0, 1]` and [`Uniform`] which samples from arbitrary","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":184986,"byte_end":185062,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"/ ranges.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185063,"byte_end":185074,"line_start":53,"line_end":53,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185075,"byte_end":185078,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185079,"byte_end":185092,"line_start":55,"line_end":55,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185093,"byte_end":185100,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185101,"byte_end":185133,"line_start":57,"line_end":57,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Open01;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185134,"byte_end":185170,"line_start":58,"line_end":58,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185171,"byte_end":185174,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = thread_rng().sample(Open01);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185175,"byte_end":185222,"line_start":60,"line_end":60,"column_start":1,"column_end":48}},{"value":"/ println!(\"f32 from (0, 1): {}\", val);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185223,"byte_end":185264,"line_start":61,"line_end":61,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185265,"byte_end":185272,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185273,"byte_end":185276,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185277,"byte_end":185325,"line_start":64,"line_end":64,"column_start":1,"column_end":49}},{"value":"/ [`OpenClosed01`]: crate::distributions::OpenClosed01","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185326,"byte_end":185382,"line_start":65,"line_end":65,"column_start":1,"column_end":57}},{"value":"/ [`Uniform`]: crate::distributions::uniform::Uniform","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185383,"byte_end":185438,"line_start":66,"line_end":66,"column_start":1,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":415},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185596,"byte_end":185605,"line_start":73,"line_end":73,"column_start":11,"column_end":20},"name":"IntoFloat","qualname":"::distributions::float::IntoFloat","value":"IntoFloat","parent":null,"children":[{"krate":0,"index":416},{"krate":0,"index":417}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":416},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185617,"byte_end":185618,"line_start":74,"line_end":74,"column_start":10,"column_end":11},"name":"F","qualname":"::distributions::float::IntoFloat::F","value":"type F;","parent":{"krate":0,"index":415},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":186020,"byte_end":186044,"line_start":84,"line_end":84,"column_start":8,"column_end":32},"name":"into_float_with_exponent","qualname":"::distributions::float::IntoFloat::into_float_with_exponent","value":"fn (self, exponent: i32) -> Self::F","parent":{"krate":0,"index":415},"children":[],"decl_id":null,"docs":" Helper method to combine the fraction and a contant exponent into a\n float.","sig":null,"attributes":[{"value":"/ Helper method to combine the fraction and a contant exponent into a","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185625,"byte_end":185696,"line_start":76,"line_end":76,"column_start":5,"column_end":76}},{"value":"/ float.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185701,"byte_end":185711,"line_start":77,"line_end":77,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185716,"byte_end":185719,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ Only the least significant bits of `self` may be set, 23 for `f32` and","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185724,"byte_end":185798,"line_start":79,"line_end":79,"column_start":5,"column_end":79}},{"value":"/ 52 for `f64`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185803,"byte_end":185820,"line_start":80,"line_end":80,"column_start":5,"column_end":22}},{"value":"/ The resulting value will fall in a range that depends on the exponent.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185825,"byte_end":185899,"line_start":81,"line_end":81,"column_start":5,"column_end":79}},{"value":"/ As an example the range with exponent 0 will be","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185904,"byte_end":185955,"line_start":82,"line_end":82,"column_start":5,"column_end":56}},{"value":"/ [2<sup>0</sup>..2<sup>1</sup>), which is [1..2).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/float.rs","byte_start":185960,"byte_end":186012,"line_start":83,"line_end":83,"column_start":5,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":419},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":28813,"byte_end":28826,"line_start":162,"line_end":162,"column_start":9,"column_end":22},"name":"hidden_export","qualname":"::distributions::hidden_export","value":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","parent":null,"children":[{"krate":0,"index":420}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1593},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":205496,"byte_end":205508,"line_start":37,"line_end":37,"column_start":12,"column_end":24},"name":"Alphanumeric","qualname":"::distributions::other::Alphanumeric","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample a `char`, uniformly distributed over ASCII letters and numbers:\n a-z, A-Z and 0-9.","sig":null,"attributes":[{"value":"/ Sample a `char`, uniformly distributed over ASCII letters and numbers:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":205027,"byte_end":205101,"line_start":19,"line_end":19,"column_start":1,"column_end":75}},{"value":"/ a-z, A-Z and 0-9.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":205102,"byte_end":205123,"line_start":20,"line_end":20,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":205124,"byte_end":205127,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":205128,"byte_end":205141,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":205142,"byte_end":205145,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":205146,"byte_end":205153,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ use std::iter;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":205154,"byte_end":205172,"line_start":25,"line_end":25,"column_start":1,"column_end":19}},{"value":"/ use rand::{Rng, thread_rng};","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":205173,"byte_end":205205,"line_start":26,"line_end":26,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Alphanumeric;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":205206,"byte_end":205248,"line_start":27,"line_end":27,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":205249,"byte_end":205252,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":205253,"byte_end":205284,"line_start":29,"line_end":29,"column_start":1,"column_end":32}},{"value":"/ let chars: String = iter::repeat(())","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":205285,"byte_end":205325,"line_start":30,"line_end":30,"column_start":1,"column_end":41}},{"value":"/         .map(|()| rng.sample(Alphanumeric))","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":205326,"byte_end":205373,"line_start":31,"line_end":31,"column_start":1,"column_end":48}},{"value":"/         .take(7)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":205374,"byte_end":205394,"line_start":32,"line_end":32,"column_start":1,"column_end":21}},{"value":"/         .collect();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":205395,"byte_end":205418,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/ println!(\"Random chars: {}\", chars);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":205419,"byte_end":205459,"line_start":34,"line_end":34,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":205460,"byte_end":205467,"line_start":35,"line_end":35,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":491},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/utils.rs","byte_start":213931,"byte_end":213937,"line_start":17,"line_end":17,"column_start":10,"column_end":16},"name":"Output","qualname":"::distributions::utils::WideningMultiply::Output","value":"type Output;","parent":{"krate":0,"index":489},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":500},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/utils.rs","byte_start":221193,"byte_end":221197,"line_start":228,"line_end":228,"column_start":10,"column_end":14},"name":"Mask","qualname":"::distributions::utils::FloatSIMDUtils::Mask","value":"type Mask;","parent":{"krate":0,"index":496},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":505},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/utils.rs","byte_start":221712,"byte_end":221716,"line_start":240,"line_end":240,"column_start":10,"column_end":14},"name":"UInt","qualname":"::distributions::utils::FloatSIMDUtils::UInt","value":"type UInt;","parent":{"krate":0,"index":496},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":537},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":29992,"byte_end":30004,"line_start":188,"line_end":188,"column_start":11,"column_end":23},"name":"Distribution","qualname":"::distributions::Distribution","value":"Distribution<T>","parent":null,"children":[{"krate":0,"index":539},{"krate":0,"index":541}],"decl_id":null,"docs":" Types (distributions) that can be used to create a random instance of `T`.","sig":null,"attributes":[{"value":"/ Types (distributions) that can be used to create a random instance of `T`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":28971,"byte_end":29049,"line_start":170,"line_end":170,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":29050,"byte_end":29053,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ It is possible to sample from a distribution through both the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":29054,"byte_end":29119,"line_start":172,"line_end":172,"column_start":1,"column_end":66}},{"value":"/ `Distribution` and [`Rng`] traits, via `distr.sample(&mut rng)` and","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":29120,"byte_end":29191,"line_start":173,"line_end":173,"column_start":1,"column_end":72}},{"value":"/ `rng.sample(distr)`. They also both offer the [`sample_iter`] method, which","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":29192,"byte_end":29271,"line_start":174,"line_end":174,"column_start":1,"column_end":80}},{"value":"/ produces an iterator that samples from the distribution.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":29272,"byte_end":29332,"line_start":175,"line_end":175,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":29333,"byte_end":29336,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ All implementations are expected to be immutable; this has the significant","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":29337,"byte_end":29415,"line_start":177,"line_end":177,"column_start":1,"column_end":79}},{"value":"/ advantage of not needing to consider thread safety, and for most","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":29416,"byte_end":29484,"line_start":178,"line_end":178,"column_start":1,"column_end":69}},{"value":"/ distributions efficient state-less sampling algorithms are available.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":29485,"byte_end":29558,"line_start":179,"line_end":179,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":29559,"byte_end":29562,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ Implementations are typically expected to be portable with reproducible","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":29563,"byte_end":29638,"line_start":181,"line_end":181,"column_start":1,"column_end":76}},{"value":"/ results when used with a PRNG with fixed seed; see the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":29639,"byte_end":29697,"line_start":182,"line_end":182,"column_start":1,"column_end":59}},{"value":"/ [portability chapter](https://rust-random.github.io/book/portability.html)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":29698,"byte_end":29776,"line_start":183,"line_end":183,"column_start":1,"column_end":79}},{"value":"/ of The Rust Rand Book. In some cases this does not apply, e.g. the `usize`","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":29777,"byte_end":29855,"line_start":184,"line_end":184,"column_start":1,"column_end":79}},{"value":"/ type requires different sampling on 32-bit and 64-bit machines.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":29856,"byte_end":29923,"line_start":185,"line_end":185,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":29924,"byte_end":29927,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ [`sample_iter`]: Distribution::method.sample_iter","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":29928,"byte_end":29981,"line_start":187,"line_end":187,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30098,"byte_end":30104,"line_start":190,"line_end":190,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::Distribution::sample","value":"fn <R> (&self, rng: &mut R) -> T","parent":{"krate":0,"index":537},"children":[],"decl_id":null,"docs":" Generate a random value of `T`, using `rng` as the source of randomness.\n","sig":null,"attributes":[{"value":"/ Generate a random value of `T`, using `rng` as the source of randomness.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30014,"byte_end":30090,"line_start":189,"line_end":189,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":31311,"byte_end":31322,"line_start":222,"line_end":222,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::distributions::Distribution::sample_iter","value":"fn <R> (self, rng: R) -> DistIter<Self, R, T>","parent":{"krate":0,"index":537},"children":[],"decl_id":null,"docs":" Create an iterator that generates random values of `T`, using `rng` as\n the source of randomness.","sig":null,"attributes":[{"value":"/ Create an iterator that generates random values of `T`, using `rng` as","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30153,"byte_end":30227,"line_start":192,"line_end":192,"column_start":5,"column_end":79}},{"value":"/ the source of randomness.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30232,"byte_end":30261,"line_start":193,"line_end":193,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30266,"byte_end":30269,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ Note that this function takes `self` by value. This works since","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30274,"byte_end":30341,"line_start":195,"line_end":195,"column_start":5,"column_end":72}},{"value":"/ `Distribution<T>` is impl'd for `&D` where `D: Distribution<T>`,","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30346,"byte_end":30414,"line_start":196,"line_end":196,"column_start":5,"column_end":73}},{"value":"/ however borrowing is not automatic hence `distr.sample_iter(...)` may","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30419,"byte_end":30492,"line_start":197,"line_end":197,"column_start":5,"column_end":78}},{"value":"/ need to be replaced with `(&distr).sample_iter(...)` to borrow or","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30497,"byte_end":30566,"line_start":198,"line_end":198,"column_start":5,"column_end":74}},{"value":"/ `(&*distr).sample_iter(...)` to reborrow an existing reference.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30571,"byte_end":30638,"line_start":199,"line_end":199,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30643,"byte_end":30646,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30651,"byte_end":30664,"line_start":201,"line_end":201,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30669,"byte_end":30672,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30677,"byte_end":30684,"line_start":203,"line_end":203,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30689,"byte_end":30714,"line_start":204,"line_end":204,"column_start":5,"column_end":30}},{"value":"/ use rand::distributions::{Distribution, Alphanumeric, Uniform, Standard};","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30719,"byte_end":30796,"line_start":205,"line_end":205,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30801,"byte_end":30804,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ let rng = thread_rng();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30809,"byte_end":30836,"line_start":207,"line_end":207,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30841,"byte_end":30844,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ // Vec of 16 x f32:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30849,"byte_end":30872,"line_start":209,"line_end":209,"column_start":5,"column_end":28}},{"value":"/ let v: Vec<f32> = Standard.sample_iter(rng).take(16).collect();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30877,"byte_end":30944,"line_start":210,"line_end":210,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30949,"byte_end":30952,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ // String:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30957,"byte_end":30971,"line_start":212,"line_end":212,"column_start":5,"column_end":19}},{"value":"/ let s: String = Alphanumeric.sample_iter(rng).take(7).collect();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":30976,"byte_end":31044,"line_start":213,"line_end":213,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":31049,"byte_end":31052,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ // Dice-rolling:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":31057,"byte_end":31077,"line_start":215,"line_end":215,"column_start":5,"column_end":25}},{"value":"/ let die_range = Uniform::new_inclusive(1, 6);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":31082,"byte_end":31131,"line_start":216,"line_end":216,"column_start":5,"column_end":54}},{"value":"/ let mut roll_die = die_range.sample_iter(rng);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":31136,"byte_end":31186,"line_start":217,"line_end":217,"column_start":5,"column_end":55}},{"value":"/ while roll_die.next().unwrap() != 6 {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":31191,"byte_end":31232,"line_start":218,"line_end":218,"column_start":5,"column_end":46}},{"value":"/     println!(\"Not a 6; rolling again!\");","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":31237,"byte_end":31281,"line_start":219,"line_end":219,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":31286,"byte_end":31291,"line_start":220,"line_end":220,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":31296,"byte_end":31303,"line_start":221,"line_end":221,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1968},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":32020,"byte_end":32028,"line_start":250,"line_end":250,"column_start":12,"column_end":20},"name":"DistIter","qualname":"::distributions::DistIter","value":"DistIter {  }","parent":null,"children":[{"krate":0,"index":1972},{"krate":0,"index":1973},{"krate":0,"index":1974}],"decl_id":null,"docs":" An iterator that generates random values of `T` with distribution `D`,\n using `R` as the source of randomness.","sig":null,"attributes":[{"value":"/ An iterator that generates random values of `T` with distribution `D`,","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":31703,"byte_end":31777,"line_start":242,"line_end":242,"column_start":1,"column_end":75}},{"value":"/ using `R` as the source of randomness.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":31778,"byte_end":31820,"line_start":243,"line_end":243,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":31821,"byte_end":31824,"line_start":244,"line_end":244,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`sample_iter`] method on [`Distribution`].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":31825,"byte_end":31904,"line_start":245,"line_end":245,"column_start":1,"column_end":80}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":31905,"byte_end":31940,"line_start":246,"line_end":246,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":31941,"byte_end":31944,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ [`sample_iter`]: Distribution::sample_iter","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":31945,"byte_end":31991,"line_start":248,"line_end":248,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1980},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":36193,"byte_end":36201,"line_start":370,"line_end":370,"column_start":12,"column_end":20},"name":"Standard","qualname":"::distributions::Standard","value":"","parent":null,"children":[],"decl_id":null,"docs":" A generic random value distribution, implemented for many primitive types.\n Usually generates values with a numerically uniform distribution, and with a\n range appropriate to the type.","sig":null,"attributes":[{"value":"/ A generic random value distribution, implemented for many primitive types.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":32912,"byte_end":32990,"line_start":292,"line_end":292,"column_start":1,"column_end":79}},{"value":"/ Usually generates values with a numerically uniform distribution, and with a","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":32991,"byte_end":33071,"line_start":293,"line_end":293,"column_start":1,"column_end":81}},{"value":"/ range appropriate to the type.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":33072,"byte_end":33106,"line_start":294,"line_end":294,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":33107,"byte_end":33110,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ ## Provided implementations","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":33111,"byte_end":33142,"line_start":296,"line_end":296,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":33143,"byte_end":33146,"line_start":297,"line_end":297,"column_start":1,"column_end":4}},{"value":"/ Assuming the provided `Rng` is well-behaved, these implementations","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":33147,"byte_end":33217,"line_start":298,"line_end":298,"column_start":1,"column_end":71}},{"value":"/ generate values with the following ranges and distributions:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":33218,"byte_end":33282,"line_start":299,"line_end":299,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":33283,"byte_end":33286,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ * Integers (`i32`, `u32`, `isize`, `usize`, etc.): Uniformly distributed","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":33287,"byte_end":33363,"line_start":301,"line_end":301,"column_start":1,"column_end":77}},{"value":"/   over all values of the type.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":33364,"byte_end":33398,"line_start":302,"line_end":302,"column_start":1,"column_end":35}},{"value":"/ * `char`: Uniformly distributed over all Unicode scalar values, i.e. all","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":33399,"byte_end":33475,"line_start":303,"line_end":303,"column_start":1,"column_end":77}},{"value":"/   code points in the range `0...0x10_FFFF`, except for the range","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":33476,"byte_end":33544,"line_start":304,"line_end":304,"column_start":1,"column_end":69}},{"value":"/   `0xD800...0xDFFF` (the surrogate code points). This includes","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":33545,"byte_end":33611,"line_start":305,"line_end":305,"column_start":1,"column_end":67}},{"value":"/   unassigned/reserved code points.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":33612,"byte_end":33650,"line_start":306,"line_end":306,"column_start":1,"column_end":39}},{"value":"/ * `bool`: Generates `false` or `true`, each with probability 0.5.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":33651,"byte_end":33720,"line_start":307,"line_end":307,"column_start":1,"column_end":70}},{"value":"/ * Floating point types (`f32` and `f64`): Uniformly distributed in the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":33721,"byte_end":33795,"line_start":308,"line_end":308,"column_start":1,"column_end":75}},{"value":"/   half-open range `[0, 1)`. See notes below.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":33796,"byte_end":33844,"line_start":309,"line_end":309,"column_start":1,"column_end":49}},{"value":"/ * Wrapping integers (`Wrapping<T>`), besides the type identical to their","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":33845,"byte_end":33921,"line_start":310,"line_end":310,"column_start":1,"column_end":77}},{"value":"/   normal integer variants.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":33922,"byte_end":33952,"line_start":311,"line_end":311,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":33953,"byte_end":33956,"line_start":312,"line_end":312,"column_start":1,"column_end":4}},{"value":"/ The `Standard` distribution also supports generation of the following","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":33957,"byte_end":34030,"line_start":313,"line_end":313,"column_start":1,"column_end":74}},{"value":"/ compound types where all component types are supported:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34031,"byte_end":34090,"line_start":314,"line_end":314,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34091,"byte_end":34094,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ *   Tuples (up to 12 elements): each element is generated sequentially.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34095,"byte_end":34170,"line_start":316,"line_end":316,"column_start":1,"column_end":76}},{"value":"/ *   Arrays (up to 32 elements): each element is generated sequentially;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34171,"byte_end":34246,"line_start":317,"line_end":317,"column_start":1,"column_end":76}},{"value":"/     see also [`Rng::fill`] which supports arbitrary array length for integer","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34247,"byte_end":34327,"line_start":318,"line_end":318,"column_start":1,"column_end":81}},{"value":"/     types and tends to be faster for `u32` and smaller types.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34328,"byte_end":34393,"line_start":319,"line_end":319,"column_start":1,"column_end":66}},{"value":"/ *   `Option<T>` first generates a `bool`, and if true generates and returns","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34394,"byte_end":34473,"line_start":320,"line_end":320,"column_start":1,"column_end":80}},{"value":"/     `Some(value)` where `value: T`, otherwise returning `None`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34474,"byte_end":34541,"line_start":321,"line_end":321,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34542,"byte_end":34545,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ ## Custom implementations","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34546,"byte_end":34575,"line_start":323,"line_end":323,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34576,"byte_end":34579,"line_start":324,"line_end":324,"column_start":1,"column_end":4}},{"value":"/ The [`Standard`] distribution may be implemented for user types as follows:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34580,"byte_end":34659,"line_start":325,"line_end":325,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34660,"byte_end":34663,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34664,"byte_end":34671,"line_start":327,"line_end":327,"column_start":1,"column_end":8}},{"value":"/ # #![allow(dead_code)]","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34672,"byte_end":34698,"line_start":328,"line_end":328,"column_start":1,"column_end":27}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34699,"byte_end":34717,"line_start":329,"line_end":329,"column_start":1,"column_end":19}},{"value":"/ use rand::distributions::{Distribution, Standard};","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34718,"byte_end":34772,"line_start":330,"line_end":330,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34773,"byte_end":34776,"line_start":331,"line_end":331,"column_start":1,"column_end":4}},{"value":"/ struct MyF32 {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34777,"byte_end":34795,"line_start":332,"line_end":332,"column_start":1,"column_end":19}},{"value":"/     x: f32,","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34796,"byte_end":34811,"line_start":333,"line_end":333,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34812,"byte_end":34817,"line_start":334,"line_end":334,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34818,"byte_end":34821,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ impl Distribution<MyF32> for Standard {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34822,"byte_end":34865,"line_start":336,"line_end":336,"column_start":1,"column_end":44}},{"value":"/     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> MyF32 {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34866,"byte_end":34931,"line_start":337,"line_end":337,"column_start":1,"column_end":66}},{"value":"/         MyF32 { x: rng.gen() }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34932,"byte_end":34966,"line_start":338,"line_end":338,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34967,"byte_end":34976,"line_start":339,"line_end":339,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34977,"byte_end":34982,"line_start":340,"line_end":340,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34983,"byte_end":34990,"line_start":341,"line_end":341,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34991,"byte_end":34994,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ ## Example usage","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":34995,"byte_end":35015,"line_start":343,"line_end":343,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":35016,"byte_end":35023,"line_start":344,"line_end":344,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":35024,"byte_end":35049,"line_start":345,"line_end":345,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::Standard;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":35050,"byte_end":35088,"line_start":346,"line_end":346,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":35089,"byte_end":35092,"line_start":347,"line_end":347,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = StdRng::from_entropy().sample(Standard);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":35093,"byte_end":35152,"line_start":348,"line_end":348,"column_start":1,"column_end":60}},{"value":"/ println!(\"f32 from [0, 1): {}\", val);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":35153,"byte_end":35194,"line_start":349,"line_end":349,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":35195,"byte_end":35202,"line_start":350,"line_end":350,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":35203,"byte_end":35206,"line_start":351,"line_end":351,"column_start":1,"column_end":4}},{"value":"/ # Floating point implementation","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":35207,"byte_end":35242,"line_start":352,"line_end":352,"column_start":1,"column_end":36}},{"value":"/ The floating point implementations for `Standard` generate a random value in","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":35243,"byte_end":35323,"line_start":353,"line_end":353,"column_start":1,"column_end":81}},{"value":"/ the half-open interval `[0, 1)`, i.e. including 0 but not 1.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":35324,"byte_end":35388,"line_start":354,"line_end":354,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":35389,"byte_end":35392,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε/2`. For `f32`","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":35393,"byte_end":35467,"line_start":356,"line_end":356,"column_start":1,"column_end":74}},{"value":"/ the 24 most significant random bits of a `u32` are used and for `f64` the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":35468,"byte_end":35545,"line_start":357,"line_end":357,"column_start":1,"column_end":78}},{"value":"/ 53 most significant bits of a `u64` are used. The conversion uses the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":35546,"byte_end":35619,"line_start":358,"line_end":358,"column_start":1,"column_end":74}},{"value":"/ multiplicative method: `(rng.gen::<$uty>() >> N) as $ty * (ε/2)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":35620,"byte_end":35690,"line_start":359,"line_end":359,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":35691,"byte_end":35694,"line_start":360,"line_end":360,"column_start":1,"column_end":4}},{"value":"/ See also: [`Open01`] which samples from `(0, 1)`, [`OpenClosed01`] which","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":35695,"byte_end":35771,"line_start":361,"line_end":361,"column_start":1,"column_end":77}},{"value":"/ samples from `(0, 1]` and `Rng::gen_range(0, 1)` which also samples from","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":35772,"byte_end":35848,"line_start":362,"line_end":362,"column_start":1,"column_end":77}},{"value":"/ `[0, 1)`. Note that `Open01` and `gen_range` (which uses [`Uniform`]) use","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":35849,"byte_end":35926,"line_start":363,"line_end":363,"column_start":1,"column_end":78}},{"value":"/ transmute-based methods which yield 1 bit less precision but may perform","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":35927,"byte_end":36003,"line_start":364,"line_end":364,"column_start":1,"column_end":77}},{"value":"/ faster on some architectures (on modern Intel CPUs all methods have","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":36004,"byte_end":36075,"line_start":365,"line_end":365,"column_start":1,"column_end":72}},{"value":"/ approximately equal performance).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":36076,"byte_end":36113,"line_start":366,"line_end":366,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":36114,"byte_end":36117,"line_start":367,"line_end":367,"column_start":1,"column_end":4}},{"value":"/ [`Uniform`]: uniform::Uniform","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":36118,"byte_end":36151,"line_start":368,"line_end":368,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":560},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","parent":null,"children":[{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":567},{"krate":0,"index":570}],"decl_id":null,"docs":" Convenience re-export of common members","sig":null,"attributes":[{"value":"! Convenience re-export of common members","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":256469,"byte_end":256512,"line_start":9,"line_end":9,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":256513,"byte_end":256516,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! Like the standard library's prelude, this module simplifies importing of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":256517,"byte_end":256593,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"! common items. Unlike the standard prelude, the contents of this module must","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":256594,"byte_end":256673,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"! be imported manually:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":256674,"byte_end":256699,"line_start":13,"line_end":13,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":256700,"byte_end":256703,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":256704,"byte_end":256711,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"! use rand::prelude::*;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":256712,"byte_end":256737,"line_start":16,"line_end":16,"column_start":1,"column_end":26}},{"value":"! # let mut r = StdRng::from_rng(thread_rng()).unwrap();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":256738,"byte_end":256796,"line_start":17,"line_end":17,"column_start":1,"column_end":59}},{"value":"! # let _: f32 = r.gen();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":256797,"byte_end":256824,"line_start":18,"line_end":18,"column_start":1,"column_end":28}},{"value":"! ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/prelude.rs","byte_start":256825,"byte_end":256832,"line_start":19,"line_end":19,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":575},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rngs","qualname":"::rngs","value":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","parent":null,"children":[{"krate":0,"index":576},{"krate":0,"index":665},{"krate":0,"index":681},{"krate":0,"index":693},{"krate":0,"index":712},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737}],"decl_id":null,"docs":" Random number generators and adapters","sig":null,"attributes":[{"value":"! Random number generators and adapters","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":257674,"byte_end":257715,"line_start":9,"line_end":9,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":257716,"byte_end":257719,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! ## Background: Random number generators (RNGs)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":257720,"byte_end":257770,"line_start":11,"line_end":11,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":257771,"byte_end":257774,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! Computers cannot produce random numbers from nowhere. We classify","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":257775,"byte_end":257844,"line_start":13,"line_end":13,"column_start":1,"column_end":70}},{"value":"! random number generators as follows:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":257845,"byte_end":257885,"line_start":14,"line_end":14,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":257886,"byte_end":257889,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! -   \"True\" random number generators (TRNGs) use hard-to-predict data sources","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":257890,"byte_end":257970,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"!     (e.g. the high-resolution parts of event timings and sensor jitter) to","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":257971,"byte_end":258049,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"!     harvest random bit-sequences, apply algorithms to remove bias and","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":258050,"byte_end":258123,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"!     estimate available entropy, then combine these bits into a byte-sequence","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":258124,"byte_end":258204,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"!     or an entropy pool. This job is usually done by the operating system or","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":258205,"byte_end":258284,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"!     a hardware generator (HRNG).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":258285,"byte_end":258321,"line_start":21,"line_end":21,"column_start":1,"column_end":37}},{"value":"! -   \"Pseudo\"-random number generators (PRNGs) use algorithms to transform a","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":258322,"byte_end":258401,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"!     seed into a sequence of pseudo-random numbers. These generators can be","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":258402,"byte_end":258480,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"!     fast and produce well-distributed unpredictable random numbers (or not).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":258481,"byte_end":258561,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"!     They are usually deterministic: given algorithm and seed, the output","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":258562,"byte_end":258638,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"!     sequence can be reproduced. They have finite period and eventually loop;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":258639,"byte_end":258719,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"!     with many algorithms this period is fixed and can be proven sufficiently","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":258720,"byte_end":258800,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"!     long, while others are chaotic and the period depends on the seed.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":258801,"byte_end":258875,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"! -   \"Cryptographically secure\" pseudo-random number generators (CSPRNGs)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":258876,"byte_end":258952,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"!     are the sub-set of PRNGs which are secure. Security of the generator","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":258953,"byte_end":259029,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"!     relies both on hiding the internal state and using a strong algorithm.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259030,"byte_end":259108,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259109,"byte_end":259112,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! ## Traits and functionality","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259113,"byte_end":259144,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259145,"byte_end":259148,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! All RNGs implement the [`RngCore`] trait, as a consequence of which the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259149,"byte_end":259224,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"! [`Rng`] extension trait is automatically implemented. Secure RNGs may","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259225,"byte_end":259298,"line_start":36,"line_end":36,"column_start":1,"column_end":74}},{"value":"! additionally implement the [`CryptoRng`] trait.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259299,"byte_end":259350,"line_start":37,"line_end":37,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259351,"byte_end":259354,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! All PRNGs require a seed to produce their random number sequence. The","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259355,"byte_end":259428,"line_start":39,"line_end":39,"column_start":1,"column_end":74}},{"value":"! [`SeedableRng`] trait provides three ways of constructing PRNGs:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259429,"byte_end":259497,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259498,"byte_end":259501,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"! -   `from_seed` accepts a type specific to the PRNG","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259502,"byte_end":259557,"line_start":42,"line_end":42,"column_start":1,"column_end":56}},{"value":"! -   `from_rng` allows a PRNG to be seeded from any other RNG","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259558,"byte_end":259622,"line_start":43,"line_end":43,"column_start":1,"column_end":65}},{"value":"! -   `seed_from_u64` allows any PRNG to be seeded from a `u64` insecurely","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259623,"byte_end":259699,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"! -   `from_entropy` securely seeds a PRNG from fresh entropy","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259700,"byte_end":259763,"line_start":45,"line_end":45,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259764,"byte_end":259767,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"! Use the [`rand_core`] crate when implementing your own RNGs.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259768,"byte_end":259832,"line_start":47,"line_end":47,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259833,"byte_end":259836,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"! ## Our generators","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259837,"byte_end":259858,"line_start":49,"line_end":49,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259859,"byte_end":259862,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"! This crate provides several random number generators:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259863,"byte_end":259920,"line_start":51,"line_end":51,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259921,"byte_end":259924,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"! -   [`OsRng`] is an interface to the operating system's random number","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259925,"byte_end":259998,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"!     source. Typically the operating system uses a CSPRNG with entropy","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":259999,"byte_end":260072,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"!     provided by a TRNG and some type of on-going re-seeding.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":260073,"byte_end":260137,"line_start":55,"line_end":55,"column_start":1,"column_end":65}},{"value":"! -   [`ThreadRng`], provided by the [`thread_rng`] function, is a handle to a","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":260138,"byte_end":260218,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"!     thread-local CSPRNG with periodic seeding from [`OsRng`]. Because this","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":260219,"byte_end":260297,"line_start":57,"line_end":57,"column_start":1,"column_end":79}},{"value":"!     is local, it is typically much faster than [`OsRng`]. It should be","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":260298,"byte_end":260372,"line_start":58,"line_end":58,"column_start":1,"column_end":75}},{"value":"!     secure, though the paranoid may prefer [`OsRng`].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":260373,"byte_end":260430,"line_start":59,"line_end":59,"column_start":1,"column_end":58}},{"value":"! -   [`StdRng`] is a CSPRNG chosen for good performance and trust of security","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":260431,"byte_end":260511,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"!     (based on reviews, maturity and usage). The current algorithm is ChaCha20,","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":260512,"byte_end":260594,"line_start":61,"line_end":61,"column_start":1,"column_end":83}},{"value":"!     which is well established and rigorously analysed.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":260595,"byte_end":260653,"line_start":62,"line_end":62,"column_start":1,"column_end":59}},{"value":"!     [`StdRng`] provides the algorithm used by [`ThreadRng`] but without","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":260654,"byte_end":260729,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"!     periodic reseeding.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":260730,"byte_end":260757,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"! -   [`SmallRng`] is an **insecure** PRNG designed to be fast, simple, require","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":260758,"byte_end":260839,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"!     little memory, and have good output quality.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":260840,"byte_end":260892,"line_start":66,"line_end":66,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":260893,"byte_end":260896,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"! The algorithms selected for [`StdRng`] and [`SmallRng`] may change in any","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":260897,"byte_end":260974,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"! release and may be platform-dependent, therefore they should be considered","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":260975,"byte_end":261053,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"! **not reproducible**.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":261054,"byte_end":261079,"line_start":70,"line_end":70,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":261080,"byte_end":261083,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"! ## Additional generators","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":261084,"byte_end":261112,"line_start":72,"line_end":72,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":261113,"byte_end":261116,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"! **TRNGs**: The [`rdrand`] crate provides an interface to the RDRAND and","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":261117,"byte_end":261192,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"! RDSEED instructions available in modern Intel and AMD CPUs.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":261193,"byte_end":261256,"line_start":75,"line_end":75,"column_start":1,"column_end":64}},{"value":"! The [`rand_jitter`] crate provides a user-space implementation of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":261257,"byte_end":261326,"line_start":76,"line_end":76,"column_start":1,"column_end":70}},{"value":"! entropy harvesting from CPU timer jitter, but is very slow and has","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":261327,"byte_end":261397,"line_start":77,"line_end":77,"column_start":1,"column_end":71}},{"value":"! [security issues](https://github.com/rust-random/rand/issues/699).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":261398,"byte_end":261468,"line_start":78,"line_end":78,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":261469,"byte_end":261472,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"! **PRNGs**: Several companion crates are available, providing individual or","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":261473,"byte_end":261551,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"! families of PRNG algorithms. These provide the implementations behind","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":261552,"byte_end":261625,"line_start":81,"line_end":81,"column_start":1,"column_end":74}},{"value":"! [`StdRng`] and [`SmallRng`] but can also be used directly, indeed *should*","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":261626,"byte_end":261704,"line_start":82,"line_end":82,"column_start":1,"column_end":79}},{"value":"! be used directly when **reproducibility** matters.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":261705,"byte_end":261759,"line_start":83,"line_end":83,"column_start":1,"column_end":55}},{"value":"! Some suggestions are: [`rand_chacha`], [`rand_pcg`], [`rand_xoshiro`].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":261760,"byte_end":261834,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"! A full list can be found by searching for crates with the [`rng` tag].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":261835,"byte_end":261909,"line_start":85,"line_end":85,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":261910,"byte_end":261913,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"! [`Rng`]: crate::Rng","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":261914,"byte_end":261937,"line_start":87,"line_end":87,"column_start":1,"column_end":24}},{"value":"! [`RngCore`]: crate::RngCore","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":261938,"byte_end":261969,"line_start":88,"line_end":88,"column_start":1,"column_end":32}},{"value":"! [`CryptoRng`]: crate::CryptoRng","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":261970,"byte_end":262005,"line_start":89,"line_end":89,"column_start":1,"column_end":36}},{"value":"! [`SeedableRng`]: crate::SeedableRng","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":262006,"byte_end":262045,"line_start":90,"line_end":90,"column_start":1,"column_end":40}},{"value":"! [`thread_rng`]: crate::thread_rng","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":262046,"byte_end":262083,"line_start":91,"line_end":91,"column_start":1,"column_end":38}},{"value":"! [`rdrand`]: https://crates.io/crates/rdrand","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":262084,"byte_end":262131,"line_start":92,"line_end":92,"column_start":1,"column_end":48}},{"value":"! [`rand_jitter`]: https://crates.io/crates/rand_jitter","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":262132,"byte_end":262189,"line_start":93,"line_end":93,"column_start":1,"column_end":58}},{"value":"! [`rand_chacha`]: https://crates.io/crates/rand_chacha","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":262190,"byte_end":262247,"line_start":94,"line_end":94,"column_start":1,"column_end":58}},{"value":"! [`rand_pcg`]: https://crates.io/crates/rand_pcg","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":262248,"byte_end":262299,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"! [`rand_xoshiro`]: https://crates.io/crates/rand_xoshiro","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":262300,"byte_end":262359,"line_start":96,"line_end":96,"column_start":1,"column_end":60}},{"value":"! [`rng` tag]: https://crates.io/keywords/rng","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":262360,"byte_end":262407,"line_start":97,"line_end":97,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":576},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adapter","qualname":"::rngs::adapter","value":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/mod.rs","parent":null,"children":[{"krate":0,"index":577},{"krate":0,"index":599},{"krate":0,"index":661},{"krate":0,"index":664}],"decl_id":null,"docs":" Wrappers / adapters forming RNGs\n","sig":null,"attributes":[{"value":"! Wrappers / adapters forming RNGs","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/mod.rs","byte_start":263337,"byte_end":263373,"line_start":9,"line_end":9,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1987},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":265014,"byte_end":265021,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"ReadRng","qualname":"::rngs::adapter::read::ReadRng","value":"ReadRng {  }","parent":null,"children":[{"krate":0,"index":1989}],"decl_id":null,"docs":" An RNG that reads random bytes straight from any type supporting\n [`std::io::Read`], for example files.","sig":null,"attributes":[{"value":"/ An RNG that reads random bytes straight from any type supporting","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264064,"byte_end":264132,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/ [`std::io::Read`], for example files.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264133,"byte_end":264174,"line_start":19,"line_end":19,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264175,"byte_end":264178,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This will work best with an infinite reader, but that is not required.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264179,"byte_end":264253,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264254,"byte_end":264257,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This can be used with `/dev/urandom` on Unix but it is recommended to use","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264258,"byte_end":264335,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ [`OsRng`] instead.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264336,"byte_end":264358,"line_start":24,"line_end":24,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264359,"byte_end":264362,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264363,"byte_end":264375,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264376,"byte_end":264379,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ `ReadRng` uses [`std::io::Read::read_exact`], which retries on interrupts.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264380,"byte_end":264458,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/ All other errors from the underlying reader, including when it does not","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264459,"byte_end":264534,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ have enough data, will only be reported through [`try_fill_bytes`].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264535,"byte_end":264606,"line_start":30,"line_end":30,"column_start":1,"column_end":72}},{"value":"/ The other [`RngCore`] methods will panic in case of an error.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264607,"byte_end":264672,"line_start":31,"line_end":31,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264673,"byte_end":264676,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264677,"byte_end":264690,"line_start":33,"line_end":33,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264691,"byte_end":264694,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264695,"byte_end":264702,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264703,"byte_end":264721,"line_start":36,"line_end":36,"column_start":1,"column_end":19}},{"value":"/ use rand::rngs::adapter::ReadRng;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264722,"byte_end":264759,"line_start":37,"line_end":37,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264760,"byte_end":264763,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let data = vec![1, 2, 3, 4, 5, 6, 7, 8];","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264764,"byte_end":264808,"line_start":39,"line_end":39,"column_start":1,"column_end":45}},{"value":"/ let mut rng = ReadRng::new(&data[..]);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264809,"byte_end":264851,"line_start":40,"line_end":40,"column_start":1,"column_end":43}},{"value":"/ println!(\"{:x}\", rng.gen::<u32>());","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264852,"byte_end":264891,"line_start":41,"line_end":41,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264892,"byte_end":264899,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264900,"byte_end":264903,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ [`OsRng`]: crate::rngs::OsRng","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264904,"byte_end":264937,"line_start":44,"line_end":44,"column_start":1,"column_end":34}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":264938,"byte_end":264985,"line_start":45,"line_end":45,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":265129,"byte_end":265132,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<ReadRng<R>>::new","value":"fn (r: R) -> ReadRng<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReadRng` from a `Read`.\n","sig":null,"attributes":[{"value":"/ Create a new `ReadRng` from a `Read`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":265076,"byte_end":265117,"line_start":52,"line_end":52,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1993},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":266041,"byte_end":266050,"line_start":89,"line_end":89,"column_start":12,"column_end":21},"name":"ReadError","qualname":"::rngs::adapter::read::ReadError","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ReadRng` error type\n","sig":null,"attributes":[{"value":"/ `ReadRng` error type","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":265988,"byte_end":266012,"line_start":87,"line_end":87,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1998},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":271016,"byte_end":271028,"line_start":79,"line_end":79,"column_start":12,"column_end":24},"name":"ReseedingRng","qualname":"::rngs::adapter::reseeding::ReseedingRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around any PRNG that implements [`BlockRngCore`], that adds the\n ability to reseed it.","sig":null,"attributes":[{"value":"/ A wrapper around any PRNG that implements [`BlockRngCore`], that adds the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":268415,"byte_end":268492,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ ability to reseed it.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":268493,"byte_end":268518,"line_start":19,"line_end":19,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":268519,"byte_end":268522,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ `ReseedingRng` reseeds the underlying PRNG in the following cases:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":268523,"byte_end":268593,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":268594,"byte_end":268597,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - On a manual call to [`reseed()`].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":268598,"byte_end":268637,"line_start":23,"line_end":23,"column_start":1,"column_end":40}},{"value":"/ - After `clone()`, the clone will be reseeded on first use.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":268638,"byte_end":268701,"line_start":24,"line_end":24,"column_start":1,"column_end":64}},{"value":"/ - After a process is forked, the RNG in the child process is reseeded within","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":268702,"byte_end":268782,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/   the next few generated values, depending on the block size of the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":268783,"byte_end":268854,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/   underlying PRNG. For ChaCha and Hc128 this is a maximum of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":268855,"byte_end":268919,"line_start":27,"line_end":27,"column_start":1,"column_end":65}},{"value":"/   15 `u32` values before reseeding.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":268920,"byte_end":268959,"line_start":28,"line_end":28,"column_start":1,"column_end":40}},{"value":"/ - After the PRNG has generated a configurable number of random bytes.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":268960,"byte_end":269033,"line_start":29,"line_end":29,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":269034,"byte_end":269037,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # When should reseeding after a fixed number of generated bytes be used?","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":269038,"byte_end":269114,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":269115,"byte_end":269118,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Reseeding after a fixed number of generated bytes is never strictly","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":269119,"byte_end":269190,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/ *necessary*. Cryptographic PRNGs don't have a limited number of bytes they","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":269191,"byte_end":269269,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ can output, or at least not a limit reachable in any practical way. There is","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":269270,"byte_end":269350,"line_start":35,"line_end":35,"column_start":1,"column_end":81}},{"value":"/ no such thing as 'running out of entropy'.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":269351,"byte_end":269397,"line_start":36,"line_end":36,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":269398,"byte_end":269401,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Occasionally reseeding can be seen as some form of 'security in depth'. Even","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":269402,"byte_end":269482,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"/ if in the future a cryptographic weakness is found in the CSPRNG being used,","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":269483,"byte_end":269563,"line_start":39,"line_end":39,"column_start":1,"column_end":81}},{"value":"/ or a flaw in the implementation, occasionally reseeding should make","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":269564,"byte_end":269635,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/ exploiting it much more difficult or even impossible.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":269636,"byte_end":269693,"line_start":41,"line_end":41,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":269694,"byte_end":269697,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Use [`ReseedingRng::new`] with a `threshold` of `0` to disable reseeding","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":269698,"byte_end":269774,"line_start":43,"line_end":43,"column_start":1,"column_end":77}},{"value":"/ after a fixed number of generated bytes.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":269775,"byte_end":269819,"line_start":44,"line_end":44,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":269820,"byte_end":269823,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Error handling","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":269824,"byte_end":269844,"line_start":46,"line_end":46,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":269845,"byte_end":269848,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Although unlikely, reseeding the wrapped PRNG can fail. `ReseedingRng` will","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":269849,"byte_end":269928,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ never panic but try to handle the error intelligently through some","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":269929,"byte_end":269999,"line_start":49,"line_end":49,"column_start":1,"column_end":71}},{"value":"/ combination of retrying and delaying reseeding until later.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270000,"byte_end":270063,"line_start":50,"line_end":50,"column_start":1,"column_end":64}},{"value":"/ If handling the source error fails `ReseedingRng` will continue generating","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270064,"byte_end":270142,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ data from the wrapped PRNG without reseeding.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270143,"byte_end":270192,"line_start":52,"line_end":52,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270193,"byte_end":270196,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ Manually calling [`reseed()`] will not have this retry or delay logic, but","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270197,"byte_end":270275,"line_start":54,"line_end":54,"column_start":1,"column_end":79}},{"value":"/ reports the error.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270276,"byte_end":270298,"line_start":55,"line_end":55,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270299,"byte_end":270302,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270303,"byte_end":270316,"line_start":57,"line_end":57,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270317,"byte_end":270320,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270321,"byte_end":270328,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270329,"byte_end":270354,"line_start":60,"line_end":60,"column_start":1,"column_end":26}},{"value":"/ use rand_chacha::ChaCha20Core; // Internal part of ChaChaRng that","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270355,"byte_end":270424,"line_start":61,"line_end":61,"column_start":1,"column_end":70}},{"value":"/                              // implements BlockRngCore","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270425,"byte_end":270484,"line_start":62,"line_end":62,"column_start":1,"column_end":60}},{"value":"/ use rand::rngs::OsRng;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270485,"byte_end":270511,"line_start":63,"line_end":63,"column_start":1,"column_end":27}},{"value":"/ use rand::rngs::adapter::ReseedingRng;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270512,"byte_end":270554,"line_start":64,"line_end":64,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270555,"byte_end":270558,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ let prng = ChaCha20Core::from_entropy();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270559,"byte_end":270603,"line_start":66,"line_end":66,"column_start":1,"column_end":45}},{"value":"/ let mut reseeding_rng = ReseedingRng::new(prng, 0, OsRng);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270604,"byte_end":270666,"line_start":67,"line_end":67,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270667,"byte_end":270670,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", reseeding_rng.gen::<u64>());","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270671,"byte_end":270718,"line_start":69,"line_end":69,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270719,"byte_end":270722,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ let mut cloned_rng = reseeding_rng.clone();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270723,"byte_end":270770,"line_start":71,"line_end":71,"column_start":1,"column_end":48}},{"value":"/ assert!(reseeding_rng.gen::<u64>() != cloned_rng.gen::<u64>());","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270771,"byte_end":270838,"line_start":72,"line_end":72,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270839,"byte_end":270846,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270847,"byte_end":270850,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ [`BlockRngCore`]: rand_core::block::BlockRngCore","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270851,"byte_end":270903,"line_start":75,"line_end":75,"column_start":1,"column_end":53}},{"value":"/ [`ReseedingRng::new`]: ReseedingRng::new","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270904,"byte_end":270948,"line_start":76,"line_end":76,"column_start":1,"column_end":45}},{"value":"/ [`reseed()`]: ReseedingRng::reseed","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":270949,"byte_end":270987,"line_start":77,"line_end":77,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":271532,"byte_end":271535,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"new","qualname":"<ReseedingRng<R, Rsdr>>::new","value":"fn (rng: R, threshold: u64, reseeder: Rsdr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReseedingRng` from an existing PRNG, combined with a RNG\n to use as reseeder.","sig":null,"attributes":[{"value":"/ Create a new `ReseedingRng` from an existing PRNG, combined with a RNG","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":271235,"byte_end":271309,"line_start":89,"line_end":89,"column_start":5,"column_end":79}},{"value":"/ to use as reseeder.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":271314,"byte_end":271337,"line_start":90,"line_end":90,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":271342,"byte_end":271345,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ `threshold` sets the number of generated bytes after which to reseed the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":271350,"byte_end":271426,"line_start":92,"line_end":92,"column_start":5,"column_end":81}},{"value":"/ PRNG. Set it to zero to never reseed based on the number of generated","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":271431,"byte_end":271504,"line_start":93,"line_end":93,"column_start":5,"column_end":78}},{"value":"/ values.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":271509,"byte_end":271520,"line_start":94,"line_end":94,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":271720,"byte_end":271726,"line_start":100,"line_end":100,"column_start":12,"column_end":18},"name":"reseed","qualname":"<ReseedingRng<R, Rsdr>>::reseed","value":"fn (&mut self) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Reseed the internal PRNG.\n","sig":null,"attributes":[{"value":"/ Reseed the internal PRNG.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":271679,"byte_end":271708,"line_start":99,"line_end":99,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":2019},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/entropy.rs","byte_start":280820,"byte_end":280830,"line_start":24,"line_end":24,"column_start":12,"column_end":22},"name":"EntropyRng","qualname":"::rngs::entropy::EntropyRng","value":"EntropyRng {  }","parent":null,"children":[{"krate":0,"index":2020}],"decl_id":null,"docs":" An interface returning random data from external source(s), provided\n specifically for securely seeding algorithmic generators (PRNGs).","sig":null,"attributes":[{"value":"/ An interface returning random data from external source(s), provided","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/entropy.rs","byte_start":280463,"byte_end":280535,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/ specifically for securely seeding algorithmic generators (PRNGs).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/entropy.rs","byte_start":280536,"byte_end":280605,"line_start":17,"line_end":17,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/entropy.rs","byte_start":280606,"byte_end":280609,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This is deprecated. It is suggested you use [`rngs::OsRng`] instead.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/entropy.rs","byte_start":280610,"byte_end":280682,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/entropy.rs","byte_start":280683,"byte_end":280686,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ [`rngs::OsRng`]: crate::rngs::OsRng","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/entropy.rs","byte_start":280687,"byte_end":280726,"line_start":21,"line_end":21,"column_start":1,"column_end":40}},{"value":"deprecated(since = \"0.7.0\", note = \"use rngs::OsRng instead\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/entropy.rs","byte_start":280744,"byte_end":280808,"line_start":23,"line_end":23,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/entropy.rs","byte_start":281143,"byte_end":281146,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<EntropyRng>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `EntropyRng`.","sig":null,"attributes":[{"value":"/ Create a new `EntropyRng`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/entropy.rs","byte_start":280877,"byte_end":280907,"line_start":29,"line_end":29,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/entropy.rs","byte_start":280912,"byte_end":280915,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ This method will do no system calls or other initialization routines,","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/entropy.rs","byte_start":280920,"byte_end":280993,"line_start":31,"line_end":31,"column_start":5,"column_end":78}},{"value":"/ those are done on first use. This is done to make `new` infallible,","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/entropy.rs","byte_start":280998,"byte_end":281069,"line_start":32,"line_end":32,"column_start":5,"column_end":76}},{"value":"/ and `try_fill_bytes` the only place to report errors.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/entropy.rs","byte_start":281074,"byte_end":281131,"line_start":33,"line_end":33,"column_start":5,"column_end":62}}]},{"kind":"Mod","id":{"krate":0,"index":681},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mock","qualname":"::rngs::mock","value":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":2023},{"krate":0,"index":2028},{"krate":0,"index":2026},{"krate":0,"index":686},{"krate":0,"index":688}],"decl_id":null,"docs":" Mock random number generator\n","sig":null,"attributes":[{"value":"! Mock random number generator","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":282325,"byte_end":282357,"line_start":9,"line_end":9,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":2023},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":282883,"byte_end":282890,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"name":"StepRng","qualname":"::rngs::mock::StepRng","value":"StepRng {  }","parent":null,"children":[{"krate":0,"index":2024},{"krate":0,"index":2025}],"decl_id":null,"docs":" A simple implementation of `RngCore` for testing purposes.","sig":null,"attributes":[{"value":"/ A simple implementation of `RngCore` for testing purposes.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":282400,"byte_end":282462,"line_start":13,"line_end":13,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":282463,"byte_end":282466,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This generates an arithmetic sequence (i.e. adds a constant each step)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":282467,"byte_end":282541,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ over a `u64` number, using wrapping arithmetic. If the increment is 0","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":282542,"byte_end":282615,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"/ the generator yields a constant.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":282616,"byte_end":282652,"line_start":17,"line_end":17,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":282653,"byte_end":282656,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":282657,"byte_end":282664,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":282665,"byte_end":282683,"line_start":20,"line_end":20,"column_start":1,"column_end":19}},{"value":"/ use rand::rngs::mock::StepRng;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":282684,"byte_end":282718,"line_start":21,"line_end":21,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":282719,"byte_end":282722,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ let mut my_rng = StepRng::new(2, 1);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":282723,"byte_end":282763,"line_start":23,"line_end":23,"column_start":1,"column_end":41}},{"value":"/ let sample: [u64; 3] = my_rng.gen();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":282764,"byte_end":282804,"line_start":24,"line_end":24,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(sample, [2, 3, 4]);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":282805,"byte_end":282839,"line_start":25,"line_end":25,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":282840,"byte_end":282847,"line_start":26,"line_end":26,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":283080,"byte_end":283083,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<StepRng>::new","value":"fn (initial: u64, increment: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `StepRng`, yielding an arithmetic sequence starting with\n `initial` and incremented by `increment` each time.\n","sig":null,"attributes":[{"value":"/ Create a `StepRng`, yielding an arithmetic sequence starting with","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":282939,"byte_end":283008,"line_start":34,"line_end":34,"column_start":5,"column_end":74}},{"value":"/ `initial` and incremented by `increment` each time.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":283013,"byte_end":283068,"line_start":35,"line_end":35,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":2030},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","byte_start":285273,"byte_end":285279,"line_start":36,"line_end":36,"column_start":12,"column_end":18},"name":"StdRng","qualname":"::rngs::std::StdRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient\n on the current platform, to be statistically strong and unpredictable\n (meaning a cryptographically secure PRNG).","sig":null,"attributes":[{"value":"/ The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","byte_start":284534,"byte_end":284612,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ on the current platform, to be statistically strong and unpredictable","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","byte_start":284613,"byte_end":284686,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/ (meaning a cryptographically secure PRNG).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","byte_start":284687,"byte_end":284733,"line_start":23,"line_end":23,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","byte_start":284734,"byte_end":284737,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The current algorithm used is the ChaCha block cipher with 20 rounds.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","byte_start":284738,"byte_end":284811,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"/ This may change as new evidence of cipher security and performance","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","byte_start":284812,"byte_end":284882,"line_start":26,"line_end":26,"column_start":1,"column_end":71}},{"value":"/ becomes available.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","byte_start":284883,"byte_end":284905,"line_start":27,"line_end":27,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","byte_start":284906,"byte_end":284909,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The algorithm is deterministic but should not be considered reproducible","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","byte_start":284910,"byte_end":284986,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ due to dependence on configuration and possible replacement in future","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","byte_start":284987,"byte_end":285060,"line_start":30,"line_end":30,"column_start":1,"column_end":74}},{"value":"/ library versions. For a secure reproducible generator, we recommend use of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","byte_start":285061,"byte_end":285139,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ the [rand_chacha] crate directly.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","byte_start":285140,"byte_end":285177,"line_start":32,"line_end":32,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","byte_start":285178,"byte_end":285181,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ [rand_chacha]: https://crates.io/crates/rand_chacha","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","byte_start":285182,"byte_end":285237,"line_start":34,"line_end":34,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":2037},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":289552,"byte_end":289561,"line_start":57,"line_end":57,"column_start":12,"column_end":21},"name":"ThreadRng","qualname":"::rngs::thread::ThreadRng","value":"ThreadRng {  }","parent":null,"children":[{"krate":0,"index":2038}],"decl_id":null,"docs":" The type returned by [`thread_rng`], essentially just a reference to the\n PRNG in thread-local memory.","sig":null,"attributes":[{"value":"/ The type returned by [`thread_rng`], essentially just a reference to the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":288659,"byte_end":288735,"line_start":39,"line_end":39,"column_start":1,"column_end":77}},{"value":"/ PRNG in thread-local memory.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":288736,"byte_end":288768,"line_start":40,"line_end":40,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":288769,"byte_end":288772,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ `ThreadRng` uses the same PRNG as [`StdRng`] for security and performance.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":288773,"byte_end":288851,"line_start":42,"line_end":42,"column_start":1,"column_end":79}},{"value":"/ As hinted by the name, the generator is thread-local. `ThreadRng` is a","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":288852,"byte_end":288926,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ handle to this generator and thus supports `Copy`, but not `Send` or `Sync`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":288927,"byte_end":289007,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":289008,"byte_end":289011,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Unlike `StdRng`, `ThreadRng` uses the  [`ReseedingRng`] wrapper to reseed","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":289012,"byte_end":289089,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"/ the PRNG from fresh entropy every 64 kiB of random data.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":289090,"byte_end":289150,"line_start":47,"line_end":47,"column_start":1,"column_end":61}},{"value":"/ [`OsRng`] is used to provide seed data.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":289151,"byte_end":289194,"line_start":48,"line_end":48,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":289195,"byte_end":289198,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Note that the reseeding is done as an extra precaution against side-channel","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":289199,"byte_end":289278,"line_start":50,"line_end":50,"column_start":1,"column_end":80}},{"value":"/ attacks and mis-use (e.g. if somehow weak entropy were supplied initially).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":289279,"byte_end":289358,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ The PRNG algorithms used are assumed to be secure.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":289359,"byte_end":289413,"line_start":52,"line_end":52,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":289414,"byte_end":289417,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ [`ReseedingRng`]: crate::rngs::adapter::ReseedingRng","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":289418,"byte_end":289474,"line_start":54,"line_end":54,"column_start":1,"column_end":57}},{"value":"/ [`StdRng`]: crate::rngs::StdRng","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":289475,"byte_end":289510,"line_start":55,"line_end":55,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":724},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":290451,"byte_end":290461,"line_start":80,"line_end":80,"column_start":8,"column_end":18},"name":"thread_rng","qualname":"::rngs::thread::thread_rng","value":"fn () -> ThreadRng","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the lazily-initialized thread-local random number generator,\n seeded by the system. Intended to be used in method chaining style,\n e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g.\n `let mut rng = thread_rng();`.  Invoked by the `Default` trait, making\n `ThreadRng::default()` equivalent.","sig":null,"attributes":[{"value":"/ Retrieve the lazily-initialized thread-local random number generator,","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":290074,"byte_end":290147,"line_start":73,"line_end":73,"column_start":1,"column_end":74}},{"value":"/ seeded by the system. Intended to be used in method chaining style,","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":290148,"byte_end":290219,"line_start":74,"line_end":74,"column_start":1,"column_end":72}},{"value":"/ e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":290220,"byte_end":290281,"line_start":75,"line_end":75,"column_start":1,"column_end":62}},{"value":"/ `let mut rng = thread_rng();`.  Invoked by the `Default` trait, making","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":290282,"byte_end":290356,"line_start":76,"line_end":76,"column_start":1,"column_end":75}},{"value":"/ `ThreadRng::default()` equivalent.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":290357,"byte_end":290395,"line_start":77,"line_end":77,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":290396,"byte_end":290399,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ For more information see [`ThreadRng`].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":290400,"byte_end":290443,"line_start":79,"line_end":79,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":738},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"seq","qualname":"::seq","value":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","parent":null,"children":[{"krate":0,"index":739},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":836},{"krate":0,"index":843},{"krate":0,"index":874},{"krate":0,"index":2082},{"krate":0,"index":2089},{"krate":0,"index":876},{"krate":0,"index":884},{"krate":0,"index":889}],"decl_id":null,"docs":" Sequence-related functionality","sig":null,"attributes":[{"value":"! Sequence-related functionality","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":291801,"byte_end":291835,"line_start":9,"line_end":9,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":291836,"byte_end":291839,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! This module provides:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":291840,"byte_end":291865,"line_start":11,"line_end":11,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":291866,"byte_end":291869,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! *   [`SliceRandom`] slice sampling and mutation","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":291870,"byte_end":291921,"line_start":13,"line_end":13,"column_start":1,"column_end":52}},{"value":"! *   [`IteratorRandom`] iterator sampling","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":291922,"byte_end":291966,"line_start":14,"line_end":14,"column_start":1,"column_end":45}},{"value":"! *   [`index::sample`] low-level API to choose multiple indices from","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":291967,"byte_end":292038,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"!     `0..length`","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":292039,"byte_end":292058,"line_start":16,"line_end":16,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":292059,"byte_end":292062,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"! Also see:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":292063,"byte_end":292076,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":292077,"byte_end":292080,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! *   [`crate::distributions::weighted`] module which provides","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":292081,"byte_end":292145,"line_start":20,"line_end":20,"column_start":1,"column_end":65}},{"value":"!     implementations of weighted index sampling.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":292146,"byte_end":292197,"line_start":21,"line_end":21,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":292198,"byte_end":292201,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! In order to make results reproducible across 32-64 bit architectures, all","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":292202,"byte_end":292279,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"! `usize` indices are sampled as a `u32` where possible (also providing a","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":292280,"byte_end":292355,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"! small performance boost in some cases).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":292356,"byte_end":292399,"line_start":25,"line_end":25,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":739},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"index","qualname":"::seq::index","value":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","parent":null,"children":[{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":747},{"krate":0,"index":2049},{"krate":0,"index":2058},{"krate":0,"index":2056},{"krate":0,"index":748},{"krate":0,"index":756},{"krate":0,"index":761},{"krate":0,"index":763},{"krate":0,"index":2060},{"krate":0,"index":2068},{"krate":0,"index":765},{"krate":0,"index":772},{"krate":0,"index":2071},{"krate":0,"index":2080},{"krate":0,"index":2078},{"krate":0,"index":774},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":789},{"krate":0,"index":792},{"krate":0,"index":794},{"krate":0,"index":797},{"krate":0,"index":800},{"krate":0,"index":803}],"decl_id":null,"docs":" Low-level API for sampling indices\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":292402,"byte_end":292427,"line_start":28,"line_end":28,"column_start":1,"column_end":26}},{"value":"! Low-level API for sampling indices","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":320249,"byte_end":320287,"line_start":9,"line_end":9,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2050},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":320938,"byte_end":320941,"line_start":31,"line_end":31,"column_start":5,"column_end":8},"name":"U32","qualname":"::seq::index::IndexVec::U32","value":"IndexVec::U32(Vec<u32>)","parent":{"krate":0,"index":2049},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2053},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":320976,"byte_end":320981,"line_start":33,"line_end":33,"column_start":5,"column_end":10},"name":"USize","qualname":"::seq::index::IndexVec::USize","value":"IndexVec::USize(Vec<usize>)","parent":{"krate":0,"index":2049},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2049},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":320904,"byte_end":320912,"line_start":29,"line_end":29,"column_start":10,"column_end":18},"name":"IndexVec","qualname":"::seq::index::IndexVec","value":"IndexVec::{U32, USize}","parent":null,"children":[{"krate":0,"index":2050},{"krate":0,"index":2053}],"decl_id":null,"docs":" A vector of indices.","sig":null,"attributes":[{"value":"/ A vector of indices.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":320790,"byte_end":320814,"line_start":25,"line_end":25,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":320815,"byte_end":320818,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Multiple internal representations are possible.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":320819,"byte_end":320870,"line_start":27,"line_end":27,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":321077,"byte_end":321080,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexVec>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of indices\n","sig":null,"attributes":[{"value":"/ Returns the number of indices","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":321018,"byte_end":321051,"line_start":37,"line_end":37,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":321056,"byte_end":321065,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":321298,"byte_end":321306,"line_start":48,"line_end":48,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexVec>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the length is 0.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the length is 0.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":321234,"byte_end":321272,"line_start":46,"line_end":46,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":321277,"byte_end":321286,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":321643,"byte_end":321648,"line_start":60,"line_end":60,"column_start":12,"column_end":17},"name":"index","qualname":"<IndexVec>::index","value":"fn (&self, index: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the value at the given `index`.","sig":null,"attributes":[{"value":"/ Return the value at the given `index`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":321469,"byte_end":321511,"line_start":55,"line_end":55,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":321516,"byte_end":321519,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ (Note: we cannot implement [`std::ops::Index`] because of lifetime","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":321524,"byte_end":321594,"line_start":57,"line_end":57,"column_start":5,"column_end":75}},{"value":"/ restrictions.)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":321599,"byte_end":321617,"line_start":58,"line_end":58,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":321622,"byte_end":321631,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":321927,"byte_end":321935,"line_start":69,"line_end":69,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<IndexVec>::into_vec","value":"fn (self) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return result as a `Vec<usize>`. Conversion may or may not be trivial.\n","sig":null,"attributes":[{"value":"/ Return result as a `Vec<usize>`. Conversion may or may not be trivial.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":321827,"byte_end":321901,"line_start":67,"line_end":67,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":321906,"byte_end":321915,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":322200,"byte_end":322204,"line_start":78,"line_end":78,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexVec>::iter","value":"fn (&self) -> IndexVecIter<'_>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the indices as a sequence of `usize` values\n","sig":null,"attributes":[{"value":"/ Iterate over the indices as a sequence of `usize` values","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":322114,"byte_end":322174,"line_start":76,"line_end":76,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":322179,"byte_end":322188,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":322514,"byte_end":322523,"line_start":87,"line_end":87,"column_start":12,"column_end":21},"name":"into_iter","qualname":"<IndexVec>::into_iter","value":"fn (self) -> IndexVecIntoIter","parent":null,"children":[],"decl_id":null,"docs":" Convert into an iterator over the indices as a sequence of `usize` values\n","sig":null,"attributes":[{"value":"/ Convert into an iterator over the indices as a sequence of `usize` values","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":322411,"byte_end":322488,"line_start":85,"line_end":85,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":322493,"byte_end":322502,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2062},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":323676,"byte_end":323679,"line_start":129,"line_end":129,"column_start":5,"column_end":8},"name":"U32","qualname":"::seq::index::IndexVecIter::U32","value":"IndexVecIter::U32(slice::Iter<'a, u32>)","parent":{"krate":0,"index":2060},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2065},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":323726,"byte_end":323731,"line_start":131,"line_end":131,"column_start":5,"column_end":10},"name":"USize","qualname":"::seq::index::IndexVecIter::USize","value":"IndexVecIter::USize(slice::Iter<'a, usize>)","parent":{"krate":0,"index":2060},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2060},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":323634,"byte_end":323646,"line_start":127,"line_end":127,"column_start":10,"column_end":22},"name":"IndexVecIter","qualname":"::seq::index::IndexVecIter","value":"IndexVecIter::{U32, USize}","parent":null,"children":[{"krate":0,"index":2062},{"krate":0,"index":2065}],"decl_id":null,"docs":" Return type of `IndexVec::iter`.\n","sig":null,"attributes":[{"value":"/ Return type of `IndexVec::iter`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":323571,"byte_end":323607,"line_start":125,"line_end":125,"column_start":1,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2072},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":324467,"byte_end":324470,"line_start":161,"line_end":161,"column_start":5,"column_end":8},"name":"U32","qualname":"::seq::index::IndexVecIntoIter::U32","value":"IndexVecIntoIter::U32(vec::IntoIter<u32>)","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2075},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":324515,"byte_end":324520,"line_start":163,"line_end":163,"column_start":5,"column_end":10},"name":"USize","qualname":"::seq::index::IndexVecIntoIter::USize","value":"IndexVecIntoIter::USize(vec::IntoIter<usize>)","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2071},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":324425,"byte_end":324441,"line_start":159,"line_end":159,"column_start":10,"column_end":26},"name":"IndexVecIntoIter","qualname":"::seq::index::IndexVecIntoIter","value":"IndexVecIntoIter::{U32, USize}","parent":null,"children":[{"krate":0,"index":2072},{"krate":0,"index":2075}],"decl_id":null,"docs":" Return type of `IndexVec::into_iter`.\n","sig":null,"attributes":[{"value":"/ Return type of `IndexVec::into_iter`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":324350,"byte_end":324391,"line_start":157,"line_end":157,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":782},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":326196,"byte_end":326202,"line_start":213,"line_end":213,"column_start":8,"column_end":14},"name":"sample","qualname":"::seq::index::sample","value":"fn <R> (rng: &mut R, length: usize, amount: usize) -> IndexVec","parent":null,"children":[],"decl_id":null,"docs":" Randomly sample exactly `amount` distinct indices from `0..length`, and\n return them in random order (fully shuffled).","sig":null,"attributes":[{"value":"/ Randomly sample exactly `amount` distinct indices from `0..length`, and","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":325128,"byte_end":325203,"line_start":191,"line_end":191,"column_start":1,"column_end":76}},{"value":"/ return them in random order (fully shuffled).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":325204,"byte_end":325253,"line_start":192,"line_end":192,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":325254,"byte_end":325257,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ This method is used internally by the slice sampling methods, but it can","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":325258,"byte_end":325334,"line_start":194,"line_end":194,"column_start":1,"column_end":77}},{"value":"/ sometimes be useful to have the indices themselves so this is provided as","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":325335,"byte_end":325412,"line_start":195,"line_end":195,"column_start":1,"column_end":78}},{"value":"/ an alternative.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":325413,"byte_end":325432,"line_start":196,"line_end":196,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":325433,"byte_end":325436,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ The implementation used is not specified; we automatically select the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":325437,"byte_end":325510,"line_start":198,"line_end":198,"column_start":1,"column_end":74}},{"value":"/ fastest available algorithm for the `length` and `amount` parameters","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":325511,"byte_end":325583,"line_start":199,"line_end":199,"column_start":1,"column_end":73}},{"value":"/ (based on detailed profiling on an Intel Haswell CPU). Roughly speaking,","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":325584,"byte_end":325660,"line_start":200,"line_end":200,"column_start":1,"column_end":77}},{"value":"/ complexity is `O(amount)`, except that when `amount` is small, performance","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":325661,"byte_end":325739,"line_start":201,"line_end":201,"column_start":1,"column_end":79}},{"value":"/ is closer to `O(amount^2)`, and when `length` is close to `amount` then","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":325740,"byte_end":325815,"line_start":202,"line_end":202,"column_start":1,"column_end":76}},{"value":"/ `O(length)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":325816,"byte_end":325832,"line_start":203,"line_end":203,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":325833,"byte_end":325836,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ Note that performance is significantly better over `u32` indices than over","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":325837,"byte_end":325915,"line_start":205,"line_end":205,"column_start":1,"column_end":79}},{"value":"/ `u64` indices. Because of this we hide the underlying type behind an","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":325916,"byte_end":325988,"line_start":206,"line_end":206,"column_start":1,"column_end":73}},{"value":"/ abstraction, `IndexVec`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":325989,"byte_end":326017,"line_start":207,"line_end":207,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":326018,"byte_end":326021,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ If an allocation-free `no_std` function is required, it is suggested","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":326022,"byte_end":326094,"line_start":209,"line_end":209,"column_start":1,"column_end":73}},{"value":"/ to adapt the internal `sample_floyd` implementation.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":326095,"byte_end":326151,"line_start":210,"line_end":210,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":326152,"byte_end":326155,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ Panics if `amount > length`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":326156,"byte_end":326188,"line_start":212,"line_end":212,"column_start":1,"column_end":33}}]},{"kind":"Trait","id":{"krate":0,"index":812},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293375,"byte_end":293386,"line_start":59,"line_end":59,"column_start":11,"column_end":22},"name":"SliceRandom","qualname":"::seq::SliceRandom","value":"SliceRandom","parent":null,"children":[{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":816},{"krate":0,"index":818},{"krate":0,"index":820},{"krate":0,"index":826},{"krate":0,"index":832},{"krate":0,"index":834}],"decl_id":null,"docs":" Extension trait on slices, providing random mutation and sampling methods.","sig":null,"attributes":[{"value":"/ Extension trait on slices, providing random mutation and sampling methods.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":292751,"byte_end":292829,"line_start":39,"line_end":39,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":292830,"byte_end":292833,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented on all `[T]` slice types, providing several","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":292834,"byte_end":292907,"line_start":41,"line_end":41,"column_start":1,"column_end":74}},{"value":"/ methods for choosing and shuffling elements. You must `use` this trait:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":292908,"byte_end":292983,"line_start":42,"line_end":42,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":292984,"byte_end":292987,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":292988,"byte_end":292995,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":292996,"byte_end":293027,"line_start":45,"line_end":45,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293028,"byte_end":293031,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293032,"byte_end":293047,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"/     let mut rng = rand::thread_rng();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293048,"byte_end":293089,"line_start":48,"line_end":48,"column_start":1,"column_end":42}},{"value":"/     let mut bytes = \"Hello, random!\".to_string().into_bytes();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293090,"byte_end":293156,"line_start":49,"line_end":49,"column_start":1,"column_end":67}},{"value":"/     bytes.shuffle(&mut rng);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293157,"byte_end":293189,"line_start":50,"line_end":50,"column_start":1,"column_end":33}},{"value":"/     let str = String::from_utf8(bytes).unwrap();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293190,"byte_end":293242,"line_start":51,"line_end":51,"column_start":1,"column_end":53}},{"value":"/     println!(\"{}\", str);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293243,"byte_end":293271,"line_start":52,"line_end":52,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293272,"byte_end":293277,"line_start":53,"line_end":53,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293278,"byte_end":293285,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ Example output (non-deterministic):","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293286,"byte_end":293325,"line_start":55,"line_end":55,"column_start":1,"column_end":40}},{"value":"/ ```none","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293326,"byte_end":293337,"line_start":56,"line_end":56,"column_start":1,"column_end":12}},{"value":"/ l,nmroHado !le","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293338,"byte_end":293356,"line_start":57,"line_end":57,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293357,"byte_end":293364,"line_start":58,"line_end":58,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":813},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293424,"byte_end":293428,"line_start":61,"line_end":61,"column_start":10,"column_end":14},"name":"Item","qualname":"::seq::SliceRandom::Item","value":"type Item;","parent":{"krate":0,"index":812},"children":[],"decl_id":null,"docs":" The element type.\n","sig":null,"attributes":[{"value":"/ The element type.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293393,"byte_end":293414,"line_start":60,"line_end":60,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293914,"byte_end":293920,"line_start":79,"line_end":79,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::SliceRandom::choose","value":"fn <R> (&self, rng: &mut R) -> Option<&Self::Item>","parent":{"krate":0,"index":812},"children":[],"decl_id":null,"docs":" Returns a reference to one random element of the slice, or `None` if the\n slice is empty.","sig":null,"attributes":[{"value":"/ Returns a reference to one random element of the slice, or `None` if the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293435,"byte_end":293511,"line_start":63,"line_end":63,"column_start":5,"column_end":81}},{"value":"/ slice is empty.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293516,"byte_end":293535,"line_start":64,"line_end":64,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293540,"byte_end":293543,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(1)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293548,"byte_end":293585,"line_start":66,"line_end":66,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293590,"byte_end":293593,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293598,"byte_end":293611,"line_start":68,"line_end":68,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293616,"byte_end":293619,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293624,"byte_end":293631,"line_start":70,"line_end":70,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293636,"byte_end":293661,"line_start":71,"line_end":71,"column_start":5,"column_end":30}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293666,"byte_end":293697,"line_start":72,"line_end":72,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293702,"byte_end":293705,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ let choices = [1, 2, 4, 8, 16, 32];","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293710,"byte_end":293749,"line_start":74,"line_end":74,"column_start":5,"column_end":44}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293754,"byte_end":293785,"line_start":75,"line_end":75,"column_start":5,"column_end":36}},{"value":"/ println!(\"{:?}\", choices.choose(&mut rng));","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293790,"byte_end":293837,"line_start":76,"line_end":76,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(choices[..0].choose(&mut rng), None);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293842,"byte_end":293894,"line_start":77,"line_end":77,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293899,"byte_end":293906,"line_start":78,"line_end":78,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294165,"byte_end":294175,"line_start":86,"line_end":86,"column_start":8,"column_end":18},"name":"choose_mut","qualname":"::seq::SliceRandom::choose_mut","value":"fn <R> (&mut self, rng: &mut R) -> Option<&mut Self::Item>","parent":{"krate":0,"index":812},"children":[],"decl_id":null,"docs":" Returns a mutable reference to one random element of the slice, or\n `None` if the slice is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to one random element of the slice, or","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":293999,"byte_end":294069,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/ `None` if the slice is empty.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294074,"byte_end":294107,"line_start":83,"line_end":83,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294112,"byte_end":294115,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(1)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294120,"byte_end":294157,"line_start":85,"line_end":85,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295210,"byte_end":295225,"line_start":114,"line_end":114,"column_start":8,"column_end":23},"name":"choose_multiple","qualname":"::seq::SliceRandom::choose_multiple","value":"fn <R> (&self, rng: &mut R, amount: usize) -> SliceChooseIter<Self, Self::Item>","parent":{"krate":0,"index":812},"children":[],"decl_id":null,"docs":" Chooses `amount` elements from the slice at random, without repetition,\n and in random order. The returned iterator is appropriate both for\n collection into a `Vec` and filling an existing buffer (see example).","sig":null,"attributes":[{"value":"/ Chooses `amount` elements from the slice at random, without repetition,","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294262,"byte_end":294337,"line_start":89,"line_end":89,"column_start":5,"column_end":80}},{"value":"/ and in random order. The returned iterator is appropriate both for","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294342,"byte_end":294412,"line_start":90,"line_end":90,"column_start":5,"column_end":75}},{"value":"/ collection into a `Vec` and filling an existing buffer (see example).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294417,"byte_end":294490,"line_start":91,"line_end":91,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294495,"byte_end":294498,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ In case this API is not sufficiently flexible, use [`index::sample`].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294503,"byte_end":294576,"line_start":93,"line_end":93,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294581,"byte_end":294584,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is the same as [`index::sample`].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294589,"byte_end":294649,"line_start":95,"line_end":95,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294654,"byte_end":294657,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294662,"byte_end":294675,"line_start":97,"line_end":97,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294680,"byte_end":294687,"line_start":98,"line_end":98,"column_start":5,"column_end":12}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294692,"byte_end":294723,"line_start":99,"line_end":99,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294728,"byte_end":294731,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ let mut rng = &mut rand::thread_rng();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294736,"byte_end":294778,"line_start":101,"line_end":101,"column_start":5,"column_end":47}},{"value":"/ let sample = \"Hello, audience!\".as_bytes();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294783,"byte_end":294830,"line_start":102,"line_end":102,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294835,"byte_end":294838,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ // collect the results into a vector:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294843,"byte_end":294884,"line_start":104,"line_end":104,"column_start":5,"column_end":46}},{"value":"/ let v: Vec<u8> = sample.choose_multiple(&mut rng, 3).cloned().collect();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294889,"byte_end":294965,"line_start":105,"line_end":105,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294970,"byte_end":294973,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ // store in a buffer:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":294978,"byte_end":295003,"line_start":107,"line_end":107,"column_start":5,"column_end":30}},{"value":"/ let mut buf = [0u8; 5];","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295008,"byte_end":295035,"line_start":108,"line_end":108,"column_start":5,"column_end":32}},{"value":"/ for (b, slot) in sample.choose_multiple(&mut rng, buf.len()).zip(buf.iter_mut()) {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295040,"byte_end":295126,"line_start":109,"line_end":109,"column_start":5,"column_end":91}},{"value":"/     *slot = *b;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295131,"byte_end":295150,"line_start":110,"line_end":110,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295155,"byte_end":295160,"line_start":111,"line_end":111,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295165,"byte_end":295172,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295177,"byte_end":295202,"line_start":113,"line_end":113,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":296367,"byte_end":296382,"line_start":141,"line_end":141,"column_start":8,"column_end":23},"name":"choose_weighted","qualname":"::seq::SliceRandom::choose_weighted","value":"fn <R, F, B, X> (&self, rng: &mut R, weight: F) -> Result<&Self::Item, WeightedError>","parent":{"krate":0,"index":812},"children":[],"decl_id":null,"docs":" Similar to [`choose`], but where the likelihood of each outcome may be\n specified.","sig":null,"attributes":[{"value":"/ Similar to [`choose`], but where the likelihood of each outcome may be","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295333,"byte_end":295407,"line_start":117,"line_end":117,"column_start":5,"column_end":79}},{"value":"/ specified.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295412,"byte_end":295426,"line_start":118,"line_end":118,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295431,"byte_end":295434,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ The specified function `weight` maps each item `x` to a relative","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295439,"byte_end":295507,"line_start":120,"line_end":120,"column_start":5,"column_end":73}},{"value":"/ likelihood `weight(x)`. The probability of each item being selected is","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295512,"byte_end":295586,"line_start":121,"line_end":121,"column_start":5,"column_end":79}},{"value":"/ therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295591,"byte_end":295662,"line_start":122,"line_end":122,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295667,"byte_end":295670,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295675,"byte_end":295726,"line_start":124,"line_end":124,"column_start":5,"column_end":56}},{"value":"/ See also [`choose_weighted_mut`], [`distributions::weighted`].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295731,"byte_end":295797,"line_start":125,"line_end":125,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295802,"byte_end":295805,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295810,"byte_end":295823,"line_start":127,"line_end":127,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295828,"byte_end":295831,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295836,"byte_end":295843,"line_start":129,"line_end":129,"column_start":5,"column_end":12}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295848,"byte_end":295873,"line_start":130,"line_end":130,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295878,"byte_end":295881,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ let choices = [('a', 2), ('b', 1), ('c', 1)];","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295886,"byte_end":295935,"line_start":132,"line_end":132,"column_start":5,"column_end":54}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295940,"byte_end":295971,"line_start":133,"line_end":133,"column_start":5,"column_end":36}},{"value":"/ // 50% chance to print 'a', 25% chance to print 'b', 25% chance to print 'c'","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":295976,"byte_end":296056,"line_start":134,"line_end":134,"column_start":5,"column_end":85}},{"value":"/ println!(\"{:?}\", choices.choose_weighted(&mut rng, |item| item.1).unwrap().0);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":296061,"byte_end":296143,"line_start":135,"line_end":135,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":296148,"byte_end":296155,"line_start":136,"line_end":136,"column_start":5,"column_end":12}},{"value":"/ [`choose`]: SliceRandom::choose","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":296160,"byte_end":296195,"line_start":137,"line_end":137,"column_start":5,"column_end":40}},{"value":"/ [`choose_weighted_mut`]: SliceRandom::choose_weighted_mut","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":296200,"byte_end":296261,"line_start":138,"line_end":138,"column_start":5,"column_end":66}},{"value":"/ [`distributions::weighted`]: crate::distributions::weighted","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":296266,"byte_end":296329,"line_start":139,"line_end":139,"column_start":5,"column_end":68}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":296334,"byte_end":296359,"line_start":140,"line_end":140,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":297425,"byte_end":297444,"line_start":168,"line_end":168,"column_start":8,"column_end":27},"name":"choose_weighted_mut","qualname":"::seq::SliceRandom::choose_weighted_mut","value":"fn <R, F, B, X> (&mut self, rng: &mut R, weight: F) -> Result<&mut Self::Item, WeightedError>","parent":{"krate":0,"index":812},"children":[],"decl_id":null,"docs":" Similar to [`choose_mut`], but where the likelihood of each outcome may\n be specified.","sig":null,"attributes":[{"value":"/ Similar to [`choose_mut`], but where the likelihood of each outcome may","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":296741,"byte_end":296816,"line_start":154,"line_end":154,"column_start":5,"column_end":80}},{"value":"/ be specified.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":296821,"byte_end":296838,"line_start":155,"line_end":155,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":296843,"byte_end":296846,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ The specified function `weight` maps each item `x` to a relative","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":296851,"byte_end":296919,"line_start":157,"line_end":157,"column_start":5,"column_end":73}},{"value":"/ likelihood `weight(x)`. The probability of each item being selected is","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":296924,"byte_end":296998,"line_start":158,"line_end":158,"column_start":5,"column_end":79}},{"value":"/ therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":297003,"byte_end":297074,"line_start":159,"line_end":159,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":297079,"byte_end":297082,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":297087,"byte_end":297138,"line_start":161,"line_end":161,"column_start":5,"column_end":56}},{"value":"/ See also [`choose_weighted`], [`distributions::weighted`].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":297143,"byte_end":297205,"line_start":162,"line_end":162,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":297210,"byte_end":297213,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ [`choose_mut`]: SliceRandom::choose_mut","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":297218,"byte_end":297261,"line_start":164,"line_end":164,"column_start":5,"column_end":48}},{"value":"/ [`choose_weighted`]: SliceRandom::choose_weighted","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":297266,"byte_end":297319,"line_start":165,"line_end":165,"column_start":5,"column_end":58}},{"value":"/ [`distributions::weighted`]: crate::distributions::weighted","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":297324,"byte_end":297387,"line_start":166,"line_end":166,"column_start":5,"column_end":68}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":297392,"byte_end":297417,"line_start":167,"line_end":167,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298236,"byte_end":298243,"line_start":197,"line_end":197,"column_start":8,"column_end":15},"name":"shuffle","qualname":"::seq::SliceRandom::shuffle","value":"fn <R> (&mut self, rng: &mut R) -> ()","parent":{"krate":0,"index":812},"children":[],"decl_id":null,"docs":" Shuffle a mutable slice in place.","sig":null,"attributes":[{"value":"/ Shuffle a mutable slice in place.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":297811,"byte_end":297848,"line_start":181,"line_end":181,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":297853,"byte_end":297856,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":297861,"byte_end":297912,"line_start":183,"line_end":183,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":297917,"byte_end":297920,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":297925,"byte_end":297938,"line_start":185,"line_end":185,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":297943,"byte_end":297946,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":297951,"byte_end":297958,"line_start":187,"line_end":187,"column_start":5,"column_end":12}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":297963,"byte_end":297994,"line_start":188,"line_end":188,"column_start":5,"column_end":36}},{"value":"/ use rand::thread_rng;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":297999,"byte_end":298024,"line_start":189,"line_end":189,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298029,"byte_end":298032,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298037,"byte_end":298068,"line_start":191,"line_end":191,"column_start":5,"column_end":36}},{"value":"/ let mut y = [1, 2, 3, 4, 5];","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298073,"byte_end":298105,"line_start":192,"line_end":192,"column_start":5,"column_end":37}},{"value":"/ println!(\"Unshuffled: {:?}\", y);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298110,"byte_end":298146,"line_start":193,"line_end":193,"column_start":5,"column_end":41}},{"value":"/ y.shuffle(&mut rng);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298151,"byte_end":298175,"line_start":194,"line_end":194,"column_start":5,"column_end":29}},{"value":"/ println!(\"Shuffled:   {:?}\", y);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298180,"byte_end":298216,"line_start":195,"line_end":195,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298221,"byte_end":298228,"line_start":196,"line_end":196,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299108,"byte_end":299123,"line_start":217,"line_end":217,"column_start":8,"column_end":23},"name":"partial_shuffle","qualname":"::seq::SliceRandom::partial_shuffle","value":"fn <R> (&mut self, rng: &mut R, amount: usize) -> (&mut [Self::Item], &mut [Self::Item])","parent":{"krate":0,"index":812},"children":[],"decl_id":null,"docs":" Shuffle a slice in place, but exit early.","sig":null,"attributes":[{"value":"/ Shuffle a slice in place, but exit early.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298303,"byte_end":298348,"line_start":200,"line_end":200,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298353,"byte_end":298356,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ Returns two mutable slices from the source slice. The first contains","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298361,"byte_end":298433,"line_start":202,"line_end":202,"column_start":5,"column_end":77}},{"value":"/ `amount` elements randomly permuted. The second has the remaining","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298438,"byte_end":298507,"line_start":203,"line_end":203,"column_start":5,"column_end":74}},{"value":"/ elements that are not fully shuffled.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298512,"byte_end":298553,"line_start":204,"line_end":204,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298558,"byte_end":298561,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ This is an efficient method to select `amount` elements at random from","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298566,"byte_end":298640,"line_start":206,"line_end":206,"column_start":5,"column_end":79}},{"value":"/ the slice, provided the slice may be mutated.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298645,"byte_end":298694,"line_start":207,"line_end":207,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298699,"byte_end":298702,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ If you only need to choose elements randomly and `amount > self.len()/2`","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298707,"byte_end":298783,"line_start":209,"line_end":209,"column_start":5,"column_end":81}},{"value":"/ then you may improve performance by taking","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298788,"byte_end":298834,"line_start":210,"line_end":210,"column_start":5,"column_end":51}},{"value":"/ `amount = values.len() - amount` and using only the second slice.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298839,"byte_end":298908,"line_start":211,"line_end":211,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298913,"byte_end":298916,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ If `amount` is greater than the number of elements in the slice, this","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298921,"byte_end":298994,"line_start":213,"line_end":213,"column_start":5,"column_end":78}},{"value":"/ will perform a full shuffle.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":298999,"byte_end":299031,"line_start":214,"line_end":214,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299036,"byte_end":299039,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(m)` where `m = amount`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299044,"byte_end":299100,"line_start":216,"line_end":216,"column_start":5,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":836},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299800,"byte_end":299814,"line_start":242,"line_end":242,"column_start":11,"column_end":25},"name":"IteratorRandom","qualname":"::seq::IteratorRandom","value":"IteratorRandom: Iterator + Sized","parent":null,"children":[{"krate":0,"index":837},{"krate":0,"index":839},{"krate":0,"index":841}],"decl_id":null,"docs":" Extension trait on iterators, providing random sampling methods.","sig":null,"attributes":[{"value":"/ Extension trait on iterators, providing random sampling methods.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299253,"byte_end":299321,"line_start":223,"line_end":223,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299322,"byte_end":299325,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented on all sized iterators, providing methods for","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299326,"byte_end":299401,"line_start":225,"line_end":225,"column_start":1,"column_end":76}},{"value":"/ choosing one or more elements. You must `use` this trait:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299402,"byte_end":299463,"line_start":226,"line_end":226,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299464,"byte_end":299467,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299468,"byte_end":299475,"line_start":228,"line_end":228,"column_start":1,"column_end":8}},{"value":"/ use rand::seq::IteratorRandom;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299476,"byte_end":299510,"line_start":229,"line_end":229,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299511,"byte_end":299514,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299515,"byte_end":299530,"line_start":231,"line_end":231,"column_start":1,"column_end":16}},{"value":"/     let mut rng = rand::thread_rng();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299531,"byte_end":299572,"line_start":232,"line_end":232,"column_start":1,"column_end":42}},{"value":"/     ","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299573,"byte_end":299581,"line_start":233,"line_end":233,"column_start":1,"column_end":9}},{"value":"/     let faces = \"😀😎😐😕😠😢\";","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299582,"byte_end":299629,"line_start":234,"line_end":234,"column_start":1,"column_end":30}},{"value":"/     println!(\"I am {}!\", faces.chars().choose(&mut rng).unwrap());","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299630,"byte_end":299700,"line_start":235,"line_end":235,"column_start":1,"column_end":71}},{"value":"/ }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299701,"byte_end":299706,"line_start":236,"line_end":236,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299707,"byte_end":299714,"line_start":237,"line_end":237,"column_start":1,"column_end":8}},{"value":"/ Example output (non-deterministic):","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299715,"byte_end":299754,"line_start":238,"line_end":238,"column_start":1,"column_end":40}},{"value":"/ ```none","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299755,"byte_end":299766,"line_start":239,"line_end":239,"column_start":1,"column_end":12}},{"value":"/ I am 😀!","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299767,"byte_end":299781,"line_start":240,"line_end":240,"column_start":1,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299782,"byte_end":299789,"line_start":241,"line_end":241,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":300447,"byte_end":300453,"line_start":255,"line_end":255,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::IteratorRandom::choose","value":"fn <R> (mut self, rng: &mut R) -> Option<Self::Item>","parent":{"krate":0,"index":836},"children":[],"decl_id":null,"docs":" Choose one element at random from the iterator.","sig":null,"attributes":[{"value":"/ Choose one element at random from the iterator.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299839,"byte_end":299890,"line_start":243,"line_end":243,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299895,"byte_end":299898,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if and only if the iterator is empty.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299903,"byte_end":299959,"line_start":245,"line_end":245,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299964,"byte_end":299967,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ This method uses [`Iterator::size_hint`] for optimisation. With an","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299972,"byte_end":300042,"line_start":247,"line_end":247,"column_start":5,"column_end":75}},{"value":"/ accurate hint and where [`Iterator::nth`] is a constant-time operation","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":300047,"byte_end":300121,"line_start":248,"line_end":248,"column_start":5,"column_end":79}},{"value":"/ this method can offer `O(1)` performance. Where no size hint is","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":300126,"byte_end":300193,"line_start":249,"line_end":249,"column_start":5,"column_end":72}},{"value":"/ available, complexity is `O(n)` where `n` is the iterator length.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":300198,"byte_end":300267,"line_start":250,"line_end":250,"column_start":5,"column_end":74}},{"value":"/ Partial hints (where `lower > 0`) also improve performance.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":300272,"byte_end":300335,"line_start":251,"line_end":251,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":300340,"byte_end":300343,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ For slices, prefer [`SliceRandom::choose`] which guarantees `O(1)`","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":300348,"byte_end":300418,"line_start":253,"line_end":253,"column_start":5,"column_end":75}},{"value":"/ performance.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":300423,"byte_end":300439,"line_start":254,"line_end":254,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":302571,"byte_end":302591,"line_start":317,"line_end":317,"column_start":8,"column_end":28},"name":"choose_multiple_fill","qualname":"::seq::IteratorRandom::choose_multiple_fill","value":"fn <R> (mut self, rng: &mut R, buf: &mut [Self::Item]) -> usize","parent":{"krate":0,"index":836},"children":[],"decl_id":null,"docs":" Collects values at random from the iterator into a supplied buffer\n until that buffer is filled.","sig":null,"attributes":[{"value":"/ Collects values at random from the iterator into a supplied buffer","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":301884,"byte_end":301954,"line_start":304,"line_end":304,"column_start":5,"column_end":75}},{"value":"/ until that buffer is filled.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":301959,"byte_end":301991,"line_start":305,"line_end":305,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":301996,"byte_end":301999,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ Although the elements are selected randomly, the order of elements in","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":302004,"byte_end":302077,"line_start":307,"line_end":307,"column_start":5,"column_end":78}},{"value":"/ the buffer is neither stable nor fully random. If random ordering is","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":302082,"byte_end":302154,"line_start":308,"line_end":308,"column_start":5,"column_end":77}},{"value":"/ desired, shuffle the result.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":302159,"byte_end":302191,"line_start":309,"line_end":309,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":302196,"byte_end":302199,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ Returns the number of elements added to the buffer. This equals the length","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":302204,"byte_end":302282,"line_start":311,"line_end":311,"column_start":5,"column_end":83}},{"value":"/ of the buffer unless the iterator contains insufficient elements, in which","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":302287,"byte_end":302365,"line_start":312,"line_end":312,"column_start":5,"column_end":83}},{"value":"/ case this equals the number of elements available.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":302370,"byte_end":302424,"line_start":313,"line_end":313,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":302429,"byte_end":302432,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ Complexity is `O(n)` where `n` is the length of the iterator.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":302437,"byte_end":302502,"line_start":315,"line_end":315,"column_start":5,"column_end":70}},{"value":"/ For slices, prefer [`SliceRandom::choose_multiple`].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":302507,"byte_end":302563,"line_start":316,"line_end":316,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":841},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":304003,"byte_end":304018,"line_start":356,"line_end":356,"column_start":8,"column_end":23},"name":"choose_multiple","qualname":"::seq::IteratorRandom::choose_multiple","value":"fn <R> (mut self, rng: &mut R, amount: usize) -> Vec<Self::Item>","parent":{"krate":0,"index":836},"children":[],"decl_id":null,"docs":" Collects `amount` values at random from the iterator into a vector.","sig":null,"attributes":[{"value":"/ Collects `amount` values at random from the iterator into a vector.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":303274,"byte_end":303345,"line_start":341,"line_end":341,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":303350,"byte_end":303353,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to `choose_multiple_fill` except for the result type.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":303358,"byte_end":303434,"line_start":343,"line_end":343,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":303439,"byte_end":303442,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ Although the elements are selected randomly, the order of elements in","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":303447,"byte_end":303520,"line_start":345,"line_end":345,"column_start":5,"column_end":78}},{"value":"/ the buffer is neither stable nor fully random. If random ordering is","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":303525,"byte_end":303597,"line_start":346,"line_end":346,"column_start":5,"column_end":77}},{"value":"/ desired, shuffle the result.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":303602,"byte_end":303634,"line_start":347,"line_end":347,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":303639,"byte_end":303642,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ The length of the returned vector equals `amount` unless the iterator","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":303647,"byte_end":303720,"line_start":349,"line_end":349,"column_start":5,"column_end":78}},{"value":"/ contains insufficient elements, in which case it equals the number of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":303725,"byte_end":303798,"line_start":350,"line_end":350,"column_start":5,"column_end":78}},{"value":"/ elements available.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":303803,"byte_end":303826,"line_start":351,"line_end":351,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":303831,"byte_end":303834,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ Complexity is `O(n)` where `n` is the length of the iterator.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":303839,"byte_end":303904,"line_start":353,"line_end":353,"column_start":5,"column_end":70}},{"value":"/ For slices, prefer [`SliceRandom::choose_multiple`].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":303909,"byte_end":303965,"line_start":354,"line_end":354,"column_start":5,"column_end":61}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":303970,"byte_end":303995,"line_start":355,"line_end":355,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":2082},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":308325,"byte_end":308340,"line_start":491,"line_end":491,"column_start":12,"column_end":27},"name":"SliceChooseIter","qualname":"::seq::SliceChooseIter","value":"SliceChooseIter {  }","parent":null,"children":[{"krate":0,"index":2086},{"krate":0,"index":2087},{"krate":0,"index":2088}],"decl_id":null,"docs":" An iterator over multiple slice elements.","sig":null,"attributes":[{"value":"/ An iterator over multiple slice elements.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":308104,"byte_end":308149,"line_start":485,"line_end":485,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":308150,"byte_end":308153,"line_start":486,"line_end":486,"column_start":1,"column_end":4}},{"value":"/ This struct is created by","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":308154,"byte_end":308183,"line_start":487,"line_end":487,"column_start":1,"column_end":30}},{"value":"/ [`SliceRandom::choose_multiple`](trait.SliceRandom.html#tymethod.choose_multiple).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":308184,"byte_end":308270,"line_start":488,"line_end":488,"column_start":1,"column_end":87}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":308271,"byte_end":308296,"line_start":489,"line_end":489,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":902},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4743,"byte_end":4746,"line_start":147,"line_end":147,"column_start":11,"column_end":14},"name":"Rng","qualname":"::Rng","value":"Rng: RngCore","parent":null,"children":[{"krate":0,"index":903},{"krate":0,"index":905},{"krate":0,"index":909},{"krate":0,"index":912},{"krate":0,"index":915},{"krate":0,"index":917},{"krate":0,"index":919},{"krate":0,"index":920}],"decl_id":null,"docs":" An automatically-implemented extension trait on [`RngCore`] providing high-level\n generic methods for sampling values and other convenience methods.","sig":null,"attributes":[{"value":"/ An automatically-implemented extension trait on [`RngCore`] providing high-level","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":3215,"byte_end":3299,"line_start":110,"line_end":110,"column_start":1,"column_end":85}},{"value":"/ generic methods for sampling values and other convenience methods.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":3300,"byte_end":3370,"line_start":111,"line_end":111,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":3371,"byte_end":3374,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ This is the primary trait to use when generating random values.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":3375,"byte_end":3442,"line_start":113,"line_end":113,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":3443,"byte_end":3446,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ # Generic usage","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":3447,"byte_end":3466,"line_start":115,"line_end":115,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":3467,"byte_end":3470,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ The basic pattern is `fn foo<R: Rng + ?Sized>(rng: &mut R)`. Some","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":3471,"byte_end":3541,"line_start":117,"line_end":117,"column_start":1,"column_end":70}},{"value":"/ things are worth noting here:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":3542,"byte_end":3575,"line_start":118,"line_end":118,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":3576,"byte_end":3579,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ - Since `Rng: RngCore` and every `RngCore` implements `Rng`, it makes no","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":3580,"byte_end":3656,"line_start":120,"line_end":120,"column_start":1,"column_end":77}},{"value":"/   difference whether we use `R: Rng` or `R: RngCore`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":3657,"byte_end":3714,"line_start":121,"line_end":121,"column_start":1,"column_end":58}},{"value":"/ - The `+ ?Sized` un-bounding allows functions to be called directly on","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":3715,"byte_end":3789,"line_start":122,"line_end":122,"column_start":1,"column_end":75}},{"value":"/   type-erased references; i.e. `foo(r)` where `r: &mut RngCore`. Without","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":3790,"byte_end":3866,"line_start":123,"line_end":123,"column_start":1,"column_end":77}},{"value":"/   this it would be necessary to write `foo(&mut r)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":3867,"byte_end":3923,"line_start":124,"line_end":124,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":3924,"byte_end":3927,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ An alternative pattern is possible: `fn foo<R: Rng>(rng: R)`. This has some","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":3928,"byte_end":4007,"line_start":126,"line_end":126,"column_start":1,"column_end":80}},{"value":"/ trade-offs. It allows the argument to be consumed directly without a `&mut`","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4008,"byte_end":4087,"line_start":127,"line_end":127,"column_start":1,"column_end":80}},{"value":"/ (which is how `from_rng(thread_rng())` works); also it still works directly","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4088,"byte_end":4167,"line_start":128,"line_end":128,"column_start":1,"column_end":80}},{"value":"/ on references (including type-erased references). Unfortunately within the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4168,"byte_end":4246,"line_start":129,"line_end":129,"column_start":1,"column_end":79}},{"value":"/ function `foo` it is not known whether `rng` is a reference type or not,","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4247,"byte_end":4323,"line_start":130,"line_end":130,"column_start":1,"column_end":77}},{"value":"/ hence many uses of `rng` require an extra reference, either explicitly","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4324,"byte_end":4398,"line_start":131,"line_end":131,"column_start":1,"column_end":75}},{"value":"/ (`distr.sample(&mut rng)`) or implicitly (`rng.gen()`); one may hope the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4399,"byte_end":4475,"line_start":132,"line_end":132,"column_start":1,"column_end":77}},{"value":"/ optimiser can remove redundant references later.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4476,"byte_end":4528,"line_start":133,"line_end":133,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4529,"byte_end":4532,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4533,"byte_end":4545,"line_start":135,"line_end":135,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4546,"byte_end":4549,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4550,"byte_end":4557,"line_start":137,"line_end":137,"column_start":1,"column_end":8}},{"value":"/ # use rand::thread_rng;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4558,"byte_end":4585,"line_start":138,"line_end":138,"column_start":1,"column_end":28}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4586,"byte_end":4604,"line_start":139,"line_end":139,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4605,"byte_end":4608,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ fn foo<R: Rng + ?Sized>(rng: &mut R) -> f32 {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4609,"byte_end":4658,"line_start":141,"line_end":141,"column_start":1,"column_end":50}},{"value":"/     rng.gen()","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4659,"byte_end":4676,"line_start":142,"line_end":142,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4677,"byte_end":4682,"line_start":143,"line_end":143,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4683,"byte_end":4686,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ # let v = foo(&mut thread_rng());","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4687,"byte_end":4724,"line_start":145,"line_end":145,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4725,"byte_end":4732,"line_start":146,"line_end":146,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5896,"byte_end":5899,"line_start":183,"line_end":183,"column_start":8,"column_end":11},"name":"gen","qualname":"::Rng::gen","value":"fn <T> (&mut self) -> T","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Return a random value supporting the [`Standard`] distribution.","sig":null,"attributes":[{"value":"/ Return a random value supporting the [`Standard`] distribution.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4762,"byte_end":4829,"line_start":148,"line_end":148,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4834,"byte_end":4837,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4842,"byte_end":4855,"line_start":150,"line_end":150,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4860,"byte_end":4863,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4868,"byte_end":4875,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4880,"byte_end":4912,"line_start":153,"line_end":153,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4917,"byte_end":4920,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4925,"byte_end":4956,"line_start":155,"line_end":155,"column_start":5,"column_end":36}},{"value":"/ let x: u32 = rng.gen();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4961,"byte_end":4988,"line_start":156,"line_end":156,"column_start":5,"column_end":32}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4993,"byte_end":5015,"line_start":157,"line_end":157,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", rng.gen::<(f64, bool)>());","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5020,"byte_end":5067,"line_start":158,"line_end":158,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5072,"byte_end":5079,"line_start":159,"line_end":159,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5084,"byte_end":5087,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ # Arrays and tuples","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5092,"byte_end":5115,"line_start":161,"line_end":161,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5120,"byte_end":5123,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ The `rng.gen()` method is able to generate arrays (up to 32 elements)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5128,"byte_end":5201,"line_start":163,"line_end":163,"column_start":5,"column_end":78}},{"value":"/ and tuples (up to 12 elements), so long as all element types can be","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5206,"byte_end":5277,"line_start":164,"line_end":164,"column_start":5,"column_end":76}},{"value":"/ generated.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5282,"byte_end":5296,"line_start":165,"line_end":165,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5301,"byte_end":5304,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ For arrays of integers, especially for those with small element types","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5309,"byte_end":5382,"line_start":167,"line_end":167,"column_start":5,"column_end":78}},{"value":"/ (< 64 bit), it will likely be faster to instead use [`Rng::fill`].","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5387,"byte_end":5457,"line_start":168,"line_end":168,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5462,"byte_end":5465,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5470,"byte_end":5477,"line_start":170,"line_end":170,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5482,"byte_end":5514,"line_start":171,"line_end":171,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5519,"byte_end":5522,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5527,"byte_end":5558,"line_start":173,"line_end":173,"column_start":5,"column_end":36}},{"value":"/ let tuple: (u8, i32, char) = rng.gen(); // arbitrary tuple support","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5563,"byte_end":5633,"line_start":174,"line_end":174,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5638,"byte_end":5641,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ let arr1: [f32; 32] = rng.gen();        // array construction","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5646,"byte_end":5711,"line_start":176,"line_end":176,"column_start":5,"column_end":70}},{"value":"/ let mut arr2 = [0u8; 128];","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5716,"byte_end":5746,"line_start":177,"line_end":177,"column_start":5,"column_end":35}},{"value":"/ rng.fill(&mut arr2);                    // array fill","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5751,"byte_end":5808,"line_start":178,"line_end":178,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5813,"byte_end":5820,"line_start":179,"line_end":179,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5825,"byte_end":5828,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ [`Standard`]: distributions::Standard","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5833,"byte_end":5874,"line_start":181,"line_end":181,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5879,"byte_end":5888,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6774,"byte_end":6783,"line_start":212,"line_end":212,"column_start":8,"column_end":17},"name":"gen_range","qualname":"::Rng::gen_range","value":"fn <T, B1, B2> (&mut self, low: B1, high: B2) -> T","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Generate a random value in the range [`low`, `high`), i.e. inclusive of\n `low` and exclusive of `high`.","sig":null,"attributes":[{"value":"/ Generate a random value in the range [`low`, `high`), i.e. inclusive of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":5998,"byte_end":6073,"line_start":188,"line_end":188,"column_start":5,"column_end":80}},{"value":"/ `low` and exclusive of `high`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6078,"byte_end":6112,"line_start":189,"line_end":189,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6117,"byte_end":6120,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ This function is optimised for the case that only a single sample is","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6125,"byte_end":6197,"line_start":191,"line_end":191,"column_start":5,"column_end":77}},{"value":"/ made from the given range. See also the [`Uniform`] distribution","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6202,"byte_end":6270,"line_start":192,"line_end":192,"column_start":5,"column_end":73}},{"value":"/ type which may be faster if sampling from the same range repeatedly.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6275,"byte_end":6347,"line_start":193,"line_end":193,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6352,"byte_end":6355,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6360,"byte_end":6372,"line_start":195,"line_end":195,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6377,"byte_end":6380,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ Panics if `low >= high`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6385,"byte_end":6413,"line_start":197,"line_end":197,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6418,"byte_end":6421,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6426,"byte_end":6439,"line_start":199,"line_end":199,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6444,"byte_end":6447,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6452,"byte_end":6459,"line_start":201,"line_end":201,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6464,"byte_end":6496,"line_start":202,"line_end":202,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6501,"byte_end":6504,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6509,"byte_end":6540,"line_start":204,"line_end":204,"column_start":5,"column_end":36}},{"value":"/ let n: u32 = rng.gen_range(0, 10);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6545,"byte_end":6583,"line_start":205,"line_end":205,"column_start":5,"column_end":43}},{"value":"/ println!(\"{}\", n);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6588,"byte_end":6610,"line_start":206,"line_end":206,"column_start":5,"column_end":27}},{"value":"/ let m: f64 = rng.gen_range(-40.0f64, 1.3e5f64);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6615,"byte_end":6666,"line_start":207,"line_end":207,"column_start":5,"column_end":56}},{"value":"/ println!(\"{}\", m);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6671,"byte_end":6693,"line_start":208,"line_end":208,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6698,"byte_end":6705,"line_start":209,"line_end":209,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6710,"byte_end":6713,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ [`Uniform`]: distributions::uniform::Uniform","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6718,"byte_end":6766,"line_start":211,"line_end":211,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7473,"byte_end":7479,"line_start":234,"line_end":234,"column_start":8,"column_end":14},"name":"sample","qualname":"::Rng::sample","value":"fn <T, D> (&mut self, distr: D) -> T","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Sample a new value, using the given distribution.","sig":null,"attributes":[{"value":"/ Sample a new value, using the given distribution.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":6997,"byte_end":7050,"line_start":220,"line_end":220,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7055,"byte_end":7058,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ ### Example","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7063,"byte_end":7078,"line_start":222,"line_end":222,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7083,"byte_end":7086,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7091,"byte_end":7098,"line_start":224,"line_end":224,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7103,"byte_end":7135,"line_start":225,"line_end":225,"column_start":5,"column_end":37}},{"value":"/ use rand::distributions::Uniform;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7140,"byte_end":7177,"line_start":226,"line_end":226,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7182,"byte_end":7185,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7190,"byte_end":7221,"line_start":228,"line_end":228,"column_start":5,"column_end":36}},{"value":"/ let x = rng.sample(Uniform::new(10u32, 15));","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7226,"byte_end":7274,"line_start":229,"line_end":229,"column_start":5,"column_end":53}},{"value":"/ // Type annotation requires two types, the type and distribution; the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7279,"byte_end":7352,"line_start":230,"line_end":230,"column_start":5,"column_end":78}},{"value":"/ // distribution can be inferred.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7357,"byte_end":7393,"line_start":231,"line_end":231,"column_start":5,"column_end":41}},{"value":"/ let y = rng.sample::<u16, _>(Uniform::new(10, 15));","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7398,"byte_end":7453,"line_start":232,"line_end":232,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7458,"byte_end":7465,"line_start":233,"line_end":233,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8793,"byte_end":8804,"line_start":271,"line_end":271,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::Rng::sample_iter","value":"fn <T, D> (self, distr: D) -> distributions::DistIter<D, Self, T>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Create an iterator that generates values using the given distribution.","sig":null,"attributes":[{"value":"/ Create an iterator that generates values using the given distribution.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7569,"byte_end":7643,"line_start":238,"line_end":238,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7648,"byte_end":7651,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ Note that this function takes its arguments by value. This works since","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7656,"byte_end":7730,"line_start":240,"line_end":240,"column_start":5,"column_end":79}},{"value":"/ `(&mut R): Rng where R: Rng` and","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7735,"byte_end":7771,"line_start":241,"line_end":241,"column_start":5,"column_end":41}},{"value":"/ `(&D): Distribution where D: Distribution`,","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7776,"byte_end":7823,"line_start":242,"line_end":242,"column_start":5,"column_end":52}},{"value":"/ however borrowing is not automatic hence `rng.sample_iter(...)` may","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7828,"byte_end":7899,"line_start":243,"line_end":243,"column_start":5,"column_end":76}},{"value":"/ need to be replaced with `(&mut rng).sample_iter(...)`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7904,"byte_end":7963,"line_start":244,"line_end":244,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7968,"byte_end":7971,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7976,"byte_end":7989,"line_start":246,"line_end":246,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":7994,"byte_end":7997,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8002,"byte_end":8009,"line_start":248,"line_end":248,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8014,"byte_end":8046,"line_start":249,"line_end":249,"column_start":5,"column_end":37}},{"value":"/ use rand::distributions::{Alphanumeric, Uniform, Standard};","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8051,"byte_end":8114,"line_start":250,"line_end":250,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8119,"byte_end":8122,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ let rng = thread_rng();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8127,"byte_end":8154,"line_start":252,"line_end":252,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8159,"byte_end":8162,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ // Vec of 16 x f32:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8167,"byte_end":8190,"line_start":254,"line_end":254,"column_start":5,"column_end":28}},{"value":"/ let v: Vec<f32> = rng.sample_iter(Standard).take(16).collect();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8195,"byte_end":8262,"line_start":255,"line_end":255,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8267,"byte_end":8270,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ // String:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8275,"byte_end":8289,"line_start":257,"line_end":257,"column_start":5,"column_end":19}},{"value":"/ let s: String = rng.sample_iter(Alphanumeric).take(7).collect();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8294,"byte_end":8362,"line_start":258,"line_end":258,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8367,"byte_end":8370,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ // Combined values","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8375,"byte_end":8397,"line_start":260,"line_end":260,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", rng.sample_iter(Standard).take(5)","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8402,"byte_end":8456,"line_start":261,"line_end":261,"column_start":5,"column_end":59}},{"value":"/                              .collect::<Vec<(f64, bool)>>());","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8461,"byte_end":8526,"line_start":262,"line_end":262,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8531,"byte_end":8534,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ // Dice-rolling:","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8539,"byte_end":8559,"line_start":264,"line_end":264,"column_start":5,"column_end":25}},{"value":"/ let die_range = Uniform::new_inclusive(1, 6);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8564,"byte_end":8613,"line_start":265,"line_end":265,"column_start":5,"column_end":54}},{"value":"/ let mut roll_die = rng.sample_iter(die_range);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8618,"byte_end":8668,"line_start":266,"line_end":266,"column_start":5,"column_end":55}},{"value":"/ while roll_die.next().unwrap() != 6 {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8673,"byte_end":8714,"line_start":267,"line_end":267,"column_start":5,"column_end":46}},{"value":"/     println!(\"Not a 6; rolling again!\");","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8719,"byte_end":8763,"line_start":268,"line_end":268,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8768,"byte_end":8773,"line_start":269,"line_end":269,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8778,"byte_end":8785,"line_start":270,"line_end":270,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9845,"byte_end":9849,"line_start":301,"line_end":301,"column_start":8,"column_end":12},"name":"fill","qualname":"::Rng::fill","value":"fn <T> (&mut self, dest: &mut T) -> ()","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Fill `dest` entirely with random bytes (uniform value distribution),\n where `dest` is any type supporting [`AsByteSliceMut`], namely slices\n and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).","sig":null,"attributes":[{"value":"/ Fill `dest` entirely with random bytes (uniform value distribution),","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":8974,"byte_end":9046,"line_start":279,"line_end":279,"column_start":5,"column_end":77}},{"value":"/ where `dest` is any type supporting [`AsByteSliceMut`], namely slices","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9051,"byte_end":9124,"line_start":280,"line_end":280,"column_start":5,"column_end":78}},{"value":"/ and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9129,"byte_end":9200,"line_start":281,"line_end":281,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9205,"byte_end":9208,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ On big-endian platforms this performs byte-swapping to ensure","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9213,"byte_end":9278,"line_start":283,"line_end":283,"column_start":5,"column_end":70}},{"value":"/ portability of results from reproducible generators.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9283,"byte_end":9339,"line_start":284,"line_end":284,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9344,"byte_end":9347,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ This uses [`fill_bytes`] internally which may handle some RNG errors","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9352,"byte_end":9424,"line_start":286,"line_end":286,"column_start":5,"column_end":77}},{"value":"/ implicitly (e.g. waiting if the OS generator is not ready), but panics","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9429,"byte_end":9503,"line_start":287,"line_end":287,"column_start":5,"column_end":79}},{"value":"/ on other errors. See also [`try_fill`] which returns errors.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9508,"byte_end":9572,"line_start":288,"line_end":288,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9577,"byte_end":9580,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9585,"byte_end":9598,"line_start":290,"line_end":290,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9603,"byte_end":9606,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9611,"byte_end":9618,"line_start":292,"line_end":292,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9623,"byte_end":9655,"line_start":293,"line_end":293,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9660,"byte_end":9663,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ let mut arr = [0i8; 20];","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9668,"byte_end":9696,"line_start":295,"line_end":295,"column_start":5,"column_end":33}},{"value":"/ thread_rng().fill(&mut arr[..]);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9701,"byte_end":9737,"line_start":296,"line_end":296,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9742,"byte_end":9749,"line_start":297,"line_end":297,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9754,"byte_end":9757,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9762,"byte_end":9801,"line_start":299,"line_end":299,"column_start":5,"column_end":44}},{"value":"/ [`try_fill`]: Rng::try_fill","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9806,"byte_end":9837,"line_start":300,"line_end":300,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":917},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10904,"byte_end":10912,"line_start":333,"line_end":333,"column_start":8,"column_end":16},"name":"try_fill","qualname":"::Rng::try_fill","value":"fn <T> (&mut self, dest: &mut T) -> Result<(), Error>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Fill `dest` entirely with random bytes (uniform value distribution),\n where `dest` is any type supporting [`AsByteSliceMut`], namely slices\n and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).","sig":null,"attributes":[{"value":"/ Fill `dest` entirely with random bytes (uniform value distribution),","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":9989,"byte_end":10061,"line_start":306,"line_end":306,"column_start":5,"column_end":77}},{"value":"/ where `dest` is any type supporting [`AsByteSliceMut`], namely slices","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10066,"byte_end":10139,"line_start":307,"line_end":307,"column_start":5,"column_end":78}},{"value":"/ and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10144,"byte_end":10215,"line_start":308,"line_end":308,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10220,"byte_end":10223,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ On big-endian platforms this performs byte-swapping to ensure","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10228,"byte_end":10293,"line_start":310,"line_end":310,"column_start":5,"column_end":70}},{"value":"/ portability of results from reproducible generators.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10298,"byte_end":10354,"line_start":311,"line_end":311,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10359,"byte_end":10362,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ This is identical to [`fill`] except that it uses [`try_fill_bytes`]","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10367,"byte_end":10439,"line_start":313,"line_end":313,"column_start":5,"column_end":77}},{"value":"/ internally and forwards RNG errors.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10444,"byte_end":10483,"line_start":314,"line_end":314,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10488,"byte_end":10491,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10496,"byte_end":10509,"line_start":316,"line_end":316,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10514,"byte_end":10517,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10522,"byte_end":10529,"line_start":318,"line_end":318,"column_start":5,"column_end":12}},{"value":"/ # use rand::Error;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10534,"byte_end":10556,"line_start":319,"line_end":319,"column_start":5,"column_end":27}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10561,"byte_end":10593,"line_start":320,"line_end":320,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10598,"byte_end":10601,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ # fn try_inner() -> Result<(), Error> {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10606,"byte_end":10649,"line_start":322,"line_end":322,"column_start":5,"column_end":48}},{"value":"/ let mut arr = [0u64; 4];","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10654,"byte_end":10682,"line_start":323,"line_end":323,"column_start":5,"column_end":33}},{"value":"/ thread_rng().try_fill(&mut arr[..])?;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10687,"byte_end":10728,"line_start":324,"line_end":324,"column_start":5,"column_end":46}},{"value":"/ # Ok(())","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10733,"byte_end":10745,"line_start":325,"line_end":325,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10750,"byte_end":10757,"line_start":326,"line_end":326,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10762,"byte_end":10765,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ # try_inner().unwrap()","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10770,"byte_end":10796,"line_start":328,"line_end":328,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10801,"byte_end":10808,"line_start":329,"line_end":329,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10813,"byte_end":10816,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10821,"byte_end":10868,"line_start":331,"line_end":331,"column_start":5,"column_end":52}},{"value":"/ [`fill`]: Rng::fill","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":10873,"byte_end":10896,"line_start":332,"line_end":332,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":919},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11624,"byte_end":11632,"line_start":359,"line_end":359,"column_start":8,"column_end":16},"name":"gen_bool","qualname":"::Rng::gen_bool","value":"fn (&mut self, p: f64) -> bool","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Return a bool with a probability `p` of being true.","sig":null,"attributes":[{"value":"/ Return a bool with a probability `p` of being true.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11093,"byte_end":11148,"line_start":339,"line_end":339,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11153,"byte_end":11156,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ See also the [`Bernoulli`] distribution, which may be faster if","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11161,"byte_end":11228,"line_start":341,"line_end":341,"column_start":5,"column_end":72}},{"value":"/ sampling from the same probability repeatedly.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11233,"byte_end":11283,"line_start":342,"line_end":342,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11288,"byte_end":11291,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11296,"byte_end":11309,"line_start":344,"line_end":344,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11314,"byte_end":11317,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11322,"byte_end":11329,"line_start":346,"line_end":346,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11334,"byte_end":11366,"line_start":347,"line_end":347,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11371,"byte_end":11374,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11379,"byte_end":11410,"line_start":349,"line_end":349,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_bool(1.0 / 3.0));","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11415,"byte_end":11459,"line_start":350,"line_end":350,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11464,"byte_end":11471,"line_start":351,"line_end":351,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11476,"byte_end":11479,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11484,"byte_end":11496,"line_start":353,"line_end":353,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11501,"byte_end":11504,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ If `p < 0` or `p > 1`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11509,"byte_end":11535,"line_start":355,"line_end":355,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11540,"byte_end":11543,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ [`Bernoulli`]: distributions::bernoulli::Bernoulli","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11548,"byte_end":11602,"line_start":357,"line_end":357,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11607,"byte_end":11616,"line_start":358,"line_end":358,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12619,"byte_end":12628,"line_start":388,"line_end":388,"column_start":8,"column_end":17},"name":"gen_ratio","qualname":"::Rng::gen_ratio","value":"fn (&mut self, numerator: u32, denominator: u32) -> bool","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Return a bool with a probability of `numerator/denominator` of being\n true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of\n returning true. If `numerator == denominator`, then the returned value\n is guaranteed to be `true`. If `numerator == 0`, then the returned\n value is guaranteed to be `false`.","sig":null,"attributes":[{"value":"/ Return a bool with a probability of `numerator/denominator` of being","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11755,"byte_end":11827,"line_start":364,"line_end":364,"column_start":5,"column_end":77}},{"value":"/ true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11832,"byte_end":11903,"line_start":365,"line_end":365,"column_start":5,"column_end":76}},{"value":"/ returning true. If `numerator == denominator`, then the returned value","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11908,"byte_end":11982,"line_start":366,"line_end":366,"column_start":5,"column_end":79}},{"value":"/ is guaranteed to be `true`. If `numerator == 0`, then the returned","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":11987,"byte_end":12057,"line_start":367,"line_end":367,"column_start":5,"column_end":75}},{"value":"/ value is guaranteed to be `false`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12062,"byte_end":12100,"line_start":368,"line_end":368,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12105,"byte_end":12108,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ See also the [`Bernoulli`] distribution, which may be faster if","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12113,"byte_end":12180,"line_start":370,"line_end":370,"column_start":5,"column_end":72}},{"value":"/ sampling from the same `numerator` and `denominator` repeatedly.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12185,"byte_end":12253,"line_start":371,"line_end":371,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12258,"byte_end":12261,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12266,"byte_end":12278,"line_start":373,"line_end":373,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12283,"byte_end":12286,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ If `denominator == 0` or `numerator > denominator`.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12291,"byte_end":12346,"line_start":375,"line_end":375,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12351,"byte_end":12354,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12359,"byte_end":12372,"line_start":377,"line_end":377,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12377,"byte_end":12380,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12385,"byte_end":12392,"line_start":379,"line_end":379,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12397,"byte_end":12429,"line_start":380,"line_end":380,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12434,"byte_end":12437,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12442,"byte_end":12473,"line_start":382,"line_end":382,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_ratio(2, 3));","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12478,"byte_end":12518,"line_start":383,"line_end":383,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12523,"byte_end":12530,"line_start":384,"line_end":384,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12535,"byte_end":12538,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ [`Bernoulli`]: distributions::bernoulli::Bernoulli","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12543,"byte_end":12597,"line_start":386,"line_end":386,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12602,"byte_end":12611,"line_start":387,"line_end":387,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":923},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12969,"byte_end":12983,"line_start":399,"line_end":399,"column_start":11,"column_end":25},"name":"AsByteSliceMut","qualname":"::AsByteSliceMut","value":"AsByteSliceMut","parent":null,"children":[{"krate":0,"index":924},{"krate":0,"index":925}],"decl_id":null,"docs":" Trait for casting types to byte slices","sig":null,"attributes":[{"value":"/ Trait for casting types to byte slices","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12843,"byte_end":12885,"line_start":396,"line_end":396,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12886,"byte_end":12889,"line_start":397,"line_end":397,"column_start":1,"column_end":4}},{"value":"/ This is used by the [`Rng::fill`] and [`Rng::try_fill`] methods.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12890,"byte_end":12958,"line_start":398,"line_end":398,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":13052,"byte_end":13069,"line_start":401,"line_end":401,"column_start":8,"column_end":25},"name":"as_byte_slice_mut","qualname":"::AsByteSliceMut::as_byte_slice_mut","value":"fn (&mut self) -> &mut [u8]","parent":{"krate":0,"index":923},"children":[],"decl_id":null,"docs":" Return a mutable reference to self as a byte slice\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to self as a byte slice","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12990,"byte_end":13044,"line_start":400,"line_end":400,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":925},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":13182,"byte_end":13187,"line_start":404,"line_end":404,"column_start":8,"column_end":13},"name":"to_le","qualname":"::AsByteSliceMut::to_le","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":923},"children":[],"decl_id":null,"docs":" Call `to_le` on each element (i.e. byte-swap on Big Endian platforms).\n","sig":null,"attributes":[{"value":"/ Call `to_le` on each element (i.e. byte-swap on Big Endian platforms).","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":13100,"byte_end":13174,"line_start":403,"line_end":403,"column_start":5,"column_end":79}}]},{"kind":"Function","id":{"krate":0,"index":931},"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":17346,"byte_end":17352,"line_start":552,"line_end":552,"column_start":8,"column_end":14},"name":"random","qualname":"::random","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Generates a random value using the thread-local random number generator.","sig":null,"attributes":[{"value":"/ Generates a random value using the thread-local random number generator.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16289,"byte_end":16365,"line_start":508,"line_end":508,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16366,"byte_end":16369,"line_start":509,"line_end":509,"column_start":1,"column_end":4}},{"value":"/ This is simply a shortcut for `thread_rng().gen()`. See [`thread_rng`] for","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16370,"byte_end":16448,"line_start":510,"line_end":510,"column_start":1,"column_end":79}},{"value":"/ documentation of the entropy source and [`Standard`] for documentation of","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16449,"byte_end":16526,"line_start":511,"line_end":511,"column_start":1,"column_end":78}},{"value":"/ distributions and type-specific generation.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16527,"byte_end":16574,"line_start":512,"line_end":512,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16575,"byte_end":16578,"line_start":513,"line_end":513,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16579,"byte_end":16593,"line_start":514,"line_end":514,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16594,"byte_end":16597,"line_start":515,"line_end":515,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16598,"byte_end":16605,"line_start":516,"line_end":516,"column_start":1,"column_end":8}},{"value":"/ let x = rand::random::<u8>();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16606,"byte_end":16639,"line_start":517,"line_end":517,"column_start":1,"column_end":34}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16640,"byte_end":16662,"line_start":518,"line_end":518,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16663,"byte_end":16666,"line_start":519,"line_end":519,"column_start":1,"column_end":4}},{"value":"/ let y = rand::random::<f64>();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16667,"byte_end":16701,"line_start":520,"line_end":520,"column_start":1,"column_end":35}},{"value":"/ println!(\"{}\", y);","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16702,"byte_end":16724,"line_start":521,"line_end":521,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16725,"byte_end":16728,"line_start":522,"line_end":522,"column_start":1,"column_end":4}},{"value":"/ if rand::random() { // generates a boolean","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16729,"byte_end":16775,"line_start":523,"line_end":523,"column_start":1,"column_end":47}},{"value":"/     println!(\"Better lucky than good!\");","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16776,"byte_end":16820,"line_start":524,"line_end":524,"column_start":1,"column_end":45}},{"value":"/ }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16821,"byte_end":16826,"line_start":525,"line_end":525,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16827,"byte_end":16834,"line_start":526,"line_end":526,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16835,"byte_end":16838,"line_start":527,"line_end":527,"column_start":1,"column_end":4}},{"value":"/ If you're calling `random()` in a loop, caching the generator as in the","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16839,"byte_end":16914,"line_start":528,"line_end":528,"column_start":1,"column_end":76}},{"value":"/ following example can increase performance.","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16915,"byte_end":16962,"line_start":529,"line_end":529,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16963,"byte_end":16966,"line_start":530,"line_end":530,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16967,"byte_end":16974,"line_start":531,"line_end":531,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16975,"byte_end":16993,"line_start":532,"line_end":532,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16994,"byte_end":16997,"line_start":533,"line_end":533,"column_start":1,"column_end":4}},{"value":"/ let mut v = vec![1, 2, 3];","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":16998,"byte_end":17028,"line_start":534,"line_end":534,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":17029,"byte_end":17032,"line_start":535,"line_end":535,"column_start":1,"column_end":4}},{"value":"/ for x in v.iter_mut() {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":17033,"byte_end":17060,"line_start":536,"line_end":536,"column_start":1,"column_end":28}},{"value":"/     *x = rand::random()","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":17061,"byte_end":17088,"line_start":537,"line_end":537,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":17089,"byte_end":17094,"line_start":538,"line_end":538,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":17095,"byte_end":17098,"line_start":539,"line_end":539,"column_start":1,"column_end":4}},{"value":"/ // can be made faster by caching thread_rng","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":17099,"byte_end":17146,"line_start":540,"line_end":540,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":17147,"byte_end":17150,"line_start":541,"line_end":541,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":17151,"byte_end":17188,"line_start":542,"line_end":542,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":17189,"byte_end":17192,"line_start":543,"line_end":543,"column_start":1,"column_end":4}},{"value":"/ for x in v.iter_mut() {","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":17193,"byte_end":17220,"line_start":544,"line_end":544,"column_start":1,"column_end":28}},{"value":"/     *x = rng.gen();","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":17221,"byte_end":17244,"line_start":545,"line_end":545,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":17245,"byte_end":17250,"line_start":546,"line_end":546,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":17251,"byte_end":17258,"line_start":547,"line_end":547,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":17259,"byte_end":17262,"line_start":548,"line_end":548,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: distributions::Standard","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":17263,"byte_end":17304,"line_start":549,"line_end":549,"column_start":1,"column_end":42}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":17305,"byte_end":17328,"line_start":550,"line_end":550,"column_start":1,"column_end":24}},{"value":"inline","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":17329,"byte_end":17338,"line_start":551,"line_end":551,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":39745,"byte_end":39759,"line_start":72,"line_end":72,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":40030,"byte_end":40044,"line_start":81,"line_end":81,"column_start":30,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":40054,"byte_end":40063,"line_start":83,"line_end":83,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":41944,"byte_end":41953,"line_start":128,"line_end":128,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/binomial.rs","byte_start":44973,"byte_end":44981,"line_start":30,"line_end":30,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/binomial.rs","byte_start":45607,"byte_end":45615,"line_start":49,"line_end":49,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/cauchy.rs","byte_start":56322,"byte_end":56328,"line_start":29,"line_end":29,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/cauchy.rs","byte_start":56689,"byte_end":56695,"line_start":39,"line_end":39,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":59602,"byte_end":59611,"line_start":30,"line_end":30,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":60401,"byte_end":60410,"line_start":61,"line_end":61,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":63461,"byte_end":63465,"line_start":36,"line_end":36,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":64451,"byte_end":64454,"line_start":72,"line_end":72,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":64783,"byte_end":64786,"line_start":84,"line_end":84,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":68117,"byte_end":68122,"line_start":84,"line_end":84,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":68758,"byte_end":68773,"line_start":105,"line_end":105,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":68992,"byte_end":69007,"line_start":114,"line_end":114,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":69246,"byte_end":69251,"line_start":125,"line_end":125,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":69512,"byte_end":69527,"line_start":134,"line_end":134,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":69729,"byte_end":69744,"line_start":141,"line_end":141,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":71126,"byte_end":71136,"line_start":186,"line_end":186,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":71553,"byte_end":71563,"line_start":199,"line_end":199,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":72388,"byte_end":72395,"line_start":227,"line_end":227,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":72863,"byte_end":72870,"line_start":241,"line_end":241,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":73260,"byte_end":73268,"line_start":256,"line_end":256,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":73594,"byte_end":73602,"line_start":267,"line_end":267,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":74008,"byte_end":74012,"line_start":282,"line_end":282,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":74399,"byte_end":74403,"line_start":296,"line_end":296,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":77395,"byte_end":77409,"line_start":33,"line_end":33,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":79119,"byte_end":79125,"line_start":92,"line_end":92,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":79500,"byte_end":79506,"line_start":105,"line_end":105,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":79961,"byte_end":79970,"line_start":123,"line_end":123,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":80397,"byte_end":80406,"line_start":138,"line_end":138,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/pareto.rs","byte_start":81973,"byte_end":81979,"line_start":23,"line_end":23,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/pareto.rs","byte_start":82502,"byte_end":82508,"line_start":41,"line_end":41,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/poisson.rs","byte_start":84122,"byte_end":84129,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/poisson.rs","byte_start":84658,"byte_end":84665,"line_start":48,"line_end":48,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/triangular.rs","byte_start":88922,"byte_end":88932,"line_start":24,"line_end":24,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/triangular.rs","byte_start":89358,"byte_end":89368,"line_start":40,"line_end":40,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":97086,"byte_end":97093,"line_start":164,"line_end":164,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":97859,"byte_end":97866,"line_start":186,"line_end":186,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":101062,"byte_end":101069,"line_start":270,"line_end":270,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":101239,"byte_end":101246,"line_start":276,"line_end":276,"column_start":65,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":101819,"byte_end":101827,"line_start":293,"line_end":293,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":124505,"byte_end":124513,"line_start":861,"line_end":861,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":124579,"byte_end":124594,"line_start":865,"line_end":865,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":280},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_circle.rs","byte_start":144161,"byte_end":144171,"line_start":27,"line_end":27,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_circle.rs","byte_start":144332,"byte_end":144342,"line_start":35,"line_end":35,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_sphere.rs","byte_start":147185,"byte_end":147202,"line_start":26,"line_end":26,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_sphere.rs","byte_start":147384,"byte_end":147401,"line_start":34,"line_end":34,"column_start":33,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weibull.rs","byte_start":150123,"byte_end":150130,"line_start":23,"line_end":23,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weibull.rs","byte_start":150523,"byte_end":150530,"line_start":38,"line_end":38,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":168505,"byte_end":168518,"line_start":69,"line_end":69,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":170801,"byte_end":170808,"line_start":131,"line_end":131,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":173963,"byte_end":173976,"line_start":226,"line_end":226,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":174350,"byte_end":174363,"line_start":237,"line_end":237,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":174818,"byte_end":174831,"line_start":252,"line_end":252,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":154717,"byte_end":154730,"line_start":91,"line_end":91,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":393},{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":159468,"byte_end":159481,"line_start":225,"line_end":225,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":165313,"byte_end":165326,"line_start":402,"line_end":402,"column_start":30,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":165353,"byte_end":165366,"line_start":404,"line_end":404,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/integer.rs","byte_start":196271,"byte_end":196279,"line_start":20,"line_end":20,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/integer.rs","byte_start":196420,"byte_end":196428,"line_start":27,"line_end":27,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/integer.rs","byte_start":196571,"byte_end":196579,"line_start":34,"line_end":34,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/integer.rs","byte_start":196715,"byte_end":196723,"line_start":41,"line_end":41,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/integer.rs","byte_start":196898,"byte_end":196906,"line_start":49,"line_end":49,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/integer.rs","byte_start":197201,"byte_end":197209,"line_start":59,"line_end":59,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":205589,"byte_end":205597,"line_start":42,"line_end":42,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":206346,"byte_end":206358,"line_start":63,"line_end":63,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":207137,"byte_end":207145,"line_start":82,"line_end":82,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":208326,"byte_end":208334,"line_start":117,"line_end":117,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":209628,"byte_end":209636,"line_start":159,"line_end":159,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":209980,"byte_end":209988,"line_start":173,"line_end":173,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":32141,"byte_end":32149,"line_start":256,"line_end":256,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":32717,"byte_end":32725,"line_start":276,"line_end":276,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":265059,"byte_end":265066,"line_start":51,"line_end":51,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":265220,"byte_end":265227,"line_start":58,"line_end":58,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":266091,"byte_end":266100,"line_start":91,"line_end":91,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":266241,"byte_end":266250,"line_start":97,"line_end":97,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":271147,"byte_end":271159,"line_start":84,"line_end":84,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":612},{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":271986,"byte_end":271998,"line_start":107,"line_end":107,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":272537,"byte_end":272549,"line_start":131,"line_end":131,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":272876,"byte_end":272888,"line_start":143,"line_end":143,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":273178,"byte_end":273191,"line_start":159,"line_end":159,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":274034,"byte_end":274047,"line_start":181,"line_end":181,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":637},{"krate":0,"index":639},{"krate":0,"index":641},{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":276623,"byte_end":276636,"line_start":258,"line_end":258,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":277075,"byte_end":277088,"line_start":274,"line_end":274,"column_start":29,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/entropy.rs","byte_start":280860,"byte_end":280870,"line_start":28,"line_end":28,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/entropy.rs","byte_start":281222,"byte_end":281232,"line_start":39,"line_end":39,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":674}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/entropy.rs","byte_start":281314,"byte_end":281324,"line_start":45,"line_end":45,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/entropy.rs","byte_start":281709,"byte_end":281719,"line_start":63,"line_end":63,"column_start":20,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":282925,"byte_end":282932,"line_start":33,"line_end":33,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":687}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":283228,"byte_end":283235,"line_start":44,"line_end":44,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":692}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","byte_start":285304,"byte_end":285310,"line_start":38,"line_end":38,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","byte_start":285766,"byte_end":285772,"line_start":60,"line_end":60,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","byte_start":286081,"byte_end":286087,"line_start":74,"line_end":74,"column_start":20,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":290614,"byte_end":290623,"line_start":86,"line_end":86,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":727}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":290721,"byte_end":290730,"line_start":92,"line_end":92,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":291227,"byte_end":291236,"line_start":112,"line_end":112,"column_start":20,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":321003,"byte_end":321011,"line_start":36,"line_end":36,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":754},{"krate":0,"index":755}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":322755,"byte_end":322763,"line_start":95,"line_end":95,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":323353,"byte_end":323361,"line_start":111,"line_end":111,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":323473,"byte_end":323481,"line_start":118,"line_end":118,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":764}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":323782,"byte_end":323794,"line_start":134,"line_end":134,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":771}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":324329,"byte_end":324341,"line_start":155,"line_end":155,"column_start":32,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":324565,"byte_end":324581,"line_start":166,"line_end":166,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":325106,"byte_end":325122,"line_start":188,"line_end":188,"column_start":28,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":308071,"byte_end":308072,"line_start":482,"line_end":482,"column_start":28,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":308573,"byte_end":308588,"line_start":498,"line_end":498,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":883}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":309040,"byte_end":309055,"line_start":513,"line_end":513,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12837,"byte_end":12838,"line_start":394,"line_end":394,"column_start":35,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":2970,"byte_end":2983,"line_start":99,"line_end":99,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":14}},{"kind":"Mod","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":28606,"byte_end":28613,"line_start":154,"line_end":154,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":217}},{"kind":"Mod","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":28768,"byte_end":28776,"line_start":158,"line_end":158,"column_start":35,"column_end":43},"ref_id":{"krate":0,"index":320}},{"kind":"Mod","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":151880,"byte_end":151892,"line_start":19,"line_end":19,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":321}},{"kind":"Mod","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":2993,"byte_end":3000,"line_start":100,"line_end":100,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":560}},{"kind":"Mod","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":3010,"byte_end":3014,"line_start":101,"line_end":101,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":575}},{"kind":"Mod","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":262417,"byte_end":262424,"line_start":99,"line_end":99,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":576}},{"kind":"Mod","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mod.rs","byte_start":262472,"byte_end":262476,"line_start":102,"line_end":102,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":681}},{"kind":"Mod","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":3024,"byte_end":3027,"line_start":102,"line_end":102,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":738}},{"kind":"Mod","span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":292436,"byte_end":292441,"line_start":28,"line_end":28,"column_start":35,"column_end":40},"ref_id":{"krate":0,"index":739}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":39745,"byte_end":39759,"line_start":72,"line_end":72,"column_start":23,"column_end":37},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":940},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":40030,"byte_end":40044,"line_start":81,"line_end":81,"column_start":30,"column_end":44},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":940},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":40054,"byte_end":40063,"line_start":83,"line_end":83,"column_start":6,"column_end":15},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":933},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/bernoulli.rs","byte_start":41944,"byte_end":41953,"line_start":128,"line_end":128,"column_start":29,"column_end":38},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":933},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/binomial.rs","byte_start":44973,"byte_end":44981,"line_start":30,"line_end":30,"column_start":6,"column_end":14},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":954},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/binomial.rs","byte_start":45607,"byte_end":45615,"line_start":49,"line_end":49,"column_start":28,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":954},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/cauchy.rs","byte_start":56322,"byte_end":56328,"line_start":29,"line_end":29,"column_start":6,"column_end":12},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":962},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/cauchy.rs","byte_start":56689,"byte_end":56695,"line_start":39,"line_end":39,"column_start":28,"column_end":34},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":962},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":59602,"byte_end":59611,"line_start":30,"line_end":30,"column_start":6,"column_end":15},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":970},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/dirichlet.rs","byte_start":60401,"byte_end":60410,"line_start":61,"line_end":61,"column_start":33,"column_end":42},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":970},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":63461,"byte_end":63465,"line_start":36,"line_end":36,"column_start":28,"column_end":32},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":976},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":64451,"byte_end":64454,"line_start":72,"line_end":72,"column_start":6,"column_end":9},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":983},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/exponential.rs","byte_start":64783,"byte_end":64786,"line_start":84,"line_end":84,"column_start":28,"column_end":31},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":983},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":68117,"byte_end":68122,"line_start":84,"line_end":84,"column_start":6,"column_end":11},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":990},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":68758,"byte_end":68773,"line_start":105,"line_end":105,"column_start":6,"column_end":21},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1012},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":68992,"byte_end":69007,"line_start":114,"line_end":114,"column_start":6,"column_end":21},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1020},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":69246,"byte_end":69251,"line_start":125,"line_end":125,"column_start":28,"column_end":33},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":990},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":69512,"byte_end":69527,"line_start":134,"line_end":134,"column_start":28,"column_end":43},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1012},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":69729,"byte_end":69744,"line_start":141,"line_end":141,"column_start":28,"column_end":43},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1020},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":71126,"byte_end":71136,"line_start":186,"line_end":186,"column_start":6,"column_end":16},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1029},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":71553,"byte_end":71563,"line_start":199,"line_end":199,"column_start":28,"column_end":38},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1029},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":72388,"byte_end":72395,"line_start":227,"line_end":227,"column_start":6,"column_end":13},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1047},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":72863,"byte_end":72870,"line_start":241,"line_end":241,"column_start":28,"column_end":35},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1047},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":73260,"byte_end":73268,"line_start":256,"line_end":256,"column_start":6,"column_end":14},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1056},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":73594,"byte_end":73602,"line_start":267,"line_end":267,"column_start":28,"column_end":36},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1056},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":74008,"byte_end":74012,"line_start":282,"line_end":282,"column_start":6,"column_end":10},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1064},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/gamma.rs","byte_start":74399,"byte_end":74403,"line_start":296,"line_end":296,"column_start":28,"column_end":32},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1064},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":77395,"byte_end":77409,"line_start":33,"line_end":33,"column_start":28,"column_end":42},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1072},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":79119,"byte_end":79125,"line_start":92,"line_end":92,"column_start":6,"column_end":12},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1079},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":79500,"byte_end":79506,"line_start":105,"line_end":105,"column_start":28,"column_end":34},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1079},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":79961,"byte_end":79970,"line_start":123,"line_end":123,"column_start":6,"column_end":15},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1087},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/normal.rs","byte_start":80397,"byte_end":80406,"line_start":138,"line_end":138,"column_start":28,"column_end":37},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1087},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/pareto.rs","byte_start":81973,"byte_end":81979,"line_start":23,"line_end":23,"column_start":6,"column_end":12},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1094},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/pareto.rs","byte_start":82502,"byte_end":82508,"line_start":41,"line_end":41,"column_start":28,"column_end":34},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1094},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/poisson.rs","byte_start":84122,"byte_end":84129,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1102},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/poisson.rs","byte_start":84658,"byte_end":84665,"line_start":48,"line_end":48,"column_start":28,"column_end":35},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1102},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/triangular.rs","byte_start":88922,"byte_end":88932,"line_start":24,"line_end":24,"column_start":6,"column_end":16},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1113},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/triangular.rs","byte_start":89358,"byte_end":89368,"line_start":40,"line_end":40,"column_start":28,"column_end":38},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1113},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":97086,"byte_end":97093,"line_start":164,"line_end":164,"column_start":24,"column_end":31},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1122},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":97859,"byte_end":97866,"line_start":186,"line_end":186,"column_start":44,"column_end":51},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1122},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98282,"byte_end":98287,"line_start":199,"line_end":199,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1908},"to":{"krate":0,"index":239}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":98862,"byte_end":98867,"line_start":214,"line_end":214,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1908},"to":{"krate":0,"index":241}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":101062,"byte_end":101069,"line_start":270,"line_end":270,"column_start":56,"column_end":63},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1122},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":101239,"byte_end":101246,"line_start":276,"line_end":276,"column_start":65,"column_end":72},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1122},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":101819,"byte_end":101827,"line_start":293,"line_end":293,"column_start":43,"column_end":51},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":265},"to":{"krate":0,"index":261}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":124505,"byte_end":124513,"line_start":861,"line_end":861,"column_start":24,"column_end":32},"kind":{"Impl":{"id":57}},"from":{"krate":2,"index":32309},"to":{"krate":0,"index":239}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/uniform.rs","byte_start":124579,"byte_end":124594,"line_start":865,"line_end":865,"column_start":25,"column_end":40},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1383},"to":{"krate":0,"index":241}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_circle.rs","byte_start":144161,"byte_end":144171,"line_start":27,"line_end":27,"column_start":6,"column_end":16},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_circle.rs","byte_start":144332,"byte_end":144342,"line_start":35,"line_end":35,"column_start":33,"column_end":43},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1406},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_sphere.rs","byte_start":147185,"byte_end":147202,"line_start":26,"line_end":26,"column_start":6,"column_end":23},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1413},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/unit_sphere.rs","byte_start":147384,"byte_end":147401,"line_start":34,"line_end":34,"column_start":33,"column_end":50},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1413},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weibull.rs","byte_start":150123,"byte_end":150130,"line_start":23,"line_end":23,"column_start":6,"column_end":13},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1420},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weibull.rs","byte_start":150523,"byte_end":150530,"line_start":38,"line_end":38,"column_start":28,"column_end":35},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1420},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":168505,"byte_end":168518,"line_start":69,"line_end":69,"column_start":17,"column_end":30},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":338},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":170801,"byte_end":170808,"line_start":131,"line_end":131,"column_start":14,"column_end":21},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":349},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":173963,"byte_end":173976,"line_start":226,"line_end":226,"column_start":41,"column_end":54},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":338},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":174350,"byte_end":174363,"line_start":237,"line_end":237,"column_start":32,"column_end":45},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":338},"to":{"krate":2,"index":6176}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":174818,"byte_end":174831,"line_start":252,"line_end":252,"column_start":27,"column_end":40},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":338},"to":{"krate":2,"index":1604}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175389,"byte_end":175394,"line_start":269,"line_end":269,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1908},"to":{"krate":0,"index":372}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175401,"byte_end":175405,"line_start":270,"line_end":270,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":1913},"to":{"krate":0,"index":372}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175412,"byte_end":175425,"line_start":271,"line_end":271,"column_start":7,"column_end":20},"kind":"SuperTrait","from":{"krate":0,"index":239},"to":{"krate":0,"index":372}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175432,"byte_end":175442,"line_start":272,"line_end":272,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":1669},"to":{"krate":0,"index":372}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175449,"byte_end":175452,"line_start":273,"line_end":273,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1968},"to":{"krate":0,"index":372}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175474,"byte_end":175483,"line_start":274,"line_end":274,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":1999},"to":{"krate":0,"index":372}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175490,"byte_end":175493,"line_start":275,"line_end":275,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1973},"to":{"krate":0,"index":372}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175515,"byte_end":175524,"line_start":276,"line_end":276,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":2003},"to":{"krate":0,"index":372}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175531,"byte_end":175534,"line_start":277,"line_end":277,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1978},"to":{"krate":0,"index":372}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175556,"byte_end":175565,"line_start":278,"line_end":278,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":2007},"to":{"krate":0,"index":372}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175572,"byte_end":175575,"line_start":279,"line_end":279,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1983},"to":{"krate":0,"index":372}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175597,"byte_end":175606,"line_start":280,"line_end":280,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":2011},"to":{"krate":0,"index":372}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/alias_method.rs","byte_start":175613,"byte_end":175616,"line_start":281,"line_end":281,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":4834},"to":{"krate":0,"index":372}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":154717,"byte_end":154730,"line_start":91,"line_end":91,"column_start":37,"column_end":50},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":159468,"byte_end":159481,"line_start":225,"line_end":225,"column_start":33,"column_end":46},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1486},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":165313,"byte_end":165326,"line_start":402,"line_end":402,"column_start":30,"column_end":43},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1497},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/weighted/mod.rs","byte_start":165353,"byte_end":165366,"line_start":404,"line_end":404,"column_start":23,"column_end":36},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1497},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/integer.rs","byte_start":196271,"byte_end":196279,"line_start":20,"line_end":20,"column_start":27,"column_end":35},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1980},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/integer.rs","byte_start":196420,"byte_end":196428,"line_start":27,"line_end":27,"column_start":28,"column_end":36},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1980},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/integer.rs","byte_start":196571,"byte_end":196579,"line_start":34,"line_end":34,"column_start":28,"column_end":36},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1980},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/integer.rs","byte_start":196715,"byte_end":196723,"line_start":41,"line_end":41,"column_start":28,"column_end":36},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1980},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/integer.rs","byte_start":196898,"byte_end":196906,"line_start":49,"line_end":49,"column_start":29,"column_end":37},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1980},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/integer.rs","byte_start":197201,"byte_end":197209,"line_start":59,"line_end":59,"column_start":30,"column_end":38},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1980},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":205589,"byte_end":205597,"line_start":42,"line_end":42,"column_start":29,"column_end":37},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1980},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":206346,"byte_end":206358,"line_start":63,"line_end":63,"column_start":29,"column_end":41},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1593},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":207137,"byte_end":207145,"line_start":82,"line_end":82,"column_start":29,"column_end":37},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1980},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":208326,"byte_end":208334,"line_start":117,"line_end":117,"column_start":27,"column_end":35},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1980},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":209628,"byte_end":209636,"line_start":159,"line_end":159,"column_start":37,"column_end":45},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1980},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/other.rs","byte_start":209980,"byte_end":209988,"line_start":173,"line_end":173,"column_start":39,"column_end":47},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1980},"to":{"krate":0,"index":537}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/utils.rs","byte_start":221888,"byte_end":221893,"line_start":246,"line_end":246,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1908},"to":{"krate":0,"index":507}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/utils.rs","byte_start":222099,"byte_end":222104,"line_start":253,"line_end":253,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":1908},"to":{"krate":0,"index":511}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/utils.rs","byte_start":222549,"byte_end":222554,"line_start":274,"line_end":274,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1908},"to":{"krate":0,"index":516}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":32141,"byte_end":32149,"line_start":256,"line_end":256,"column_start":28,"column_end":36},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1968},"to":{"krate":2,"index":4965}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/distributions/mod.rs","byte_start":32717,"byte_end":32725,"line_start":276,"line_end":276,"column_start":39,"column_end":47},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1968},"to":{"krate":2,"index":5221}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":265059,"byte_end":265066,"line_start":51,"line_end":51,"column_start":15,"column_end":22},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1987},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":265220,"byte_end":265227,"line_start":58,"line_end":58,"column_start":27,"column_end":34},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1987},"to":{"krate":15,"index":141}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":266091,"byte_end":266100,"line_start":91,"line_end":91,"column_start":23,"column_end":32},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1993},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/read.rs","byte_start":266241,"byte_end":266250,"line_start":97,"line_end":97,"column_start":28,"column_end":37},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1993},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":271147,"byte_end":271159,"line_start":84,"line_end":84,"column_start":15,"column_end":27},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1998},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":271986,"byte_end":271998,"line_start":107,"line_end":107,"column_start":36,"column_end":48},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1998},"to":{"krate":15,"index":141}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":272537,"byte_end":272549,"line_start":131,"line_end":131,"column_start":25,"column_end":37},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1998},"to":{"krate":2,"index":1604}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":272876,"byte_end":272888,"line_start":143,"line_end":143,"column_start":29,"column_end":41},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1998},"to":{"krate":15,"index":146}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":273178,"byte_end":273191,"line_start":159,"line_end":159,"column_start":32,"column_end":45},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2007},"to":{"krate":15,"index":51}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":274034,"byte_end":274047,"line_start":181,"line_end":181,"column_start":15,"column_end":28},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2007},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":276623,"byte_end":276636,"line_start":258,"line_end":258,"column_start":25,"column_end":38},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2007},"to":{"krate":2,"index":1604}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/adapter/reseeding.rs","byte_start":277075,"byte_end":277088,"line_start":274,"line_end":274,"column_start":29,"column_end":42},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2007},"to":{"krate":15,"index":146}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/entropy.rs","byte_start":280860,"byte_end":280870,"line_start":28,"line_end":28,"column_start":6,"column_end":16},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2019},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/entropy.rs","byte_start":281222,"byte_end":281232,"line_start":39,"line_end":39,"column_start":18,"column_end":28},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2019},"to":{"krate":2,"index":1893}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/entropy.rs","byte_start":281314,"byte_end":281324,"line_start":45,"line_end":45,"column_start":18,"column_end":28},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2019},"to":{"krate":15,"index":141}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/entropy.rs","byte_start":281709,"byte_end":281719,"line_start":63,"line_end":63,"column_start":20,"column_end":30},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2019},"to":{"krate":15,"index":146}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":282925,"byte_end":282932,"line_start":33,"line_end":33,"column_start":6,"column_end":13},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2023},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/mock.rs","byte_start":283228,"byte_end":283235,"line_start":44,"line_end":44,"column_start":18,"column_end":25},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2023},"to":{"krate":15,"index":141}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","byte_start":285304,"byte_end":285310,"line_start":38,"line_end":38,"column_start":18,"column_end":24},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2030},"to":{"krate":15,"index":141}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","byte_start":285766,"byte_end":285772,"line_start":60,"line_end":60,"column_start":22,"column_end":28},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2030},"to":{"krate":15,"index":147}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/std.rs","byte_start":286081,"byte_end":286087,"line_start":74,"line_end":74,"column_start":20,"column_end":26},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2030},"to":{"krate":15,"index":146}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":290614,"byte_end":290623,"line_start":86,"line_end":86,"column_start":18,"column_end":27},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2037},"to":{"krate":2,"index":1893}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":290721,"byte_end":290730,"line_start":92,"line_end":92,"column_start":18,"column_end":27},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2037},"to":{"krate":15,"index":141}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/rngs/thread.rs","byte_start":291227,"byte_end":291236,"line_start":112,"line_end":112,"column_start":20,"column_end":29},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2037},"to":{"krate":15,"index":146}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":321003,"byte_end":321011,"line_start":36,"line_end":36,"column_start":6,"column_end":14},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2049},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":322755,"byte_end":322763,"line_start":95,"line_end":95,"column_start":20,"column_end":28},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":1632}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":323353,"byte_end":323361,"line_start":111,"line_end":111,"column_start":25,"column_end":33},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":323473,"byte_end":323481,"line_start":118,"line_end":118,"column_start":27,"column_end":35},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2049},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":323782,"byte_end":323794,"line_start":134,"line_end":134,"column_start":23,"column_end":35},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2060},"to":{"krate":2,"index":4965}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":324329,"byte_end":324341,"line_start":155,"line_end":155,"column_start":32,"column_end":44},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2060},"to":{"krate":2,"index":4920}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":324565,"byte_end":324581,"line_start":166,"line_end":166,"column_start":19,"column_end":35},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2071},"to":{"krate":2,"index":4965}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":325106,"byte_end":325122,"line_start":188,"line_end":188,"column_start":28,"column_end":44},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2071},"to":{"krate":2,"index":4920}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":330188,"byte_end":330192,"line_start":316,"line_end":316,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":1913},"to":{"krate":0,"index":794}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":330195,"byte_end":330205,"line_start":316,"line_end":316,"column_start":20,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1669},"to":{"krate":0,"index":794}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":330208,"byte_end":330211,"line_start":316,"line_end":316,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":1658},"to":{"krate":0,"index":794}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":330214,"byte_end":330223,"line_start":316,"line_end":316,"column_start":39,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":1632},"to":{"krate":0,"index":794}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":330226,"byte_end":330228,"line_start":316,"line_end":316,"column_start":51,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":1637},"to":{"krate":0,"index":794}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":330231,"byte_end":330244,"line_start":316,"line_end":316,"column_start":56,"column_end":69},"kind":"SuperTrait","from":{"krate":0,"index":239},"to":{"krate":0,"index":794}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/index.rs","byte_start":330259,"byte_end":330263,"line_start":316,"line_end":316,"column_start":84,"column_end":88},"kind":"SuperTrait","from":{"krate":2,"index":6364},"to":{"krate":0,"index":794}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299816,"byte_end":299824,"line_start":242,"line_end":242,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":4965},"to":{"krate":0,"index":836}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":299827,"byte_end":299832,"line_start":242,"line_end":242,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":1908},"to":{"krate":0,"index":836}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":308071,"byte_end":308072,"line_start":482,"line_end":482,"column_start":28,"column_end":29},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":875},"to":{"krate":0,"index":836}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":308573,"byte_end":308588,"line_start":498,"line_end":498,"column_start":73,"column_end":88},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2082},"to":{"krate":2,"index":4965}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/seq/mod.rs","byte_start":309040,"byte_end":309055,"line_start":513,"line_end":513,"column_start":9,"column_end":24},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2082},"to":{"krate":2,"index":4920}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":4748,"byte_end":4755,"line_start":147,"line_end":147,"column_start":16,"column_end":23},"kind":"SuperTrait","from":{"krate":15,"index":141},"to":{"krate":0,"index":902}},{"span":{"file_name":"/home/miguel/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.7.3/src/lib.rs","byte_start":12837,"byte_end":12838,"line_start":394,"line_end":394,"column_start":35,"column_end":36},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":922},"to":{"krate":0,"index":902}}]}